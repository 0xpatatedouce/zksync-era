Optimized IR:

Optimized IR:

Optimized IR:

Optimized IR:

Optimized IR:

Optimized IR:
/// @use-src 0:"UniswapV2Factory.sol"
object "Math_694" {
    code {
        /// @src 0:6402:6924  "library Math {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Math_694_deployed"), datasize("Math_694_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("Math_694_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_Math_694()
        { }
    }
    /// @use-src 0:"UniswapV2Factory.sol"
    object "Math_694_deployed" {
        code {
            /// @src 0:6402:6924  "library Math {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a264697066735822122050f444de5645d8eb989333ed5f2497b6c3abbbae799e6de82e3073478204dfc364736f6c63430008100033"
    }
}

Optimized IR:
/// @use-src 0:"UniswapV2Factory.sol"
object "SafeMath_126" {
    code {
        /// @src 0:903:1333  "library SafeMath {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("SafeMath_126_deployed"), datasize("SafeMath_126_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("SafeMath_126_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_SafeMath_126()
        { }
    }
    /// @use-src 0:"UniswapV2Factory.sol"
    object "SafeMath_126_deployed" {
        code {
            /// @src 0:903:1333  "library SafeMath {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a26469706673582212208ecdc9622c96c7b61fc6be3c83156061fae819aed72f4769351e621cab97ca6b64736f6c63430008100033"
    }
}

Optimized IR:
/// @use-src 0:"UniswapV2Factory.sol"
object "UQ112x112_820" {
    code {
        /// @src 0:8044:8440  "library UQ112x112 {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("UQ112x112_820_deployed"), datasize("UQ112x112_820_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("UQ112x112_820_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_UQ112x112_820()
        { }
    }
    /// @use-src 0:"UniswapV2Factory.sol"
    object "UQ112x112_820_deployed" {
        code {
            /// @src 0:8044:8440  "library UQ112x112 {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a2646970667358221220567a94094a5f0e52c6f8358dd63b57dacb3733df11ac1c6173d10cef8ed20bf764736f6c63430008100033"
    }
}

Optimized IR:
/// @use-src 0:"UniswapV2Factory.sol"
object "UniswapV2ERC20_619" {
    code {
        /// @src 0:2694:6273  "contract UniswapV2ERC20 is IUniswapV2ERC20 {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        constructor_UniswapV2ERC20_619()
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("UniswapV2ERC20_619_deployed"), datasize("UniswapV2ERC20_619_deployed"))
        return(_1, datasize("UniswapV2ERC20_619_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function zero_value_for_split_t_uint256() -> ret
        { ret := 0 }
        function round_up_to_mul_of_32(value) -> result
        {
            result := and(add(value, 31), not(31))
        }
        function panic_error_0x41()
        {
            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
            mstore(4, 0x41)
            revert(0, 0x24)
        }
        function finalize_allocation(memPtr, size)
        {
            let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
            if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
            mstore(64, newFreePtr)
        }
        function allocate_memory(size) -> memPtr
        {
            memPtr := allocate_unbounded()
            finalize_allocation(memPtr, size)
        }
        function array_allocation_size_t_string_memory_ptr(length) -> size
        {
            if gt(length, 0xffffffffffffffff) { panic_error_0x41() }
            size := round_up_to_mul_of_32(length)
            size := add(size, 0x20)
        }
        function allocate_memory_array_t_string_memory_ptr(length) -> memPtr
        {
            let allocSize := array_allocation_size_t_string_memory_ptr(length)
            memPtr := allocate_memory(allocSize)
            mstore(memPtr, length)
        }
        function store_literal_in_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738(memPtr)
        {
            mstore(add(memPtr, 0), "Uniswap V2")
        }
        function copy_literal_to_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738() -> memPtr
        {
            memPtr := allocate_memory_array_t_string_memory_ptr(10)
            store_literal_in_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738(add(memPtr, 32))
        }
        function convert_t_stringliteral_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738_to_t_string_memory_ptr() -> converted
        {
            converted := copy_literal_to_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738()
        }
        /// @src 0:2773:2815  "string public constant name = \"Uniswap V2\""
        function constant_name_252() -> ret_mpos
        {
            /// @src 0:2803:2815  "\"Uniswap V2\""
            let _3_mpos := convert_t_stringliteral_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738_to_t_string_memory_ptr()
            ret_mpos := _3_mpos
        }
        function convert_array_t_string_memory_ptr_to_t_bytes_memory_ptr(value) -> converted
        { converted := value }
        function array_dataslot_t_bytes_memory_ptr(ptr) -> data
        {
            data := ptr
            data := add(ptr, 0x20)
        }
        function array_length_t_bytes_memory_ptr(value) -> length
        { length := mload(value) }
        function store_literal_in_memory_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6(memPtr)
        { mstore(add(memPtr, 0), "1") }
        function copy_literal_to_memory_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6() -> memPtr
        {
            memPtr := allocate_memory_array_t_string_memory_ptr(1)
            store_literal_in_memory_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6(add(memPtr, 32))
        }
        function convert_t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6_to_t_bytes_memory_ptr() -> converted
        {
            converted := copy_literal_to_memory_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6()
        }
        function cleanup_t_uint160(value) -> cleaned
        {
            cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
        }
        function identity(value) -> ret
        { ret := value }
        function convert_t_uint160_to_t_uint160(value) -> converted
        {
            converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
        }
        function convert_t_uint160_to_t_address(value) -> converted
        {
            converted := convert_t_uint160_to_t_uint160(value)
        }
        function convert_t_contract$_UniswapV2ERC20_$619_to_t_address(value) -> converted
        {
            converted := convert_t_uint160_to_t_address(value)
        }
        function cleanup_t_bytes32(value) -> cleaned
        { cleaned := value }
        function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos)
        {
            mstore(pos, cleanup_t_bytes32(value))
        }
        function cleanup_t_uint256(value) -> cleaned
        { cleaned := value }
        function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos)
        {
            mstore(pos, cleanup_t_uint256(value))
        }
        function cleanup_t_address(value) -> cleaned
        {
            cleaned := cleanup_t_uint160(value)
        }
        function abi_encode_t_address_to_t_address_fromStack(value, pos)
        {
            mstore(pos, cleanup_t_address(value))
        }
        function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack(headStart, value0, value1, value2, value3, value4) -> tail
        {
            tail := add(headStart, 160)
            abi_encode_t_bytes32_to_t_bytes32_fromStack(value0, add(headStart, 0))
            abi_encode_t_bytes32_to_t_bytes32_fromStack(value1, add(headStart, 32))
            abi_encode_t_bytes32_to_t_bytes32_fromStack(value2, add(headStart, 64))
            abi_encode_t_uint256_to_t_uint256_fromStack(value3, add(headStart, 96))
            abi_encode_t_address_to_t_address_fromStack(value4, add(headStart, 128))
        }
        function shift_left_0(value) -> newValue
        { newValue := shl(0, value) }
        function update_byte_slice_32_shift_0(value, toInsert) -> result
        {
            let mask := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function convert_t_bytes32_to_t_bytes32(value) -> converted
        {
            converted := cleanup_t_bytes32(value)
        }
        function shift_right_0_unsigned(value) -> newValue
        { newValue := shr(0, value) }
        function prepare_store_t_bytes32(value) -> ret
        {
            ret := shift_right_0_unsigned(value)
        }
        function update_storage_value_offset_0t_bytes32_to_t_bytes32(slot, value_0)
        {
            let convertedValue_0 := convert_t_bytes32_to_t_bytes32(value_0)
            sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_bytes32(convertedValue_0)))
        }
        /// @ast-id 315 @src 0:3360:3837  "constructor() {..."
        function constructor_UniswapV2ERC20_619()
        {
            constructor_IUniswapV2ERC20_243()
            /// @src 0:3384:3396  "uint chainId"
            let var_chainId_283
            let zero_t_uint256_2 := zero_value_for_split_t_uint256()
            var_chainId_283 := zero_t_uint256_2
            /// @src 0:3406:3459  "assembly {..."
            { var_chainId_283 := chainid() }
            /// @src 0:3538:3671  "keccak256(..."
            let expr_292 := 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f
            /// @src 0:3705:3709  "name"
            let expr_296_mpos := constant_name_252()
            /// @src 0:3699:3710  "bytes(name)"
            let expr_297_mpos := convert_array_t_string_memory_ptr_to_t_bytes_memory_ptr(expr_296_mpos)
            /// @src 0:3689:3711  "keccak256(bytes(name))"
            let expr_298 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_297_mpos), array_length_t_bytes_memory_ptr(expr_297_mpos))
            /// @src 0:3739:3749  "bytes(\"1\")"
            let expr_303_mpos := convert_t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6_to_t_bytes_memory_ptr()
            /// @src 0:3729:3750  "keccak256(bytes(\"1\"))"
            let expr_304 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_303_mpos), array_length_t_bytes_memory_ptr(expr_303_mpos))
            /// @src 0:3768:3775  "chainId"
            let _4 := var_chainId_283
            let expr_305 := _4
            /// @src 0:3801:3805  "this"
            let expr_308_address := address()
            /// @src 0:3793:3806  "address(this)"
            let expr_309 := convert_t_contract$_UniswapV2ERC20_$619_to_t_address(expr_308_address)
            /// @src 0:3510:3820  "abi.encode(..."
            let expr_310_mpos := allocate_unbounded()
            let _5 := add(expr_310_mpos, 0x20)
            let _6 := abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack(_5, expr_292, expr_298, expr_304, expr_305, expr_309)
            mstore(expr_310_mpos, sub(_6, add(expr_310_mpos, 0x20)))
            finalize_allocation(expr_310_mpos, sub(_6, expr_310_mpos))
            /// @src 0:3487:3830  "keccak256(..."
            let expr_311 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_310_mpos), array_length_t_bytes_memory_ptr(expr_310_mpos))
            /// @src 0:3468:3830  "DOMAIN_SEPARATOR = keccak256(..."
            update_storage_value_offset_0t_bytes32_to_t_bytes32(0x03, expr_311)
            let expr_312 := expr_311
        }
        /// @src 0:1421:2618  "interface IUniswapV2ERC20 {..."
        function constructor_IUniswapV2ERC20_243()
        { }
    }
    /// @use-src 0:"UniswapV2Factory.sol"
    object "UniswapV2ERC20_619_deployed" {
        code {
            /// @src 0:2694:6273  "contract UniswapV2ERC20 is IUniswapV2ERC20 {..."
            mstore(64, memoryguard(128))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := shift_right_224_unsigned(calldataload(0))
                switch selector
                case 0x06fdde03 { external_fun_name_252() }
                case 0x095ea7b3 { external_fun_approve_466() }
                case 0x18160ddd {
                    external_fun_totalSupply_260()
                }
                case 0x23b872dd {
                    external_fun_transferFrom_539()
                }
                case 0x30adf81f {
                    external_fun_PERMIT_TYPEHASH_275()
                }
                case 0x313ce567 { external_fun_decimals_258() }
                case 0x3644e515 {
                    external_fun_DOMAIN_SEPARATOR_272()
                }
                case 0x70a08231 { external_fun_balanceOf_264() }
                case 0x7ecebe00 { external_fun_nonces_279() }
                case 0x95d89b41 { external_fun_symbol_255() }
                case 0xa9059cbb { external_fun_transfer_485() }
                case 0xd505accf { external_fun_permit_618() }
                case 0xdd62ed3e { external_fun_allowance_270() }
                default { }
            }
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
            { revert(0, 0) }
            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
            { revert(0, 0) }
            function abi_decode_tuple_(headStart, dataEnd)
            {
                if slt(sub(dataEnd, headStart), 0)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
            }
            function round_up_to_mul_of_32(value) -> result
            {
                result := and(add(value, 31), not(31))
            }
            function panic_error_0x41()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x41)
                revert(0, 0x24)
            }
            function finalize_allocation(memPtr, size)
            {
                let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
                mstore(64, newFreePtr)
            }
            function allocate_memory(size) -> memPtr
            {
                memPtr := allocate_unbounded()
                finalize_allocation(memPtr, size)
            }
            function array_allocation_size_t_string_memory_ptr(length) -> size
            {
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }
                size := round_up_to_mul_of_32(length)
                size := add(size, 0x20)
            }
            function allocate_memory_array_t_string_memory_ptr(length) -> memPtr
            {
                let allocSize := array_allocation_size_t_string_memory_ptr(length)
                memPtr := allocate_memory(allocSize)
                mstore(memPtr, length)
            }
            function store_literal_in_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738(memPtr)
            {
                mstore(add(memPtr, 0), "Uniswap V2")
            }
            function copy_literal_to_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738() -> memPtr
            {
                memPtr := allocate_memory_array_t_string_memory_ptr(10)
                store_literal_in_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738(add(memPtr, 32))
            }
            function convert_t_stringliteral_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738_to_t_string_memory_ptr() -> converted
            {
                converted := copy_literal_to_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738()
            }
            /// @src 0:2773:2815  "string public constant name = \"Uniswap V2\""
            function constant_name_252() -> ret_mpos
            {
                /// @src 0:2803:2815  "\"Uniswap V2\""
                let _1_mpos := convert_t_stringliteral_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738_to_t_string_memory_ptr()
                ret_mpos := _1_mpos
            }
            /// @ast-id 252 @src 0:2773:2815  "string public constant name = \"Uniswap V2\""
            function getter_fun_name_252() -> ret_0
            { ret_0 := constant_name_252() }
            /// @src 0:2694:6273  "contract UniswapV2ERC20 is IUniswapV2ERC20 {..."
            function array_length_t_string_memory_ptr(value) -> length
            { length := mload(value) }
            function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos
            {
                mstore(pos, length)
                updated_pos := add(pos, 0x20)
            }
            function copy_memory_to_memory_with_cleanup(src, dst, length)
            {
                let i := 0
                for { } lt(i, length) { i := add(i, 32) }
                {
                    mstore(add(dst, i), mload(add(src, i)))
                }
                mstore(add(dst, length), 0)
            }
            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end
            {
                let length := array_length_t_string_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)
                copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)
                end := add(pos, round_up_to_mul_of_32(length))
            }
            function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0, tail)
            }
            function external_fun_name_252()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_name_252()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
            { revert(0, 0) }
            function cleanup_t_uint160(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function cleanup_t_address(value) -> cleaned
            {
                cleaned := cleanup_t_uint160(value)
            }
            function validator_revert_t_address(value)
            {
                if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }
            }
            function abi_decode_t_address(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_address(value)
            }
            function cleanup_t_uint256(value) -> cleaned
            { cleaned := value }
            function validator_revert_t_uint256(value)
            {
                if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }
            }
            function abi_decode_t_uint256(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_uint256(value)
            }
            function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1
            {
                if slt(sub(dataEnd, headStart), 64)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
            }
            function cleanup_t_bool(value) -> cleaned
            {
                cleaned := iszero(iszero(value))
            }
            function abi_encode_t_bool_to_t_bool_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_bool(value))
            }
            function abi_encode_tuple_t_bool__to_t_bool__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_bool_to_t_bool_fromStack(value0, add(headStart, 0))
            }
            function external_fun_approve_466()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1 := abi_decode_tuple_t_addresst_uint256(4, calldatasize())
                let ret_0 := fun_approve_466(param_0, param_1)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function shift_right_unsigned_dynamic(bits, value) -> newValue
            { newValue := shr(bits, value) }
            function cleanup_from_storage_t_uint256(value) -> cleaned
            { cleaned := value }
            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value
            {
                value := cleanup_from_storage_t_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
            }
            function read_from_storage_split_dynamic_t_uint256(slot, offset) -> value
            {
                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)
            }
            /// @ast-id 260 @src 0:2908:2931  "uint public totalSupply"
            function getter_fun_totalSupply_260() -> ret
            {
                let slot := 0
                let offset := 0
                ret := read_from_storage_split_dynamic_t_uint256(slot, offset)
            }
            /// @src 0:2694:6273  "contract UniswapV2ERC20 is IUniswapV2ERC20 {..."
            function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_uint256(value))
            }
            function abi_encode_tuple_t_uint256__to_t_uint256__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_uint256_to_t_uint256_fromStack(value0, add(headStart, 0))
            }
            function external_fun_totalSupply_260()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_totalSupply_260()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2
            {
                if slt(sub(dataEnd, headStart), 96)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value1 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 64
                    value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
            }
            function external_fun_transferFrom_539()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1, param_2 := abi_decode_tuple_t_addresst_addresst_uint256(4, calldatasize())
                let ret_0 := fun_transferFrom_539(param_0, param_1, param_2)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_t_rational_49955707469362902507454157297736832118868343942642399513960811609542965143241_by_1(value) -> cleaned
            { cleaned := value }
            function cleanup_t_bytes32(value) -> cleaned
            { cleaned := value }
            function shift_left_0(value) -> newValue
            { newValue := shl(0, value) }
            function convert_t_rational_49955707469362902507454157297736832118868343942642399513960811609542965143241_by_1_to_t_bytes32(value) -> converted
            {
                converted := cleanup_t_bytes32(shift_left_0(cleanup_t_rational_49955707469362902507454157297736832118868343942642399513960811609542965143241_by_1(value)))
            }
            /// @src 0:3193:3309  "bytes32 public constant PERMIT_TYPEHASH =..."
            function constant_PERMIT_TYPEHASH_275() -> ret
            {
                /// @src 0:3243:3309  "0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9"
                let expr_274 := 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9
                let _2 := convert_t_rational_49955707469362902507454157297736832118868343942642399513960811609542965143241_by_1_to_t_bytes32(expr_274)
                ret := _2
            }
            /// @ast-id 275 @src 0:3193:3309  "bytes32 public constant PERMIT_TYPEHASH =..."
            function getter_fun_PERMIT_TYPEHASH_275() -> ret_0
            {
                ret_0 := constant_PERMIT_TYPEHASH_275()
            }
            /// @src 0:2694:6273  "contract UniswapV2ERC20 is IUniswapV2ERC20 {..."
            function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_bytes32(value))
            }
            function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_bytes32_to_t_bytes32_fromStack(value0, add(headStart, 0))
            }
            function external_fun_PERMIT_TYPEHASH_275()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_PERMIT_TYPEHASH_275()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_t_rational_18_by_1(value) -> cleaned
            { cleaned := value }
            function cleanup_t_uint8(value) -> cleaned
            { cleaned := and(value, 0xff) }
            function identity(value) -> ret
            { ret := value }
            function convert_t_rational_18_by_1_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_18_by_1(value)))
            }
            /// @src 0:2867:2902  "uint8 public constant decimals = 18"
            function constant_decimals_258() -> ret
            {
                /// @src 0:2900:2902  "18"
                let expr_257 := 0x12
                let _3 := convert_t_rational_18_by_1_to_t_uint8(expr_257)
                ret := _3
            }
            /// @ast-id 258 @src 0:2867:2902  "uint8 public constant decimals = 18"
            function getter_fun_decimals_258() -> ret_0
            {
                ret_0 := constant_decimals_258()
            }
            /// @src 0:2694:6273  "contract UniswapV2ERC20 is IUniswapV2ERC20 {..."
            function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_uint8(value))
            }
            function abi_encode_tuple_t_uint8__to_t_uint8__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_uint8_to_t_uint8_fromStack(value0, add(headStart, 0))
            }
            function external_fun_decimals_258()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_decimals_258()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint8__to_t_uint8__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_from_storage_t_bytes32(value) -> cleaned
            { cleaned := value }
            function extract_from_storage_value_dynamict_bytes32(slot_value, offset) -> value
            {
                value := cleanup_from_storage_t_bytes32(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
            }
            function read_from_storage_split_dynamic_t_bytes32(slot, offset) -> value
            {
                value := extract_from_storage_value_dynamict_bytes32(sload(slot), offset)
            }
            /// @ast-id 272 @src 0:3052:3083  "bytes32 public DOMAIN_SEPARATOR"
            function getter_fun_DOMAIN_SEPARATOR_272() -> ret
            {
                let slot := 3
                let offset := 0
                ret := read_from_storage_split_dynamic_t_bytes32(slot, offset)
            }
            /// @src 0:2694:6273  "contract UniswapV2ERC20 is IUniswapV2ERC20 {..."
            function external_fun_DOMAIN_SEPARATOR_272()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_DOMAIN_SEPARATOR_272()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_decode_tuple_t_address(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
            }
            function convert_t_uint160_to_t_uint160(value) -> converted
            {
                converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
            }
            function convert_t_uint160_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_uint160(value)
            }
            function convert_t_address_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_address(value)
            }
            function mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(slot, key) -> dataSlot
            {
                mstore(0, convert_t_address_to_t_address(key))
                mstore(0x20, slot)
                dataSlot := keccak256(0, 0x40)
            }
            /// @ast-id 264 @src 0:2937:2978  "mapping(address => uint) public balanceOf"
            function getter_fun_balanceOf_264(key_0) -> ret
            {
                let slot := 1
                let offset := 0
                slot := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(slot, key_0)
                ret := read_from_storage_split_dynamic_t_uint256(slot, offset)
            }
            /// @src 0:2694:6273  "contract UniswapV2ERC20 is IUniswapV2ERC20 {..."
            function external_fun_balanceOf_264()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                let ret_0 := getter_fun_balanceOf_264(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            /// @ast-id 279 @src 0:3315:3353  "mapping(address => uint) public nonces"
            function getter_fun_nonces_279(key_0) -> ret
            {
                let slot := 4
                let offset := 0
                slot := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(slot, key_0)
                ret := read_from_storage_split_dynamic_t_uint256(slot, offset)
            }
            /// @src 0:2694:6273  "contract UniswapV2ERC20 is IUniswapV2ERC20 {..."
            function external_fun_nonces_279()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                let ret_0 := getter_fun_nonces_279(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function store_literal_in_memory_0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba563255(memPtr)
            {
                mstore(add(memPtr, 0), "UNI-V2")
            }
            function copy_literal_to_memory_0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba563255() -> memPtr
            {
                memPtr := allocate_memory_array_t_string_memory_ptr(6)
                store_literal_in_memory_0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba563255(add(memPtr, 32))
            }
            function convert_t_stringliteral_0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba563255_to_t_string_memory_ptr() -> converted
            {
                converted := copy_literal_to_memory_0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba563255()
            }
            /// @src 0:2821:2861  "string public constant symbol = \"UNI-V2\""
            function constant_symbol_255() -> ret_mpos
            {
                /// @src 0:2853:2861  "\"UNI-V2\""
                let _4_mpos := convert_t_stringliteral_0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba563255_to_t_string_memory_ptr()
                ret_mpos := _4_mpos
            }
            /// @ast-id 255 @src 0:2821:2861  "string public constant symbol = \"UNI-V2\""
            function getter_fun_symbol_255() -> ret_0
            {
                ret_0 := constant_symbol_255()
            }
            /// @src 0:2694:6273  "contract UniswapV2ERC20 is IUniswapV2ERC20 {..."
            function external_fun_symbol_255()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_symbol_255()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_transfer_485()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1 := abi_decode_tuple_t_addresst_uint256(4, calldatasize())
                let ret_0 := fun_transfer_485(param_0, param_1)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function validator_revert_t_uint8(value)
            {
                if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }
            }
            function abi_decode_t_uint8(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_uint8(value)
            }
            function validator_revert_t_bytes32(value)
            {
                if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }
            }
            function abi_decode_t_bytes32(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_bytes32(value)
            }
            function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6
            {
                if slt(sub(dataEnd, headStart), 224)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value1 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 64
                    value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 96
                    value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 128
                    value4 := abi_decode_t_uint8(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 160
                    value5 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 192
                    value6 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)
                }
            }
            function abi_encode_tuple__to__fromStack(headStart) -> tail
            { tail := add(headStart, 0) }
            function external_fun_permit_618()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1, param_2, param_3, param_4, param_5, param_6 := abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(4, calldatasize())
                fun_permit_618(param_0, param_1, param_2, param_3, param_4, param_5, param_6)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1
            {
                if slt(sub(dataEnd, headStart), 64)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value1 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
            }
            function mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address(slot, key) -> dataSlot
            {
                mstore(0, convert_t_address_to_t_address(key))
                mstore(0x20, slot)
                dataSlot := keccak256(0, 0x40)
            }
            /// @ast-id 270 @src 0:2984:3045  "mapping(address => mapping(address => uint)) public allowance"
            function getter_fun_allowance_270(key_0, key_1) -> ret
            {
                let slot := 2
                let offset := 0
                slot := mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address(slot, key_0)
                slot := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(slot, key_1)
                ret := read_from_storage_split_dynamic_t_uint256(slot, offset)
            }
            /// @src 0:2694:6273  "contract UniswapV2ERC20 is IUniswapV2ERC20 {..."
            function external_fun_allowance_270()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1 := abi_decode_tuple_t_addresst_address(4, calldatasize())
                let ret_0 := getter_fun_allowance_270(param_0, param_1)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
            function zero_value_for_split_t_bool() -> ret
            { ret := 0 }
            /// @ast-id 466 @src 0:4651:4795  "function approve(address spender, uint value) external returns (bool) {..."
            function fun_approve_466(var_spender_449, var_value_451) -> var__454
            {
                /// @src 0:4715:4719  "bool"
                let zero_t_bool_5 := zero_value_for_split_t_bool()
                var__454 := zero_t_bool_5
                /// @src 0:4740:4750  "msg.sender"
                let expr_458 := caller()
                /// @src 0:4752:4759  "spender"
                let _6 := var_spender_449
                let expr_459 := _6
                /// @src 0:4761:4766  "value"
                let _7 := var_value_451
                let expr_460 := _7
                fun__approve_409(expr_458, expr_459, expr_460)
                /// @src 0:4784:4788  "true"
                let expr_463 := 0x01
                /// @src 0:4777:4788  "return true"
                var__454 := expr_463
                leave
            }
            /// @src 0:2694:6273  "contract UniswapV2ERC20 is IUniswapV2ERC20 {..."
            function update_byte_slice_32_shift_0(value, toInsert) -> result
            {
                let mask := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_uint256_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))
            }
            function prepare_store_t_uint256(value) -> ret
            { ret := value }
            function update_storage_value_offset_0t_uint256_to_t_uint256(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)
                sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_uint256(convertedValue_0)))
            }
            /// @ast-id 409 @src 0:4257:4423  "function _approve(address owner, address spender, uint value) private {..."
            function fun__approve_409(var_owner_387, var_spender_389, var_value_391)
            {
                /// @src 0:4365:4370  "value"
                let _8 := var_value_391
                let expr_399 := _8
                /// @src 0:4337:4346  "allowance"
                let _9 := 0x02
                let expr_394 := _9
                /// @src 0:4347:4352  "owner"
                let _10 := var_owner_387
                let expr_395 := _10
                /// @src 0:4337:4353  "allowance[owner]"
                let _11 := mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address(expr_394, expr_395)
                let _12 := _11
                let expr_397 := _12
                /// @src 0:4354:4361  "spender"
                let _13 := var_spender_389
                let expr_396 := _13
                /// @src 0:4337:4362  "allowance[owner][spender]"
                let _14 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_397, expr_396)
                /// @src 0:4337:4370  "allowance[owner][spender] = value"
                update_storage_value_offset_0t_uint256_to_t_uint256(_14, expr_399)
                let expr_400 := expr_399
                /// @src 0:4394:4399  "owner"
                let _15 := var_owner_387
                let expr_403 := _15
                /// @src 0:4401:4408  "spender"
                let _16 := var_spender_389
                let expr_404 := _16
                /// @src 0:4410:4415  "value"
                let _17 := var_value_391
                let expr_405 := _17
                /// @src 0:4385:4416  "Approval(owner, spender, value)"
                let _18 := 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925
                let _19 := convert_t_address_to_t_address(expr_403)
                let _20 := convert_t_address_to_t_address(expr_404)
                {
                    let _21 := allocate_unbounded()
                    let _22 := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(_21, expr_405)
                    log3(_21, sub(_22, _21), _18, _19, _20)
                }
            }
            /// @ast-id 485 @src 0:4801:4937  "function transfer(address to, uint value) external returns (bool) {..."
            function fun_transfer_485(var_to_468, var_value_470) -> var__473
            {
                /// @src 0:4861:4865  "bool"
                let zero_t_bool_23 := zero_value_for_split_t_bool()
                var__473 := zero_t_bool_23
                /// @src 0:4887:4897  "msg.sender"
                let expr_477 := caller()
                /// @src 0:4899:4901  "to"
                let _24 := var_to_468
                let expr_478 := _24
                /// @src 0:4903:4908  "value"
                let _25 := var_value_470
                let expr_479 := _25
                fun__transfer_447(expr_477, expr_478, expr_479)
                /// @src 0:4926:4930  "true"
                let expr_482 := 0x01
                /// @src 0:4919:4930  "return true"
                var__473 := expr_482
                leave
            }
            /// @src 0:2694:6273  "contract UniswapV2ERC20 is IUniswapV2ERC20 {..."
            function shift_right_0_unsigned(value) -> newValue
            { newValue := shr(0, value) }
            function extract_from_storage_value_offset_0t_uint256(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint256(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_uint256(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_uint256(sload(slot))
            }
            /// @ast-id 447 @src 0:4429:4645  "function _transfer(address from, address to, uint value) private {..."
            function fun__transfer_447(var_from_411, var_to_413, var_value_415)
            {
                /// @src 0:4522:4531  "balanceOf"
                let _26 := 0x01
                let expr_421 := _26
                /// @src 0:4532:4536  "from"
                let _27 := var_from_411
                let expr_422 := _27
                /// @src 0:4522:4537  "balanceOf[from]"
                let _28 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_421, expr_422)
                let _29 := read_from_storage_split_offset_0_t_uint256(_28)
                let expr_423 := _29
                /// @src 0:4522:4541  "balanceOf[from].sub"
                let expr_424_self := expr_423
                /// @src 0:4542:4547  "value"
                let _30 := var_value_415
                let expr_425 := _30
                /// @src 0:4522:4548  "balanceOf[from].sub(value)"
                let expr_426 := fun_sub_97(expr_424_self, expr_425)
                /// @src 0:4504:4513  "balanceOf"
                let _31 := 0x01
                let expr_418 := _31
                /// @src 0:4514:4518  "from"
                let _32 := var_from_411
                let expr_419 := _32
                /// @src 0:4504:4519  "balanceOf[from]"
                let _33 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_418, expr_419)
                /// @src 0:4504:4548  "balanceOf[from] = balanceOf[from].sub(value)"
                update_storage_value_offset_0t_uint256_to_t_uint256(_33, expr_426)
                let expr_427 := expr_426
                /// @src 0:4574:4583  "balanceOf"
                let _34 := 0x01
                let expr_432 := _34
                /// @src 0:4584:4586  "to"
                let _35 := var_to_413
                let expr_433 := _35
                /// @src 0:4574:4587  "balanceOf[to]"
                let _36 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_432, expr_433)
                let _37 := read_from_storage_split_offset_0_t_uint256(_36)
                let expr_434 := _37
                /// @src 0:4574:4591  "balanceOf[to].add"
                let expr_435_self := expr_434
                /// @src 0:4592:4597  "value"
                let _38 := var_value_415
                let expr_436 := _38
                /// @src 0:4574:4598  "balanceOf[to].add(value)"
                let expr_437 := fun_add_75(expr_435_self, expr_436)
                /// @src 0:4558:4567  "balanceOf"
                let _39 := 0x01
                let expr_429 := _39
                /// @src 0:4568:4570  "to"
                let _40 := var_to_413
                let expr_430 := _40
                /// @src 0:4558:4571  "balanceOf[to]"
                let _41 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_429, expr_430)
                /// @src 0:4558:4598  "balanceOf[to] = balanceOf[to].add(value)"
                update_storage_value_offset_0t_uint256_to_t_uint256(_41, expr_437)
                let expr_438 := expr_437
                /// @src 0:4622:4626  "from"
                let _42 := var_from_411
                let expr_441 := _42
                /// @src 0:4628:4630  "to"
                let _43 := var_to_413
                let expr_442 := _43
                /// @src 0:4632:4637  "value"
                let _44 := var_value_415
                let expr_443 := _44
                /// @src 0:4613:4638  "Transfer(from, to, value)"
                let _45 := 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
                let _46 := convert_t_address_to_t_address(expr_441)
                let _47 := convert_t_address_to_t_address(expr_442)
                {
                    let _48 := allocate_unbounded()
                    let _49 := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(_48, expr_443)
                    log3(_48, sub(_49, _48), _45, _46, _47)
                }
            }
            /// @src 0:2694:6273  "contract UniswapV2ERC20 is IUniswapV2ERC20 {..."
            function zero_value_for_split_t_uint256() -> ret
            { ret := 0 }
            function panic_error_0x11()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x11)
                revert(0, 0x24)
            }
            function checked_add_t_uint256(x, y) -> sum
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                sum := add(x, y)
                if gt(x, sum) { panic_error_0x11() }
            }
            function store_literal_in_memory_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db(memPtr)
            {
                mstore(add(memPtr, 0), "ds-math-add-overflow")
            }
            function abi_encode_t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)
                store_literal_in_memory_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @ast-id 75 @src 0:926:1052  "function add(uint x, uint y) internal pure returns (uint z) {..."
            function fun_add_75(var_x_55, var_y_57) -> var_z_60
            {
                /// @src 0:978:984  "uint z"
                let zero_t_uint256_50 := zero_value_for_split_t_uint256()
                var_z_60 := zero_t_uint256_50
                /// @src 0:1009:1010  "x"
                let _51 := var_x_55
                let expr_64 := _51
                /// @src 0:1013:1014  "y"
                let _52 := var_y_57
                let expr_65 := _52
                /// @src 0:1009:1014  "x + y"
                let expr_66 := checked_add_t_uint256(expr_64, expr_65)
                /// @src 0:1005:1014  "z = x + y"
                var_z_60 := expr_66
                let expr_67 := expr_66
                /// @src 0:1004:1015  "(z = x + y)"
                let expr_68 := expr_67
                /// @src 0:1019:1020  "x"
                let _53 := var_x_55
                let expr_69 := _53
                /// @src 0:1004:1020  "(z = x + y) >= x"
                let expr_70 := iszero(lt(cleanup_t_uint256(expr_68), cleanup_t_uint256(expr_69)))
                /// @src 0:996:1045  "require((z = x + y) >= x, \"ds-math-add-overflow\")"
                require_helper_t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db(expr_70)
            }
            /// @src 0:2694:6273  "contract UniswapV2ERC20 is IUniswapV2ERC20 {..."
            function checked_sub_t_uint256(x, y) -> diff
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                diff := sub(x, y)
                if gt(diff, x) { panic_error_0x11() }
            }
            function store_literal_in_memory_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590(memPtr)
            {
                mstore(add(memPtr, 0), "ds-math-sub-underflow")
            }
            function abi_encode_t_stringliteral_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 21)
                store_literal_in_memory_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @ast-id 97 @src 0:1058:1185  "function sub(uint x, uint y) internal pure returns (uint z) {..."
            function fun_sub_97(var_x_77, var_y_79) -> var_z_82
            {
                /// @src 0:1110:1116  "uint z"
                let zero_t_uint256_54 := zero_value_for_split_t_uint256()
                var_z_82 := zero_t_uint256_54
                /// @src 0:1141:1142  "x"
                let _55 := var_x_77
                let expr_86 := _55
                /// @src 0:1145:1146  "y"
                let _56 := var_y_79
                let expr_87 := _56
                /// @src 0:1141:1146  "x - y"
                let expr_88 := checked_sub_t_uint256(expr_86, expr_87)
                /// @src 0:1137:1146  "z = x - y"
                var_z_82 := expr_88
                let expr_89 := expr_88
                /// @src 0:1136:1147  "(z = x - y)"
                let expr_90 := expr_89
                /// @src 0:1151:1152  "x"
                let _57 := var_x_77
                let expr_91 := _57
                /// @src 0:1136:1152  "(z = x - y) <= x"
                let expr_92 := iszero(gt(cleanup_t_uint256(expr_90), cleanup_t_uint256(expr_91)))
                /// @src 0:1128:1178  "require((z = x - y) <= x, \"ds-math-sub-underflow\")"
                require_helper_t_stringliteral_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590(expr_92)
            }
            /// @src 0:2694:6273  "contract UniswapV2ERC20 is IUniswapV2ERC20 {..."
            function cleanup_t_rational_minus_1_by_1(value) -> cleaned
            { cleaned := value }
            function cleanup_t_int256(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_minus_1_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_minus_1_by_1(value)))
            }
            function convert_t_int256_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_int256(value)))
            }
            /// @ast-id 539 @src 0:4943:5303  "function transferFrom(..."
            function fun_transferFrom_539(var_from_487, var_to_489, var_value_491) -> var__494
            {
                /// @src 0:5051:5055  "bool"
                let zero_t_bool_58 := zero_value_for_split_t_bool()
                var__494 := zero_t_bool_58
                /// @src 0:5071:5080  "allowance"
                let _59 := 0x02
                let expr_496 := _59
                /// @src 0:5081:5085  "from"
                let _60 := var_from_487
                let expr_497 := _60
                /// @src 0:5071:5086  "allowance[from]"
                let _61 := mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address(expr_496, expr_497)
                let _62 := _61
                let expr_498 := _62
                /// @src 0:5087:5097  "msg.sender"
                let expr_500 := caller()
                /// @src 0:5071:5098  "allowance[from][msg.sender]"
                let _63 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_498, expr_500)
                let _64 := read_from_storage_split_offset_0_t_uint256(_63)
                let expr_501 := _64
                /// @src 0:5111:5113  "-1"
                let expr_507 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                /// @src 0:5107:5114  "int(-1)"
                let expr_508 := convert_t_rational_minus_1_by_1_to_t_int256(expr_507)
                /// @src 0:5102:5115  "uint(int(-1))"
                let expr_509 := convert_t_int256_to_t_uint256(expr_508)
                /// @src 0:5071:5115  "allowance[from][msg.sender] != uint(int(-1))"
                let expr_510 := iszero(eq(cleanup_t_uint256(expr_501), cleanup_t_uint256(expr_509)))
                /// @src 0:5067:5240  "if (allowance[from][msg.sender] != uint(int(-1))) {..."
                if expr_510
                {
                    /// @src 0:5161:5170  "allowance"
                    let _65 := 0x02
                    let expr_517 := _65
                    /// @src 0:5171:5175  "from"
                    let _66 := var_from_487
                    let expr_518 := _66
                    /// @src 0:5161:5176  "allowance[from]"
                    let _67 := mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address(expr_517, expr_518)
                    let _68 := _67
                    let expr_519 := _68
                    /// @src 0:5177:5187  "msg.sender"
                    let expr_521 := caller()
                    /// @src 0:5161:5188  "allowance[from][msg.sender]"
                    let _69 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_519, expr_521)
                    let _70 := read_from_storage_split_offset_0_t_uint256(_69)
                    let expr_522 := _70
                    /// @src 0:5161:5192  "allowance[from][msg.sender].sub"
                    let expr_523_self := expr_522
                    /// @src 0:5210:5215  "value"
                    let _71 := var_value_491
                    let expr_524 := _71
                    /// @src 0:5161:5229  "allowance[from][msg.sender].sub(..."
                    let expr_525 := fun_sub_97(expr_523_self, expr_524)
                    /// @src 0:5131:5140  "allowance"
                    let _72 := 0x02
                    let expr_511 := _72
                    /// @src 0:5141:5145  "from"
                    let _73 := var_from_487
                    let expr_512 := _73
                    /// @src 0:5131:5146  "allowance[from]"
                    let _74 := mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address(expr_511, expr_512)
                    let _75 := _74
                    let expr_515 := _75
                    /// @src 0:5147:5157  "msg.sender"
                    let expr_514 := caller()
                    /// @src 0:5131:5158  "allowance[from][msg.sender]"
                    let _76 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_515, expr_514)
                    /// @src 0:5131:5229  "allowance[from][msg.sender] = allowance[from][msg.sender].sub(..."
                    update_storage_value_offset_0t_uint256_to_t_uint256(_76, expr_525)
                    let expr_526 := expr_525
                }
                /// @src 0:5259:5263  "from"
                let _77 := var_from_487
                let expr_531 := _77
                /// @src 0:5265:5267  "to"
                let _78 := var_to_489
                let expr_532 := _78
                /// @src 0:5269:5274  "value"
                let _79 := var_value_491
                let expr_533 := _79
                fun__transfer_447(expr_531, expr_532, expr_533)
                /// @src 0:5292:5296  "true"
                let expr_536 := 0x01
                /// @src 0:5285:5296  "return true"
                var__494 := expr_536
                leave
            }
            /// @src 0:2694:6273  "contract UniswapV2ERC20 is IUniswapV2ERC20 {..."
            function store_literal_in_memory_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87(memPtr)
            {
                mstore(add(memPtr, 0), "UniswapV2: EXPIRED")
            }
            function abi_encode_t_stringliteral_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 18)
                store_literal_in_memory_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function extract_from_storage_value_offset_0t_bytes32(slot_value) -> value
            {
                value := cleanup_from_storage_t_bytes32(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_bytes32(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_bytes32(sload(slot))
            }
            function increment_t_uint256(value) -> ret
            {
                value := cleanup_t_uint256(value)
                if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }
                ret := add(value, 1)
            }
            function abi_encode_t_address_to_t_address_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_address(value))
            }
            function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack(headStart, value0, value1, value2, value3, value4, value5) -> tail
            {
                tail := add(headStart, 192)
                abi_encode_t_bytes32_to_t_bytes32_fromStack(value0, add(headStart, 0))
                abi_encode_t_address_to_t_address_fromStack(value1, add(headStart, 32))
                abi_encode_t_address_to_t_address_fromStack(value2, add(headStart, 64))
                abi_encode_t_uint256_to_t_uint256_fromStack(value3, add(headStart, 96))
                abi_encode_t_uint256_to_t_uint256_fromStack(value4, add(headStart, 128))
                abi_encode_t_uint256_to_t_uint256_fromStack(value5, add(headStart, 160))
            }
            function array_dataslot_t_bytes_memory_ptr(ptr) -> data
            {
                data := ptr
                data := add(ptr, 0x20)
            }
            function array_length_t_bytes_memory_ptr(value) -> length
            { length := mload(value) }
            function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos
            { updated_pos := pos }
            function store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541(memPtr)
            {
                mstore(add(memPtr, 0), 0x1901000000000000000000000000000000000000000000000000000000000000)
            }
            function abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 2)
                store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541(pos)
                end := add(pos, 2)
            }
            function leftAlign_t_bytes32(value) -> aligned
            { aligned := value }
            function abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value, pos)
            {
                mstore(pos, leftAlign_t_bytes32(cleanup_t_bytes32(value)))
            }
            function abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack(pos, value0, value1) -> end
            {
                pos := abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos)
                abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value0, pos)
                pos := add(pos, 32)
                abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value1, pos)
                pos := add(pos, 32)
                end := pos
            }
            function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack(headStart, value0, value1, value2, value3) -> tail
            {
                tail := add(headStart, 128)
                abi_encode_t_bytes32_to_t_bytes32_fromStack(value0, add(headStart, 0))
                abi_encode_t_uint8_to_t_uint8_fromStack(value1, add(headStart, 32))
                abi_encode_t_bytes32_to_t_bytes32_fromStack(value2, add(headStart, 64))
                abi_encode_t_bytes32_to_t_bytes32_fromStack(value3, add(headStart, 96))
            }
            function revert_forward_1()
            {
                let pos := allocate_unbounded()
                returndatacopy(pos, 0, returndatasize())
                revert(pos, returndatasize())
            }
            function cleanup_t_rational_0_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_0_by_1_to_t_uint160(value) -> converted
            {
                converted := cleanup_t_uint160(identity(cleanup_t_rational_0_by_1(value)))
            }
            function convert_t_rational_0_by_1_to_t_address(value) -> converted
            {
                converted := convert_t_rational_0_by_1_to_t_uint160(value)
            }
            function store_literal_in_memory_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56(memPtr)
            {
                mstore(add(memPtr, 0), "UniswapV2: INVALID_SIGNATURE")
            }
            function abi_encode_t_stringliteral_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 28)
                store_literal_in_memory_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @ast-id 618 @src 0:5309:6271  "function permit(..."
            function fun_permit_618(var_owner_541, var_spender_543, var_value_545, var_deadline_547, var_v_549, var_r_551, var_s_553)
            {
                /// @src 0:5504:5512  "deadline"
                let _80 := var_deadline_547
                let expr_557 := _80
                /// @src 0:5516:5531  "block.timestamp"
                let expr_559 := timestamp()
                /// @src 0:5504:5531  "deadline >= block.timestamp"
                let expr_560 := iszero(lt(cleanup_t_uint256(expr_557), cleanup_t_uint256(expr_559)))
                /// @src 0:5496:5554  "require(deadline >= block.timestamp, \"UniswapV2: EXPIRED\")"
                require_helper_t_stringliteral_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87(expr_560)
                /// @src 0:5666:5682  "DOMAIN_SEPARATOR"
                let _81 := read_from_storage_split_offset_0_t_bytes32(0x03)
                let expr_570 := _81
                /// @src 0:5767:5782  "PERMIT_TYPEHASH"
                let expr_574 := constant_PERMIT_TYPEHASH_275()
                /// @src 0:5808:5813  "owner"
                let _82 := var_owner_541
                let expr_575 := _82
                /// @src 0:5839:5846  "spender"
                let _83 := var_spender_543
                let expr_576 := _83
                /// @src 0:5872:5877  "value"
                let _84 := var_value_545
                let expr_577 := _84
                /// @src 0:5903:5909  "nonces"
                let _85 := 0x04
                let expr_578 := _85
                /// @src 0:5910:5915  "owner"
                let _86 := var_owner_541
                let expr_579 := _86
                /// @src 0:5903:5916  "nonces[owner]"
                let _87 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_578, expr_579)
                /// @src 0:5903:5918  "nonces[owner]++"
                let _89 := read_from_storage_split_offset_0_t_uint256(_87)
                let _88 := increment_t_uint256(_89)
                update_storage_value_offset_0t_uint256_to_t_uint256(_87, _88)
                let expr_581 := _89
                /// @src 0:5944:5952  "deadline"
                let _90 := var_deadline_547
                let expr_582 := _90
                /// @src 0:5731:5974  "abi.encode(..."
                let expr_583_mpos := allocate_unbounded()
                let _91 := add(expr_583_mpos, 0x20)
                let _92 := abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack(_91, expr_574, expr_575, expr_576, expr_577, expr_581, expr_582)
                mstore(expr_583_mpos, sub(_92, add(expr_583_mpos, 0x20)))
                finalize_allocation(expr_583_mpos, sub(_92, expr_583_mpos))
                /// @src 0:5700:5992  "keccak256(..."
                let expr_584 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_583_mpos), array_length_t_bytes_memory_ptr(expr_583_mpos))
                /// @src 0:5604:6006  "abi.encodePacked(..."
                let expr_585_mpos := allocate_unbounded()
                let _93 := add(expr_585_mpos, 0x20)
                let _94 := abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack(_93, expr_570, expr_584)
                mstore(expr_585_mpos, sub(_94, add(expr_585_mpos, 0x20)))
                finalize_allocation(expr_585_mpos, sub(_94, expr_585_mpos))
                /// @src 0:5581:6016  "keccak256(..."
                let expr_586 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_585_mpos), array_length_t_bytes_memory_ptr(expr_585_mpos))
                /// @src 0:5564:6016  "bytes32 digest = keccak256(..."
                let var_digest_565 := expr_586
                /// @src 0:6063:6069  "digest"
                let _95 := var_digest_565
                let expr_591 := _95
                /// @src 0:6071:6072  "v"
                let _96 := var_v_549
                let expr_592 := _96
                /// @src 0:6074:6075  "r"
                let _97 := var_r_551
                let expr_593 := _97
                /// @src 0:6077:6078  "s"
                let _98 := var_s_553
                let expr_594 := _98
                /// @src 0:6053:6079  "ecrecover(digest, v, r, s)"
                let _99 := allocate_unbounded()
                let _100 := abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack(_99, expr_591, expr_592, expr_593, expr_594)
                mstore(0, 0)
                let _101 := staticcall(gas(), 1, _99, sub(_100, _99), 0, 32)
                if iszero(_101) { revert_forward_1() }
                let expr_595 := shift_left_0(mload(0))
                /// @src 0:6026:6079  "address recoveredAddress = ecrecover(digest, v, r, s)"
                let var_recoveredAddress_589 := expr_595
                /// @src 0:6110:6126  "recoveredAddress"
                let _102 := var_recoveredAddress_589
                let expr_598 := _102
                /// @src 0:6138:6139  "0"
                let expr_601 := 0x00
                /// @src 0:6130:6140  "address(0)"
                let expr_602 := convert_t_rational_0_by_1_to_t_address(expr_601)
                /// @src 0:6110:6140  "recoveredAddress != address(0)"
                let expr_603 := iszero(eq(cleanup_t_address(expr_598), cleanup_t_address(expr_602)))
                /// @src 0:6110:6169  "recoveredAddress != address(0) && recoveredAddress == owner"
                let expr_607 := expr_603
                if expr_607
                {
                    /// @src 0:6144:6160  "recoveredAddress"
                    let _103 := var_recoveredAddress_589
                    let expr_604 := _103
                    /// @src 0:6164:6169  "owner"
                    let _104 := var_owner_541
                    let expr_605 := _104
                    /// @src 0:6144:6169  "recoveredAddress == owner"
                    let expr_606 := eq(cleanup_t_address(expr_604), cleanup_t_address(expr_605))
                    /// @src 0:6110:6169  "recoveredAddress != address(0) && recoveredAddress == owner"
                    expr_607 := expr_606
                }
                /// @src 0:6089:6223  "require(..."
                require_helper_t_stringliteral_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56(expr_607)
                /// @src 0:6242:6247  "owner"
                let _105 := var_owner_541
                let expr_612 := _105
                /// @src 0:6249:6256  "spender"
                let _106 := var_spender_543
                let expr_613 := _106
                /// @src 0:6258:6263  "value"
                let _107 := var_value_545
                let expr_614 := _107
                fun__approve_409(expr_612, expr_613, expr_614)
            }
        }
        data ".metadata" hex"a2646970667358221220c58aff6bcd2a5fb1053e53ccfbd01e1794019430fd89c30a25ffcbc4f596effa64736f6c63430008100033"
    }
}

Optimized IR:
/// @use-src 0:"UniswapV2Factory.sol"
object "UniswapV2Factory_2026" {
    code {
        /// @src 0:20343:22029  "contract UniswapV2Factory is IUniswapV2Factory {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := copy_arguments_for_constructor_1876_object_UniswapV2Factory_2026()
        constructor_UniswapV2Factory_2026(_1)
        let _2 := allocate_unbounded()
        codecopy(_2, dataoffset("UniswapV2Factory_2026_deployed"), datasize("UniswapV2Factory_2026_deployed"))
        return(_2, datasize("UniswapV2Factory_2026_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function round_up_to_mul_of_32(value) -> result
        {
            result := and(add(value, 31), not(31))
        }
        function panic_error_0x41()
        {
            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
            mstore(4, 0x41)
            revert(0, 0x24)
        }
        function finalize_allocation(memPtr, size)
        {
            let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
            if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
            mstore(64, newFreePtr)
        }
        function allocate_memory(size) -> memPtr
        {
            memPtr := allocate_unbounded()
            finalize_allocation(memPtr, size)
        }
        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
        { revert(0, 0) }
        function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
        { revert(0, 0) }
        function cleanup_t_uint160(value) -> cleaned
        {
            cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
        }
        function cleanup_t_address(value) -> cleaned
        {
            cleaned := cleanup_t_uint160(value)
        }
        function validator_revert_t_address(value)
        {
            if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }
        }
        function abi_decode_t_address_fromMemory(offset, end) -> value
        {
            value := mload(offset)
            validator_revert_t_address(value)
        }
        function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0
        {
            if slt(sub(dataEnd, headStart), 32)
            {
                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
            }
            {
                let offset := 0
                value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)
            }
        }
        function copy_arguments_for_constructor_1876_object_UniswapV2Factory_2026() -> ret_param_0
        {
            let programSize := datasize("UniswapV2Factory_2026")
            let argSize := sub(codesize(), programSize)
            let memoryDataOffset := allocate_memory(argSize)
            codecopy(memoryDataOffset, programSize, argSize)
            ret_param_0 := abi_decode_tuple_t_address_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))
        }
        function shift_left_0(value) -> newValue
        { newValue := shl(0, value) }
        function update_byte_slice_20_shift_0(value, toInsert) -> result
        {
            let mask := 0xffffffffffffffffffffffffffffffffffffffff
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function identity(value) -> ret
        { ret := value }
        function convert_t_uint160_to_t_uint160(value) -> converted
        {
            converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
        }
        function convert_t_uint160_to_t_address(value) -> converted
        {
            converted := convert_t_uint160_to_t_uint160(value)
        }
        function convert_t_address_to_t_address(value) -> converted
        {
            converted := convert_t_uint160_to_t_address(value)
        }
        function prepare_store_t_address(value) -> ret
        { ret := value }
        function update_storage_value_offset_0t_address_to_t_address(slot, value_0)
        {
            let convertedValue_0 := convert_t_address_to_t_address(value_0)
            sstore(slot, update_byte_slice_20_shift_0(sload(slot), prepare_store_t_address(convertedValue_0)))
        }
        /// @ast-id 1876 @src 0:20685:20769  "constructor(address _feeToSetter) public {..."
        function constructor_UniswapV2Factory_2026(var__feeToSetter_1868)
        {
            constructor_IUniswapV2Factory_52()
            /// @src 0:20750:20762  "_feeToSetter"
            let _3 := var__feeToSetter_1868
            let expr_1872 := _3
            /// @src 0:20736:20762  "feeToSetter = _feeToSetter"
            update_storage_value_offset_0t_address_to_t_address(0x01, expr_1872)
            let expr_1873 := expr_1872
        }
        /// @src 0:152:717  "interface IUniswapV2Factory {..."
        function constructor_IUniswapV2Factory_52()
        { }
    }
    /// @use-src 0:"UniswapV2Factory.sol"
    object "UniswapV2Factory_2026_deployed" {
        code {
            /// @src 0:20343:22029  "contract UniswapV2Factory is IUniswapV2Factory {..."
            mstore(64, memoryguard(128))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := shift_right_224_unsigned(calldataload(0))
                switch selector
                case 0x017e7e58 { external_fun_feeTo_1845() }
                case 0x094b7415 {
                    external_fun_feeToSetter_1847()
                }
                case 0x1e3dd18b { external_fun_allPairs_1856() }
                case 0x574f2ba3 {
                    external_fun_allPairsLength_1885()
                }
                case 0xa2e74af6 {
                    external_fun_setFeeToSetter_2025()
                }
                case 0xc9c65396 {
                    external_fun_createPair_1989()
                }
                case 0xe6a43905 { external_fun_getPair_1853() }
                case 0xf46901ed { external_fun_setFeeTo_2007() }
                default { }
            }
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
            { revert(0, 0) }
            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
            { revert(0, 0) }
            function abi_decode_tuple_(headStart, dataEnd)
            {
                if slt(sub(dataEnd, headStart), 0)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
            }
            function shift_right_unsigned_dynamic(bits, value) -> newValue
            { newValue := shr(bits, value) }
            function cleanup_from_storage_t_address(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function extract_from_storage_value_dynamict_address(slot_value, offset) -> value
            {
                value := cleanup_from_storage_t_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
            }
            function read_from_storage_split_dynamic_t_address(slot, offset) -> value
            {
                value := extract_from_storage_value_dynamict_address(sload(slot), offset)
            }
            /// @ast-id 1845 @src 0:20396:20416  "address public feeTo"
            function getter_fun_feeTo_1845() -> ret
            {
                let slot := 0
                let offset := 0
                ret := read_from_storage_split_dynamic_t_address(slot, offset)
            }
            /// @src 0:20343:22029  "contract UniswapV2Factory is IUniswapV2Factory {..."
            function cleanup_t_uint160(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function cleanup_t_address(value) -> cleaned
            {
                cleaned := cleanup_t_uint160(value)
            }
            function abi_encode_t_address_to_t_address_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_address(value))
            }
            function abi_encode_tuple_t_address__to_t_address__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_address_to_t_address_fromStack(value0, add(headStart, 0))
            }
            function external_fun_feeTo_1845()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_feeTo_1845()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            /// @ast-id 1847 @src 0:20422:20448  "address public feeToSetter"
            function getter_fun_feeToSetter_1847() -> ret
            {
                let slot := 1
                let offset := 0
                ret := read_from_storage_split_dynamic_t_address(slot, offset)
            }
            /// @src 0:20343:22029  "contract UniswapV2Factory is IUniswapV2Factory {..."
            function external_fun_feeToSetter_1847()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_feeToSetter_1847()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
            { revert(0, 0) }
            function cleanup_t_uint256(value) -> cleaned
            { cleaned := value }
            function validator_revert_t_uint256(value)
            {
                if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }
            }
            function abi_decode_t_uint256(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_uint256(value)
            }
            function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
            }
            function panic_error_0x32()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x32)
                revert(0, 0x24)
            }
            function array_length_t_array$_t_address_$dyn_storage(value) -> length
            { length := sload(value) }
            function array_dataslot_t_array$_t_address_$dyn_storage(ptr) -> data
            {
                data := ptr
                mstore(0, ptr)
                data := keccak256(0, 0x20)
            }
            function array_dataslot_t_bytes_storage_ptr(ptr) -> data
            {
                data := ptr
                mstore(0, ptr)
                data := keccak256(0, 0x20)
            }
            function long_byte_array_index_access_no_checks(array, index) -> slot, offset
            {
                offset := sub(31, mod(index, 0x20))
                let dataArea := array_dataslot_t_bytes_storage_ptr(array)
                slot := add(dataArea, div(index, 0x20))
            }
            function storage_array_index_access_t_array$_t_address_$dyn_storage(array, index) -> slot, offset
            {
                let arrayLength := array_length_t_array$_t_address_$dyn_storage(array)
                if iszero(lt(index, arrayLength)) { panic_error_0x32() }
                let dataArea := array_dataslot_t_array$_t_address_$dyn_storage(array)
                slot := add(dataArea, mul(index, 1))
                offset := 0
            }
            /// @ast-id 1856 @src 0:20523:20548  "address[] public allPairs"
            function getter_fun_allPairs_1856(key_0) -> ret
            {
                let slot := 3
                let offset := 0
                if iszero(lt(key_0, array_length_t_array$_t_address_$dyn_storage(slot))) { revert(0, 0) }
                slot, offset := storage_array_index_access_t_array$_t_address_$dyn_storage(slot, key_0)
                ret := read_from_storage_split_dynamic_t_address(slot, offset)
            }
            /// @src 0:20343:22029  "contract UniswapV2Factory is IUniswapV2Factory {..."
            function external_fun_allPairs_1856()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_uint256(4, calldatasize())
                let ret_0 := getter_fun_allPairs_1856(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_uint256(value))
            }
            function abi_encode_tuple_t_uint256__to_t_uint256__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_uint256_to_t_uint256_fromStack(value0, add(headStart, 0))
            }
            function external_fun_allPairsLength_1885()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := fun_allPairsLength_1885()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function validator_revert_t_address(value)
            {
                if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }
            }
            function abi_decode_t_address(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_address(value)
            }
            function abi_decode_tuple_t_address(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
            }
            function abi_encode_tuple__to__fromStack(headStart) -> tail
            { tail := add(headStart, 0) }
            function external_fun_setFeeToSetter_2025()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                fun_setFeeToSetter_2025(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1
            {
                if slt(sub(dataEnd, headStart), 64)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value1 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
            }
            function external_fun_createPair_1989()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1 := abi_decode_tuple_t_addresst_address(4, calldatasize())
                let ret_0 := fun_createPair_1989(param_0, param_1)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function identity(value) -> ret
            { ret := value }
            function convert_t_uint160_to_t_uint160(value) -> converted
            {
                converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
            }
            function convert_t_uint160_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_uint160(value)
            }
            function convert_t_address_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_address(value)
            }
            function mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_address_$_$_of_t_address(slot, key) -> dataSlot
            {
                mstore(0, convert_t_address_to_t_address(key))
                mstore(0x20, slot)
                dataSlot := keccak256(0, 0x40)
            }
            function mapping_index_access_t_mapping$_t_address_$_t_address_$_of_t_address(slot, key) -> dataSlot
            {
                mstore(0, convert_t_address_to_t_address(key))
                mstore(0x20, slot)
                dataSlot := keccak256(0, 0x40)
            }
            /// @ast-id 1853 @src 0:20455:20517  "mapping(address => mapping(address => address)) public getPair"
            function getter_fun_getPair_1853(key_0, key_1) -> ret
            {
                let slot := 2
                let offset := 0
                slot := mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_address_$_$_of_t_address(slot, key_0)
                slot := mapping_index_access_t_mapping$_t_address_$_t_address_$_of_t_address(slot, key_1)
                ret := read_from_storage_split_dynamic_t_address(slot, offset)
            }
            /// @src 0:20343:22029  "contract UniswapV2Factory is IUniswapV2Factory {..."
            function external_fun_getPair_1853()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1 := abi_decode_tuple_t_addresst_address(4, calldatasize())
                let ret_0 := getter_fun_getPair_1853(param_0, param_1)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_setFeeTo_2007()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                fun_setFeeTo_2007(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
            function zero_value_for_split_t_uint256() -> ret
            { ret := 0 }
            /// @ast-id 1885 @src 0:20775:20864  "function allPairsLength() external returns (uint) {..."
            function fun_allPairsLength_1885() -> var__1879
            {
                /// @src 0:20819:20823  "uint"
                let zero_t_uint256_1 := zero_value_for_split_t_uint256()
                var__1879 := zero_t_uint256_1
                /// @src 0:20842:20850  "allPairs"
                let _2_slot := 0x03
                let expr_1881_slot := _2_slot
                /// @src 0:20842:20857  "allPairs.length"
                let expr_1882 := array_length_t_array$_t_address_$dyn_storage(expr_1881_slot)
                /// @src 0:20835:20857  "return allPairs.length"
                var__1879 := expr_1882
                leave
            }
            /// @src 0:20343:22029  "contract UniswapV2Factory is IUniswapV2Factory {..."
            function zero_value_for_split_t_address() -> ret
            { ret := 0 }
            function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos
            {
                mstore(pos, length)
                updated_pos := add(pos, 0x20)
            }
            function store_literal_in_memory_1af2ec9097b2f8bc2dcfea53a9ab4b2cdab42fa29e9a9e04dcb14b4efcc8aa70(memPtr)
            {
                mstore(add(memPtr, 0), "UniswapV2: IDENTICAL_ADDRESSES")
            }
            function abi_encode_t_stringliteral_1af2ec9097b2f8bc2dcfea53a9ab4b2cdab42fa29e9a9e04dcb14b4efcc8aa70_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 30)
                store_literal_in_memory_1af2ec9097b2f8bc2dcfea53a9ab4b2cdab42fa29e9a9e04dcb14b4efcc8aa70(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_1af2ec9097b2f8bc2dcfea53a9ab4b2cdab42fa29e9a9e04dcb14b4efcc8aa70__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_1af2ec9097b2f8bc2dcfea53a9ab4b2cdab42fa29e9a9e04dcb14b4efcc8aa70_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_1af2ec9097b2f8bc2dcfea53a9ab4b2cdab42fa29e9a9e04dcb14b4efcc8aa70(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_1af2ec9097b2f8bc2dcfea53a9ab4b2cdab42fa29e9a9e04dcb14b4efcc8aa70__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function cleanup_t_rational_0_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_0_by_1_to_t_uint160(value) -> converted
            {
                converted := cleanup_t_uint160(identity(cleanup_t_rational_0_by_1(value)))
            }
            function convert_t_rational_0_by_1_to_t_address(value) -> converted
            {
                converted := convert_t_rational_0_by_1_to_t_uint160(value)
            }
            function store_literal_in_memory_9fd3496d51391106f97d9c12d75d9ef2543a217eeaf4b9c52c6fdbe23f45a5ae(memPtr)
            {
                mstore(add(memPtr, 0), "UniswapV2: ZERO_ADDRESS")
            }
            function abi_encode_t_stringliteral_9fd3496d51391106f97d9c12d75d9ef2543a217eeaf4b9c52c6fdbe23f45a5ae_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)
                store_literal_in_memory_9fd3496d51391106f97d9c12d75d9ef2543a217eeaf4b9c52c6fdbe23f45a5ae(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_9fd3496d51391106f97d9c12d75d9ef2543a217eeaf4b9c52c6fdbe23f45a5ae__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_9fd3496d51391106f97d9c12d75d9ef2543a217eeaf4b9c52c6fdbe23f45a5ae_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_9fd3496d51391106f97d9c12d75d9ef2543a217eeaf4b9c52c6fdbe23f45a5ae(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_9fd3496d51391106f97d9c12d75d9ef2543a217eeaf4b9c52c6fdbe23f45a5ae__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function shift_right_0_unsigned(value) -> newValue
            { newValue := shr(0, value) }
            function extract_from_storage_value_offset_0t_address(slot_value) -> value
            {
                value := cleanup_from_storage_t_address(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_address(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_address(sload(slot))
            }
            function store_literal_in_memory_7597a3317d1f47998beb266ffa8b5f1f9be064321f01552ef08c1fe9eeb777db(memPtr)
            {
                mstore(add(memPtr, 0), "UniswapV2: PAIR_EXISTS")
            }
            function abi_encode_t_stringliteral_7597a3317d1f47998beb266ffa8b5f1f9be064321f01552ef08c1fe9eeb777db_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)
                store_literal_in_memory_7597a3317d1f47998beb266ffa8b5f1f9be064321f01552ef08c1fe9eeb777db(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_7597a3317d1f47998beb266ffa8b5f1f9be064321f01552ef08c1fe9eeb777db__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_7597a3317d1f47998beb266ffa8b5f1f9be064321f01552ef08c1fe9eeb777db_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_7597a3317d1f47998beb266ffa8b5f1f9be064321f01552ef08c1fe9eeb777db(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_7597a3317d1f47998beb266ffa8b5f1f9be064321f01552ef08c1fe9eeb777db__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function panic_error_0x41()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x41)
                revert(0, 0x24)
            }
            function revert_forward_1()
            {
                let pos := allocate_unbounded()
                returndatacopy(pos, 0, returndatasize())
                revert(pos, returndatasize())
            }
            function convert_t_contract$_UniswapV2Pair_$1840_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_address(value)
            }
            function convert_t_uint160_to_t_contract$_IUniswapV2Pair_$946(value) -> converted
            {
                converted := convert_t_uint160_to_t_uint160(value)
            }
            function convert_t_address_to_t_contract$_IUniswapV2Pair_$946(value) -> converted
            {
                converted := convert_t_uint160_to_t_contract$_IUniswapV2Pair_$946(value)
            }
            function convert_t_contract$_IUniswapV2Pair_$946_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_address(value)
            }
            function revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()
            { revert(0, 0) }
            function round_up_to_mul_of_32(value) -> result
            {
                result := and(add(value, 31), not(31))
            }
            function finalize_allocation(memPtr, size)
            {
                let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
                mstore(64, newFreePtr)
            }
            function shift_left_224(value) -> newValue
            { newValue := shl(224, value) }
            function abi_decode_tuple__fromMemory(headStart, dataEnd)
            {
                if slt(sub(dataEnd, headStart), 0)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
            }
            function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack(headStart, value0, value1) -> tail
            {
                tail := add(headStart, 64)
                abi_encode_t_address_to_t_address_fromStack(value0, add(headStart, 0))
                abi_encode_t_address_to_t_address_fromStack(value1, add(headStart, 32))
            }
            function shift_left_0(value) -> newValue
            { newValue := shl(0, value) }
            function update_byte_slice_20_shift_0(value, toInsert) -> result
            {
                let mask := 0xffffffffffffffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function prepare_store_t_address(value) -> ret
            { ret := value }
            function update_storage_value_offset_0t_address_to_t_address(slot, value_0)
            {
                let convertedValue_0 := convert_t_address_to_t_address(value_0)
                sstore(slot, update_byte_slice_20_shift_0(sload(slot), prepare_store_t_address(convertedValue_0)))
            }
            function convert_array_t_array$_t_address_$dyn_storage_to_t_array$_t_address_$dyn_storage_ptr(value) -> converted
            { converted := value }
            function array_dataslot_t_array$_t_address_$dyn_storage_ptr(ptr) -> data
            {
                data := ptr
                mstore(0, ptr)
                data := keccak256(0, 0x20)
            }
            function array_length_t_array$_t_address_$dyn_storage_ptr(value) -> length
            { length := sload(value) }
            function storage_array_index_access_t_array$_t_address_$dyn_storage_ptr(array, index) -> slot, offset
            {
                let arrayLength := array_length_t_array$_t_address_$dyn_storage_ptr(array)
                if iszero(lt(index, arrayLength)) { panic_error_0x32() }
                let dataArea := array_dataslot_t_array$_t_address_$dyn_storage_ptr(array)
                slot := add(dataArea, mul(index, 1))
                offset := 0
            }
            function shift_left_dynamic(bits, value) -> newValue
            { newValue := shl(bits, value) }
            function update_byte_slice_dynamic20(value, shiftBytes, toInsert) -> result
            {
                let shiftBits := mul(shiftBytes, 8)
                let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffff)
                toInsert := shift_left_dynamic(shiftBits, toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function update_storage_value_t_address_to_t_address(slot, offset, value_0)
            {
                let convertedValue_0 := convert_t_address_to_t_address(value_0)
                sstore(slot, update_byte_slice_dynamic20(sload(slot), offset, prepare_store_t_address(convertedValue_0)))
            }
            function array_push_from_t_address_to_t_array$_t_address_$dyn_storage_ptr(array, value0)
            {
                let oldLen := sload(array)
                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }
                sstore(array, add(oldLen, 1))
                let slot, offset := storage_array_index_access_t_array$_t_address_$dyn_storage_ptr(array, oldLen)
                update_storage_value_t_address_to_t_address(slot, offset, value0)
            }
            function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack(headStart, value0, value1) -> tail
            {
                tail := add(headStart, 64)
                abi_encode_t_address_to_t_address_fromStack(value0, add(headStart, 0))
                abi_encode_t_uint256_to_t_uint256_fromStack(value1, add(headStart, 32))
            }
            /// @ast-id 1989 @src 0:20870:21707  "function createPair(..."
            function fun_createPair_1989(var_tokenA_1887, var_tokenB_1889) -> var_pair_1892
            {
                /// @src 0:20962:20974  "address pair"
                let zero_t_address_3 := zero_value_for_split_t_address()
                var_pair_1892 := zero_t_address_3
                /// @src 0:20994:21000  "tokenA"
                let _4 := var_tokenA_1887
                let expr_1895 := _4
                /// @src 0:21004:21010  "tokenB"
                let _5 := var_tokenB_1889
                let expr_1896 := _5
                /// @src 0:20994:21010  "tokenA != tokenB"
                let expr_1897 := iszero(eq(cleanup_t_address(expr_1895), cleanup_t_address(expr_1896)))
                /// @src 0:20986:21045  "require(tokenA != tokenB, \"UniswapV2: IDENTICAL_ADDRESSES\")"
                require_helper_t_stringliteral_1af2ec9097b2f8bc2dcfea53a9ab4b2cdab42fa29e9a9e04dcb14b4efcc8aa70(expr_1897)
                /// @src 0:21090:21096  "tokenA"
                let _6 := var_tokenA_1887
                let expr_1905 := _6
                /// @src 0:21099:21105  "tokenB"
                let _7 := var_tokenB_1889
                let expr_1906 := _7
                /// @src 0:21090:21105  "tokenA < tokenB"
                let expr_1907 := lt(cleanup_t_address(expr_1905), cleanup_t_address(expr_1906))
                /// @src 0:21090:21167  "tokenA < tokenB..."
                let expr_1914_component_1, expr_1914_component_2
                switch expr_1907
                case 0 {
                    /// @src 0:21152:21158  "tokenB"
                    let _8 := var_tokenB_1889
                    let expr_1911 := _8
                    /// @src 0:21151:21167  "(tokenB, tokenA)"
                    let expr_1913_component_1 := expr_1911
                    /// @src 0:21160:21166  "tokenA"
                    let _9 := var_tokenA_1887
                    let expr_1912 := _9
                    /// @src 0:21151:21167  "(tokenB, tokenA)"
                    let expr_1913_component_2 := expr_1912
                    /// @src 0:21090:21167  "tokenA < tokenB..."
                    expr_1914_component_1 := expr_1913_component_1
                    expr_1914_component_2 := expr_1913_component_2
                }
                default {
                    /// @src 0:21121:21127  "tokenA"
                    let _10 := var_tokenA_1887
                    let expr_1908 := _10
                    /// @src 0:21120:21136  "(tokenA, tokenB)"
                    let expr_1910_component_1 := expr_1908
                    /// @src 0:21129:21135  "tokenB"
                    let _11 := var_tokenB_1889
                    let expr_1909 := _11
                    /// @src 0:21120:21136  "(tokenA, tokenB)"
                    let expr_1910_component_2 := expr_1909
                    /// @src 0:21090:21167  "tokenA < tokenB..."
                    expr_1914_component_1 := expr_1910_component_1
                    expr_1914_component_2 := expr_1910_component_2
                }
                /// @src 0:21055:21167  "(address token0, address token1) = tokenA < tokenB..."
                let var_token0_1902 := expr_1914_component_1
                let var_token1_1904 := expr_1914_component_2
                /// @src 0:21185:21191  "token0"
                let _12 := var_token0_1902
                let expr_1917 := _12
                /// @src 0:21203:21204  "0"
                let expr_1920 := 0x00
                /// @src 0:21195:21205  "address(0)"
                let expr_1921 := convert_t_rational_0_by_1_to_t_address(expr_1920)
                /// @src 0:21185:21205  "token0 != address(0)"
                let expr_1922 := iszero(eq(cleanup_t_address(expr_1917), cleanup_t_address(expr_1921)))
                /// @src 0:21177:21233  "require(token0 != address(0), \"UniswapV2: ZERO_ADDRESS\")"
                require_helper_t_stringliteral_9fd3496d51391106f97d9c12d75d9ef2543a217eeaf4b9c52c6fdbe23f45a5ae(expr_1922)
                /// @src 0:21264:21271  "getPair"
                let _13 := 0x02
                let expr_1927 := _13
                /// @src 0:21272:21278  "token0"
                let _14 := var_token0_1902
                let expr_1928 := _14
                /// @src 0:21264:21279  "getPair[token0]"
                let _15 := mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_address_$_$_of_t_address(expr_1927, expr_1928)
                let _16 := _15
                let expr_1929 := _16
                /// @src 0:21280:21286  "token1"
                let _17 := var_token1_1904
                let expr_1930 := _17
                /// @src 0:21264:21287  "getPair[token0][token1]"
                let _18 := mapping_index_access_t_mapping$_t_address_$_t_address_$_of_t_address(expr_1929, expr_1930)
                let _19 := read_from_storage_split_offset_0_t_address(_18)
                let expr_1931 := _19
                /// @src 0:21299:21300  "0"
                let expr_1934 := 0x00
                /// @src 0:21291:21301  "address(0)"
                let expr_1935 := convert_t_rational_0_by_1_to_t_address(expr_1934)
                /// @src 0:21264:21301  "getPair[token0][token1] == address(0)"
                let expr_1936 := eq(cleanup_t_address(expr_1931), cleanup_t_address(expr_1935))
                /// @src 0:21243:21349  "require(..."
                require_helper_t_stringliteral_7597a3317d1f47998beb266ffa8b5f1f9be064321f01552ef08c1fe9eeb777db(expr_1936)
                /// @src 0:21404:21423  "new UniswapV2Pair()"
                let _20 := allocate_unbounded()
                let _21 := add(_20, datasize("UniswapV2Pair_1840"))
                if or(gt(_21, 0xffffffffffffffff), lt(_21, _20)) { panic_error_0x41() }
                datacopy(_20, dataoffset("UniswapV2Pair_1840"), datasize("UniswapV2Pair_1840"))
                _21 := abi_encode_tuple__to__fromStack(_21)
                let expr_1946_address := create(0, _20, sub(_21, _20))
                if iszero(expr_1946_address) { revert_forward_1() }
                /// @src 0:21396:21424  "address(new UniswapV2Pair())"
                let expr_1947 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1946_address)
                /// @src 0:21389:21424  "pair = address(new UniswapV2Pair())"
                var_pair_1892 := expr_1947
                let expr_1948 := expr_1947
                /// @src 0:21449:21453  "pair"
                let _22 := var_pair_1892
                let expr_1951 := _22
                /// @src 0:21434:21454  "IUniswapV2Pair(pair)"
                let expr_1952_address := convert_t_address_to_t_contract$_IUniswapV2Pair_$946(expr_1951)
                /// @src 0:21434:21465  "IUniswapV2Pair(pair).initialize"
                let expr_1953_address := convert_t_contract$_IUniswapV2Pair_$946_to_t_address(expr_1952_address)
                let expr_1953_functionSelector := 0x485cc955
                /// @src 0:21466:21472  "token0"
                let _23 := var_token0_1902
                let expr_1954 := _23
                /// @src 0:21474:21480  "token1"
                let _24 := var_token1_1904
                let expr_1955 := _24
                /// @src 0:21434:21481  "IUniswapV2Pair(pair).initialize(token0, token1)"
                if iszero(extcodesize(expr_1953_address))
                {
                    revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()
                }
                let _25 := allocate_unbounded()
                mstore(_25, shift_left_224(expr_1953_functionSelector))
                let _26 := abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack(add(_25, 4), expr_1954, expr_1955)
                let _27 := call(gas(), expr_1953_address, 0, _25, sub(_26, _25), _25, 0)
                if iszero(_27) { revert_forward_1() }
                if _27
                {
                    let _28 := 0
                    if gt(_28, returndatasize()) { _28 := returndatasize() }
                    finalize_allocation(_25, _28)
                    abi_decode_tuple__fromMemory(_25, add(_25, _28))
                }
                /// @src 0:21517:21521  "pair"
                let _29 := var_pair_1892
                let expr_1963 := _29
                /// @src 0:21491:21498  "getPair"
                let _30 := 0x02
                let expr_1958 := _30
                /// @src 0:21499:21505  "token0"
                let _31 := var_token0_1902
                let expr_1959 := _31
                /// @src 0:21491:21506  "getPair[token0]"
                let _32 := mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_address_$_$_of_t_address(expr_1958, expr_1959)
                let _33 := _32
                let expr_1961 := _33
                /// @src 0:21507:21513  "token1"
                let _34 := var_token1_1904
                let expr_1960 := _34
                /// @src 0:21491:21514  "getPair[token0][token1]"
                let _35 := mapping_index_access_t_mapping$_t_address_$_t_address_$_of_t_address(expr_1961, expr_1960)
                /// @src 0:21491:21521  "getPair[token0][token1] = pair"
                update_storage_value_offset_0t_address_to_t_address(_35, expr_1963)
                let expr_1964 := expr_1963
                /// @src 0:21557:21561  "pair"
                let _36 := var_pair_1892
                let expr_1971 := _36
                /// @src 0:21531:21538  "getPair"
                let _37 := 0x02
                let expr_1966 := _37
                /// @src 0:21539:21545  "token1"
                let _38 := var_token1_1904
                let expr_1967 := _38
                /// @src 0:21531:21546  "getPair[token1]"
                let _39 := mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_address_$_$_of_t_address(expr_1966, expr_1967)
                let _40 := _39
                let expr_1969 := _40
                /// @src 0:21547:21553  "token0"
                let _41 := var_token0_1902
                let expr_1968 := _41
                /// @src 0:21531:21554  "getPair[token1][token0]"
                let _42 := mapping_index_access_t_mapping$_t_address_$_t_address_$_of_t_address(expr_1969, expr_1968)
                /// @src 0:21531:21561  "getPair[token1][token0] = pair"
                update_storage_value_offset_0t_address_to_t_address(_42, expr_1971)
                let expr_1972 := expr_1971
                /// @src 0:21616:21624  "allPairs"
                let _43_slot := 0x03
                let expr_1974_slot := _43_slot
                /// @src 0:21616:21629  "allPairs.push"
                let expr_1976_self_slot := convert_array_t_array$_t_address_$dyn_storage_to_t_array$_t_address_$dyn_storage_ptr(expr_1974_slot)
                /// @src 0:21630:21634  "pair"
                let _44 := var_pair_1892
                let expr_1977 := _44
                /// @src 0:21616:21635  "allPairs.push(pair)"
                array_push_from_t_address_to_t_array$_t_address_$dyn_storage_ptr(expr_1976_self_slot, expr_1977)
                /// @src 0:21662:21668  "token0"
                let _45 := var_token0_1902
                let expr_1981 := _45
                /// @src 0:21670:21676  "token1"
                let _46 := var_token1_1904
                let expr_1982 := _46
                /// @src 0:21678:21682  "pair"
                let _47 := var_pair_1892
                let expr_1983 := _47
                /// @src 0:21684:21692  "allPairs"
                let _48_slot := 0x03
                let expr_1984_slot := _48_slot
                /// @src 0:21684:21699  "allPairs.length"
                let expr_1985 := array_length_t_array$_t_address_$dyn_storage(expr_1984_slot)
                /// @src 0:21650:21700  "PairCreated(token0, token1, pair, allPairs.length)"
                let _49 := 0x0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9
                let _50 := convert_t_address_to_t_address(expr_1981)
                let _51 := convert_t_address_to_t_address(expr_1982)
                {
                    let _52 := allocate_unbounded()
                    let _53 := abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack(_52, expr_1983, expr_1985)
                    log3(_52, sub(_53, _52), _49, _50, _51)
                }
            }
            /// @src 0:20343:22029  "contract UniswapV2Factory is IUniswapV2Factory {..."
            function store_literal_in_memory_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37(memPtr)
            {
                mstore(add(memPtr, 0), "UniswapV2: FORBIDDEN")
            }
            function abi_encode_t_stringliteral_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)
                store_literal_in_memory_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @ast-id 2007 @src 0:21713:21855  "function setFeeTo(address _feeTo) external {..."
            function fun_setFeeTo_2007(var__feeTo_1991)
            {
                /// @src 0:21774:21784  "msg.sender"
                let expr_1996 := caller()
                /// @src 0:21788:21799  "feeToSetter"
                let _54 := read_from_storage_split_offset_0_t_address(0x01)
                let expr_1997 := _54
                /// @src 0:21774:21799  "msg.sender == feeToSetter"
                let expr_1998 := eq(cleanup_t_address(expr_1996), cleanup_t_address(expr_1997))
                /// @src 0:21766:21824  "require(msg.sender == feeToSetter, \"UniswapV2: FORBIDDEN\")"
                require_helper_t_stringliteral_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37(expr_1998)
                /// @src 0:21842:21848  "_feeTo"
                let _55 := var__feeTo_1991
                let expr_2003 := _55
                /// @src 0:21834:21848  "feeTo = _feeTo"
                update_storage_value_offset_0t_address_to_t_address(0x00, expr_2003)
                let expr_2004 := expr_2003
            }
            /// @ast-id 2025 @src 0:21861:22027  "function setFeeToSetter(address _feeToSetter) external {..."
            function fun_setFeeToSetter_2025(var__feeToSetter_2009)
            {
                /// @src 0:21934:21944  "msg.sender"
                let expr_2014 := caller()
                /// @src 0:21948:21959  "feeToSetter"
                let _56 := read_from_storage_split_offset_0_t_address(0x01)
                let expr_2015 := _56
                /// @src 0:21934:21959  "msg.sender == feeToSetter"
                let expr_2016 := eq(cleanup_t_address(expr_2014), cleanup_t_address(expr_2015))
                /// @src 0:21926:21984  "require(msg.sender == feeToSetter, \"UniswapV2: FORBIDDEN\")"
                require_helper_t_stringliteral_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37(expr_2016)
                /// @src 0:22008:22020  "_feeToSetter"
                let _57 := var__feeToSetter_2009
                let expr_2021 := _57
                /// @src 0:21994:22020  "feeToSetter = _feeToSetter"
                update_storage_value_offset_0t_address_to_t_address(0x01, expr_2021)
                let expr_2022 := expr_2021
            }
        }
        /// @use-src 0:"UniswapV2Factory.sol"
        object "UniswapV2Pair_1840" {
            code {
                /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                mstore(64, memoryguard(128))
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                constructor_UniswapV2Pair_1840()
                let _1 := allocate_unbounded()
                codecopy(_1, dataoffset("UniswapV2Pair_1840_deployed"), datasize("UniswapV2Pair_1840_deployed"))
                return(_1, datasize("UniswapV2Pair_1840_deployed"))
                function allocate_unbounded() -> memPtr
                { memPtr := mload(64) }
                function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                { revert(0, 0) }
                function shift_left_0(value) -> newValue
                { newValue := shl(0, value) }
                function update_byte_slice_32_shift_0(value, toInsert) -> result
                {
                    let mask := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                    toInsert := shift_left_0(toInsert)
                    value := and(value, not(mask))
                    result := or(value, and(toInsert, mask))
                }
                function cleanup_t_rational_1_by_1(value) -> cleaned
                { cleaned := value }
                function cleanup_t_uint256(value) -> cleaned
                { cleaned := value }
                function identity(value) -> ret
                { ret := value }
                function convert_t_rational_1_by_1_to_t_uint256(value) -> converted
                {
                    converted := cleanup_t_uint256(identity(cleanup_t_rational_1_by_1(value)))
                }
                function prepare_store_t_uint256(value) -> ret
                { ret := value }
                function update_storage_value_offset_0t_rational_1_by_1_to_t_uint256(slot, value_0)
                {
                    let convertedValue_0 := convert_t_rational_1_by_1_to_t_uint256(value_0)
                    sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_uint256(convertedValue_0)))
                }
                function update_byte_slice_20_shift_0(value, toInsert) -> result
                {
                    let mask := 0xffffffffffffffffffffffffffffffffffffffff
                    toInsert := shift_left_0(toInsert)
                    value := and(value, not(mask))
                    result := or(value, and(toInsert, mask))
                }
                function cleanup_t_uint160(value) -> cleaned
                {
                    cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
                }
                function convert_t_uint160_to_t_uint160(value) -> converted
                {
                    converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
                }
                function convert_t_uint160_to_t_address(value) -> converted
                {
                    converted := convert_t_uint160_to_t_uint160(value)
                }
                function convert_t_address_to_t_address(value) -> converted
                {
                    converted := convert_t_uint160_to_t_address(value)
                }
                function prepare_store_t_address(value) -> ret
                { ret := value }
                function update_storage_value_offset_0t_address_to_t_address(slot, value_0)
                {
                    let convertedValue_0 := convert_t_address_to_t_address(value_0)
                    sstore(slot, update_byte_slice_20_shift_0(sload(slot), prepare_store_t_address(convertedValue_0)))
                }
                /// @ast-id 1075 @src 0:11635:11693  "constructor() public {..."
                function constructor_UniswapV2Pair_1840()
                {
                    constructor_UniswapV2ERC20_619()
                    /// @src 0:11071:11072  "1"
                    let expr_1006 := 0x01
                    update_storage_value_offset_0t_rational_1_by_1_to_t_uint256(0x0c, expr_1006)
                    /// @src 0:11676:11686  "msg.sender"
                    let expr_1071 := caller()
                    /// @src 0:11666:11686  "factory = msg.sender"
                    update_storage_value_offset_0t_address_to_t_address(0x05, expr_1071)
                    let expr_1072 := expr_1071
                }
                /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                function zero_value_for_split_t_uint256() -> ret
                { ret := 0 }
                function round_up_to_mul_of_32(value) -> result
                {
                    result := and(add(value, 31), not(31))
                }
                function panic_error_0x41()
                {
                    mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                    mstore(4, 0x41)
                    revert(0, 0x24)
                }
                function finalize_allocation(memPtr, size)
                {
                    let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
                    if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
                    mstore(64, newFreePtr)
                }
                function allocate_memory(size) -> memPtr
                {
                    memPtr := allocate_unbounded()
                    finalize_allocation(memPtr, size)
                }
                function array_allocation_size_t_string_memory_ptr(length) -> size
                {
                    if gt(length, 0xffffffffffffffff) { panic_error_0x41() }
                    size := round_up_to_mul_of_32(length)
                    size := add(size, 0x20)
                }
                function allocate_memory_array_t_string_memory_ptr(length) -> memPtr
                {
                    let allocSize := array_allocation_size_t_string_memory_ptr(length)
                    memPtr := allocate_memory(allocSize)
                    mstore(memPtr, length)
                }
                function store_literal_in_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738(memPtr)
                {
                    mstore(add(memPtr, 0), "Uniswap V2")
                }
                function copy_literal_to_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738() -> memPtr
                {
                    memPtr := allocate_memory_array_t_string_memory_ptr(10)
                    store_literal_in_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738(add(memPtr, 32))
                }
                function convert_t_stringliteral_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738_to_t_string_memory_ptr() -> converted
                {
                    converted := copy_literal_to_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738()
                }
                /// @src 0:2773:2815  "string public constant name = \"Uniswap V2\""
                function constant_name_252() -> ret_mpos
                {
                    /// @src 0:2803:2815  "\"Uniswap V2\""
                    let _3_mpos := convert_t_stringliteral_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738_to_t_string_memory_ptr()
                    ret_mpos := _3_mpos
                }
                function convert_array_t_string_memory_ptr_to_t_bytes_memory_ptr(value) -> converted
                { converted := value }
                function array_dataslot_t_bytes_memory_ptr(ptr) -> data
                {
                    data := ptr
                    data := add(ptr, 0x20)
                }
                function array_length_t_bytes_memory_ptr(value) -> length
                { length := mload(value) }
                function store_literal_in_memory_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6(memPtr)
                { mstore(add(memPtr, 0), "1") }
                function copy_literal_to_memory_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6() -> memPtr
                {
                    memPtr := allocate_memory_array_t_string_memory_ptr(1)
                    store_literal_in_memory_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6(add(memPtr, 32))
                }
                function convert_t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6_to_t_bytes_memory_ptr() -> converted
                {
                    converted := copy_literal_to_memory_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6()
                }
                function convert_t_contract$_UniswapV2ERC20_$619_to_t_address(value) -> converted
                {
                    converted := convert_t_uint160_to_t_address(value)
                }
                function cleanup_t_bytes32(value) -> cleaned
                { cleaned := value }
                function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos)
                {
                    mstore(pos, cleanup_t_bytes32(value))
                }
                function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos)
                {
                    mstore(pos, cleanup_t_uint256(value))
                }
                function cleanup_t_address(value) -> cleaned
                {
                    cleaned := cleanup_t_uint160(value)
                }
                function abi_encode_t_address_to_t_address_fromStack(value, pos)
                {
                    mstore(pos, cleanup_t_address(value))
                }
                function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack(headStart, value0, value1, value2, value3, value4) -> tail
                {
                    tail := add(headStart, 160)
                    abi_encode_t_bytes32_to_t_bytes32_fromStack(value0, add(headStart, 0))
                    abi_encode_t_bytes32_to_t_bytes32_fromStack(value1, add(headStart, 32))
                    abi_encode_t_bytes32_to_t_bytes32_fromStack(value2, add(headStart, 64))
                    abi_encode_t_uint256_to_t_uint256_fromStack(value3, add(headStart, 96))
                    abi_encode_t_address_to_t_address_fromStack(value4, add(headStart, 128))
                }
                function convert_t_bytes32_to_t_bytes32(value) -> converted
                {
                    converted := cleanup_t_bytes32(value)
                }
                function shift_right_0_unsigned(value) -> newValue
                { newValue := shr(0, value) }
                function prepare_store_t_bytes32(value) -> ret
                {
                    ret := shift_right_0_unsigned(value)
                }
                function update_storage_value_offset_0t_bytes32_to_t_bytes32(slot, value_0)
                {
                    let convertedValue_0 := convert_t_bytes32_to_t_bytes32(value_0)
                    sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_bytes32(convertedValue_0)))
                }
                /// @ast-id 315 @src 0:3360:3837  "constructor() {..."
                function constructor_UniswapV2ERC20_619()
                {
                    constructor_IUniswapV2ERC20_243()
                    /// @src 0:3384:3396  "uint chainId"
                    let var_chainId_283
                    let zero_t_uint256_2 := zero_value_for_split_t_uint256()
                    var_chainId_283 := zero_t_uint256_2
                    /// @src 0:3406:3459  "assembly {..."
                    { var_chainId_283 := chainid() }
                    /// @src 0:3538:3671  "keccak256(..."
                    let expr_292 := 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f
                    /// @src 0:3705:3709  "name"
                    let expr_296_mpos := constant_name_252()
                    /// @src 0:3699:3710  "bytes(name)"
                    let expr_297_mpos := convert_array_t_string_memory_ptr_to_t_bytes_memory_ptr(expr_296_mpos)
                    /// @src 0:3689:3711  "keccak256(bytes(name))"
                    let expr_298 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_297_mpos), array_length_t_bytes_memory_ptr(expr_297_mpos))
                    /// @src 0:3739:3749  "bytes(\"1\")"
                    let expr_303_mpos := convert_t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6_to_t_bytes_memory_ptr()
                    /// @src 0:3729:3750  "keccak256(bytes(\"1\"))"
                    let expr_304 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_303_mpos), array_length_t_bytes_memory_ptr(expr_303_mpos))
                    /// @src 0:3768:3775  "chainId"
                    let _4 := var_chainId_283
                    let expr_305 := _4
                    /// @src 0:3801:3805  "this"
                    let expr_308_address := address()
                    /// @src 0:3793:3806  "address(this)"
                    let expr_309 := convert_t_contract$_UniswapV2ERC20_$619_to_t_address(expr_308_address)
                    /// @src 0:3510:3820  "abi.encode(..."
                    let expr_310_mpos := allocate_unbounded()
                    let _5 := add(expr_310_mpos, 0x20)
                    let _6 := abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack(_5, expr_292, expr_298, expr_304, expr_305, expr_309)
                    mstore(expr_310_mpos, sub(_6, add(expr_310_mpos, 0x20)))
                    finalize_allocation(expr_310_mpos, sub(_6, expr_310_mpos))
                    /// @src 0:3487:3830  "keccak256(..."
                    let expr_311 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_310_mpos), array_length_t_bytes_memory_ptr(expr_310_mpos))
                    /// @src 0:3468:3830  "DOMAIN_SEPARATOR = keccak256(..."
                    update_storage_value_offset_0t_bytes32_to_t_bytes32(0x03, expr_311)
                    let expr_312 := expr_311
                }
                /// @src 0:1421:2618  "interface IUniswapV2ERC20 {..."
                function constructor_IUniswapV2ERC20_243()
                {
                    constructor_IUniswapV2Pair_946()
                }
                /// @src 0:8527:9899  "interface IUniswapV2Pair {..."
                function constructor_IUniswapV2Pair_946()
                { }
            }
            /// @use-src 0:"UniswapV2Factory.sol"
            object "UniswapV2Pair_1840_deployed" {
                code {
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    mstore(64, memoryguard(128))
                    if iszero(lt(calldatasize(), 4))
                    {
                        let selector := shift_right_224_unsigned(calldataload(0))
                        switch selector
                        case 0x022c0d9f { external_fun_swap_1760() }
                        case 0x06fdde03 { external_fun_name_252() }
                        case 0x0902f1ac {
                            external_fun_getReserves_1048()
                        }
                        case 0x095ea7b3 { external_fun_approve_466() }
                        case 0x0dfe1681 { external_fun_token0_990() }
                        case 0x18160ddd {
                            external_fun_totalSupply_260()
                        }
                        case 0x23b872dd {
                            external_fun_transferFrom_539()
                        }
                        case 0x30adf81f {
                            external_fun_PERMIT_TYPEHASH_275()
                        }
                        case 0x313ce567 { external_fun_decimals_258() }
                        case 0x3644e515 {
                            external_fun_DOMAIN_SEPARATOR_272()
                        }
                        case 0x485cc955 {
                            external_fun_initialize_1099()
                        }
                        case 0x5909c0d5 {
                            external_fun_price0CumulativeLast_1000()
                        }
                        case 0x5a3d5493 {
                            external_fun_price1CumulativeLast_1002()
                        }
                        case 0x6a627842 { external_fun_mint_1352() }
                        case 0x70a08231 { external_fun_balanceOf_264() }
                        case 0x7464fc3d { external_fun_kLast_1004() }
                        case 0x7ecebe00 { external_fun_nonces_279() }
                        case 0x89afcb44 { external_fun_burn_1523() }
                        case 0x95d89b41 { external_fun_symbol_255() }
                        case 0xa9059cbb { external_fun_transfer_485() }
                        case 0xb518a776 { external_fun_tmp_1332() }
                        case 0xba9a7a56 {
                            external_fun_MINIMUM_LIQUIDITY_975()
                        }
                        case 0xbc25cf77 { external_fun_skim_1810() }
                        case 0xc45a0155 { external_fun_factory_988() }
                        case 0xd21220a7 { external_fun_token1_992() }
                        case 0xd505accf { external_fun_permit_618() }
                        case 0xdd62ed3e { external_fun_allowance_270() }
                        case 0xfff6cae9 { external_fun_sync_1839() }
                        default { }
                    }
                    revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
                    function shift_right_224_unsigned(value) -> newValue
                    { newValue := shr(224, value) }
                    function allocate_unbounded() -> memPtr
                    { memPtr := mload(64) }
                    function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                    { revert(0, 0) }
                    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                    { revert(0, 0) }
                    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
                    { revert(0, 0) }
                    function cleanup_t_uint256(value) -> cleaned
                    { cleaned := value }
                    function validator_revert_t_uint256(value)
                    {
                        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }
                    }
                    function abi_decode_t_uint256(offset, end) -> value
                    {
                        value := calldataload(offset)
                        validator_revert_t_uint256(value)
                    }
                    function cleanup_t_uint160(value) -> cleaned
                    {
                        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
                    }
                    function cleanup_t_address(value) -> cleaned
                    {
                        cleaned := cleanup_t_uint160(value)
                    }
                    function validator_revert_t_address(value)
                    {
                        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }
                    }
                    function abi_decode_t_address(offset, end) -> value
                    {
                        value := calldataload(offset)
                        validator_revert_t_address(value)
                    }
                    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()
                    { revert(0, 0) }
                    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490()
                    { revert(0, 0) }
                    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()
                    { revert(0, 0) }
                    function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length
                    {
                        if iszero(slt(add(offset, 0x1f), end))
                        {
                            revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()
                        }
                        length := calldataload(offset)
                        if gt(length, 0xffffffffffffffff)
                        {
                            revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490()
                        }
                        arrayPos := add(offset, 0x20)
                        if gt(add(arrayPos, mul(length, 0x01)), end)
                        {
                            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()
                        }
                    }
                    function abi_decode_tuple_t_uint256t_uint256t_addresst_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4
                    {
                        if slt(sub(dataEnd, headStart), 128)
                        {
                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                        }
                        {
                            let offset := 0
                            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                        }
                        {
                            let offset := 32
                            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                        }
                        {
                            let offset := 64
                            value2 := abi_decode_t_address(add(headStart, offset), dataEnd)
                        }
                        {
                            let offset := calldataload(add(headStart, 96))
                            if gt(offset, 0xffffffffffffffff)
                            {
                                revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
                            }
                            value3, value4 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)
                        }
                    }
                    function abi_encode_tuple__to__fromStack(headStart) -> tail
                    { tail := add(headStart, 0) }
                    function external_fun_swap_1760()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        let param_0, param_1, param_2, param_3, param_4 := abi_decode_tuple_t_uint256t_uint256t_addresst_bytes_calldata_ptr(4, calldatasize())
                        fun_swap_1760(param_0, param_1, param_2, param_3, param_4)
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple__to__fromStack(memPos)
                        return(memPos, sub(memEnd, memPos))
                    }
                    function abi_decode_tuple_(headStart, dataEnd)
                    {
                        if slt(sub(dataEnd, headStart), 0)
                        {
                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                        }
                    }
                    function round_up_to_mul_of_32(value) -> result
                    {
                        result := and(add(value, 31), not(31))
                    }
                    function panic_error_0x41()
                    {
                        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                        mstore(4, 0x41)
                        revert(0, 0x24)
                    }
                    function finalize_allocation(memPtr, size)
                    {
                        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
                        mstore(64, newFreePtr)
                    }
                    function allocate_memory(size) -> memPtr
                    {
                        memPtr := allocate_unbounded()
                        finalize_allocation(memPtr, size)
                    }
                    function array_allocation_size_t_string_memory_ptr(length) -> size
                    {
                        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }
                        size := round_up_to_mul_of_32(length)
                        size := add(size, 0x20)
                    }
                    function allocate_memory_array_t_string_memory_ptr(length) -> memPtr
                    {
                        let allocSize := array_allocation_size_t_string_memory_ptr(length)
                        memPtr := allocate_memory(allocSize)
                        mstore(memPtr, length)
                    }
                    function store_literal_in_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738(memPtr)
                    {
                        mstore(add(memPtr, 0), "Uniswap V2")
                    }
                    function copy_literal_to_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738() -> memPtr
                    {
                        memPtr := allocate_memory_array_t_string_memory_ptr(10)
                        store_literal_in_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738(add(memPtr, 32))
                    }
                    function convert_t_stringliteral_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738_to_t_string_memory_ptr() -> converted
                    {
                        converted := copy_literal_to_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738()
                    }
                    /// @src 0:2773:2815  "string public constant name = \"Uniswap V2\""
                    function constant_name_252() -> ret_mpos
                    {
                        /// @src 0:2803:2815  "\"Uniswap V2\""
                        let _1_mpos := convert_t_stringliteral_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738_to_t_string_memory_ptr()
                        ret_mpos := _1_mpos
                    }
                    /// @ast-id 252 @src 0:2773:2815  "string public constant name = \"Uniswap V2\""
                    function getter_fun_name_252() -> ret_0
                    { ret_0 := constant_name_252() }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function array_length_t_string_memory_ptr(value) -> length
                    { length := mload(value) }
                    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos
                    {
                        mstore(pos, length)
                        updated_pos := add(pos, 0x20)
                    }
                    function copy_memory_to_memory_with_cleanup(src, dst, length)
                    {
                        let i := 0
                        for { } lt(i, length) { i := add(i, 32) }
                        {
                            mstore(add(dst, i), mload(add(src, i)))
                        }
                        mstore(add(dst, length), 0)
                    }
                    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end
                    {
                        let length := array_length_t_string_memory_ptr(value)
                        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)
                        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)
                        end := add(pos, round_up_to_mul_of_32(length))
                    }
                    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(headStart, value0) -> tail
                    {
                        tail := add(headStart, 32)
                        mstore(add(headStart, 0), sub(tail, headStart))
                        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0, tail)
                    }
                    function external_fun_name_252()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        abi_decode_tuple_(4, calldatasize())
                        let ret_0 := getter_fun_name_252()
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(memPos, ret_0)
                        return(memPos, sub(memEnd, memPos))
                    }
                    function cleanup_t_uint112(value) -> cleaned
                    {
                        cleaned := and(value, 0xffffffffffffffffffffffffffff)
                    }
                    function abi_encode_t_uint112_to_t_uint112_fromStack(value, pos)
                    {
                        mstore(pos, cleanup_t_uint112(value))
                    }
                    function cleanup_t_uint32(value) -> cleaned
                    {
                        cleaned := and(value, 0xffffffff)
                    }
                    function abi_encode_t_uint32_to_t_uint32_fromStack(value, pos)
                    {
                        mstore(pos, cleanup_t_uint32(value))
                    }
                    function abi_encode_tuple_t_uint112_t_uint112_t_uint32__to_t_uint112_t_uint112_t_uint32__fromStack(headStart, value0, value1, value2) -> tail
                    {
                        tail := add(headStart, 96)
                        abi_encode_t_uint112_to_t_uint112_fromStack(value0, add(headStart, 0))
                        abi_encode_t_uint112_to_t_uint112_fromStack(value1, add(headStart, 32))
                        abi_encode_t_uint32_to_t_uint32_fromStack(value2, add(headStart, 64))
                    }
                    function external_fun_getReserves_1048()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        abi_decode_tuple_(4, calldatasize())
                        let ret_0, ret_1, ret_2 := fun_getReserves_1048()
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple_t_uint112_t_uint112_t_uint32__to_t_uint112_t_uint112_t_uint32__fromStack(memPos, ret_0, ret_1, ret_2)
                        return(memPos, sub(memEnd, memPos))
                    }
                    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1
                    {
                        if slt(sub(dataEnd, headStart), 64)
                        {
                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                        }
                        {
                            let offset := 0
                            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                        }
                        {
                            let offset := 32
                            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                        }
                    }
                    function cleanup_t_bool(value) -> cleaned
                    {
                        cleaned := iszero(iszero(value))
                    }
                    function abi_encode_t_bool_to_t_bool_fromStack(value, pos)
                    {
                        mstore(pos, cleanup_t_bool(value))
                    }
                    function abi_encode_tuple_t_bool__to_t_bool__fromStack(headStart, value0) -> tail
                    {
                        tail := add(headStart, 32)
                        abi_encode_t_bool_to_t_bool_fromStack(value0, add(headStart, 0))
                    }
                    function external_fun_approve_466()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        let param_0, param_1 := abi_decode_tuple_t_addresst_uint256(4, calldatasize())
                        let ret_0 := fun_approve_466(param_0, param_1)
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos, ret_0)
                        return(memPos, sub(memEnd, memPos))
                    }
                    function shift_right_unsigned_dynamic(bits, value) -> newValue
                    { newValue := shr(bits, value) }
                    function cleanup_from_storage_t_address(value) -> cleaned
                    {
                        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
                    }
                    function extract_from_storage_value_dynamict_address(slot_value, offset) -> value
                    {
                        value := cleanup_from_storage_t_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
                    }
                    function read_from_storage_split_dynamic_t_address(slot, offset) -> value
                    {
                        value := extract_from_storage_value_dynamict_address(sload(slot), offset)
                    }
                    /// @ast-id 990 @src 0:10544:10565  "address public token0"
                    function getter_fun_token0_990() -> ret
                    {
                        let slot := 6
                        let offset := 0
                        ret := read_from_storage_split_dynamic_t_address(slot, offset)
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function abi_encode_t_address_to_t_address_fromStack(value, pos)
                    {
                        mstore(pos, cleanup_t_address(value))
                    }
                    function abi_encode_tuple_t_address__to_t_address__fromStack(headStart, value0) -> tail
                    {
                        tail := add(headStart, 32)
                        abi_encode_t_address_to_t_address_fromStack(value0, add(headStart, 0))
                    }
                    function external_fun_token0_990()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        abi_decode_tuple_(4, calldatasize())
                        let ret_0 := getter_fun_token0_990()
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos, ret_0)
                        return(memPos, sub(memEnd, memPos))
                    }
                    function cleanup_from_storage_t_uint256(value) -> cleaned
                    { cleaned := value }
                    function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value
                    {
                        value := cleanup_from_storage_t_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
                    }
                    function read_from_storage_split_dynamic_t_uint256(slot, offset) -> value
                    {
                        value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)
                    }
                    /// @ast-id 260 @src 0:2908:2931  "uint public totalSupply"
                    function getter_fun_totalSupply_260() -> ret
                    {
                        let slot := 0
                        let offset := 0
                        ret := read_from_storage_split_dynamic_t_uint256(slot, offset)
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos)
                    {
                        mstore(pos, cleanup_t_uint256(value))
                    }
                    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack(headStart, value0) -> tail
                    {
                        tail := add(headStart, 32)
                        abi_encode_t_uint256_to_t_uint256_fromStack(value0, add(headStart, 0))
                    }
                    function external_fun_totalSupply_260()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        abi_decode_tuple_(4, calldatasize())
                        let ret_0 := getter_fun_totalSupply_260()
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                        return(memPos, sub(memEnd, memPos))
                    }
                    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2
                    {
                        if slt(sub(dataEnd, headStart), 96)
                        {
                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                        }
                        {
                            let offset := 0
                            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                        }
                        {
                            let offset := 32
                            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)
                        }
                        {
                            let offset := 64
                            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                        }
                    }
                    function external_fun_transferFrom_539()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        let param_0, param_1, param_2 := abi_decode_tuple_t_addresst_addresst_uint256(4, calldatasize())
                        let ret_0 := fun_transferFrom_539(param_0, param_1, param_2)
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos, ret_0)
                        return(memPos, sub(memEnd, memPos))
                    }
                    function cleanup_t_rational_49955707469362902507454157297736832118868343942642399513960811609542965143241_by_1(value) -> cleaned
                    { cleaned := value }
                    function cleanup_t_bytes32(value) -> cleaned
                    { cleaned := value }
                    function shift_left_0(value) -> newValue
                    { newValue := shl(0, value) }
                    function convert_t_rational_49955707469362902507454157297736832118868343942642399513960811609542965143241_by_1_to_t_bytes32(value) -> converted
                    {
                        converted := cleanup_t_bytes32(shift_left_0(cleanup_t_rational_49955707469362902507454157297736832118868343942642399513960811609542965143241_by_1(value)))
                    }
                    /// @src 0:3193:3309  "bytes32 public constant PERMIT_TYPEHASH =..."
                    function constant_PERMIT_TYPEHASH_275() -> ret
                    {
                        /// @src 0:3243:3309  "0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9"
                        let expr_274 := 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9
                        let _2 := convert_t_rational_49955707469362902507454157297736832118868343942642399513960811609542965143241_by_1_to_t_bytes32(expr_274)
                        ret := _2
                    }
                    /// @ast-id 275 @src 0:3193:3309  "bytes32 public constant PERMIT_TYPEHASH =..."
                    function getter_fun_PERMIT_TYPEHASH_275() -> ret_0
                    {
                        ret_0 := constant_PERMIT_TYPEHASH_275()
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos)
                    {
                        mstore(pos, cleanup_t_bytes32(value))
                    }
                    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack(headStart, value0) -> tail
                    {
                        tail := add(headStart, 32)
                        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0, add(headStart, 0))
                    }
                    function external_fun_PERMIT_TYPEHASH_275()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        abi_decode_tuple_(4, calldatasize())
                        let ret_0 := getter_fun_PERMIT_TYPEHASH_275()
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack(memPos, ret_0)
                        return(memPos, sub(memEnd, memPos))
                    }
                    function cleanup_t_rational_18_by_1(value) -> cleaned
                    { cleaned := value }
                    function cleanup_t_uint8(value) -> cleaned
                    { cleaned := and(value, 0xff) }
                    function identity(value) -> ret
                    { ret := value }
                    function convert_t_rational_18_by_1_to_t_uint8(value) -> converted
                    {
                        converted := cleanup_t_uint8(identity(cleanup_t_rational_18_by_1(value)))
                    }
                    /// @src 0:2867:2902  "uint8 public constant decimals = 18"
                    function constant_decimals_258() -> ret
                    {
                        /// @src 0:2900:2902  "18"
                        let expr_257 := 0x12
                        let _3 := convert_t_rational_18_by_1_to_t_uint8(expr_257)
                        ret := _3
                    }
                    /// @ast-id 258 @src 0:2867:2902  "uint8 public constant decimals = 18"
                    function getter_fun_decimals_258() -> ret_0
                    {
                        ret_0 := constant_decimals_258()
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos)
                    {
                        mstore(pos, cleanup_t_uint8(value))
                    }
                    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack(headStart, value0) -> tail
                    {
                        tail := add(headStart, 32)
                        abi_encode_t_uint8_to_t_uint8_fromStack(value0, add(headStart, 0))
                    }
                    function external_fun_decimals_258()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        abi_decode_tuple_(4, calldatasize())
                        let ret_0 := getter_fun_decimals_258()
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple_t_uint8__to_t_uint8__fromStack(memPos, ret_0)
                        return(memPos, sub(memEnd, memPos))
                    }
                    function cleanup_from_storage_t_bytes32(value) -> cleaned
                    { cleaned := value }
                    function extract_from_storage_value_dynamict_bytes32(slot_value, offset) -> value
                    {
                        value := cleanup_from_storage_t_bytes32(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
                    }
                    function read_from_storage_split_dynamic_t_bytes32(slot, offset) -> value
                    {
                        value := extract_from_storage_value_dynamict_bytes32(sload(slot), offset)
                    }
                    /// @ast-id 272 @src 0:3052:3083  "bytes32 public DOMAIN_SEPARATOR"
                    function getter_fun_DOMAIN_SEPARATOR_272() -> ret
                    {
                        let slot := 3
                        let offset := 0
                        ret := read_from_storage_split_dynamic_t_bytes32(slot, offset)
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function external_fun_DOMAIN_SEPARATOR_272()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        abi_decode_tuple_(4, calldatasize())
                        let ret_0 := getter_fun_DOMAIN_SEPARATOR_272()
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack(memPos, ret_0)
                        return(memPos, sub(memEnd, memPos))
                    }
                    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1
                    {
                        if slt(sub(dataEnd, headStart), 64)
                        {
                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                        }
                        {
                            let offset := 0
                            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                        }
                        {
                            let offset := 32
                            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)
                        }
                    }
                    function external_fun_initialize_1099()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        let param_0, param_1 := abi_decode_tuple_t_addresst_address(4, calldatasize())
                        fun_initialize_1099(param_0, param_1)
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple__to__fromStack(memPos)
                        return(memPos, sub(memEnd, memPos))
                    }
                    /// @ast-id 1000 @src 0:10867:10899  "uint public price0CumulativeLast"
                    function getter_fun_price0CumulativeLast_1000() -> ret
                    {
                        let slot := 9
                        let offset := 0
                        ret := read_from_storage_split_dynamic_t_uint256(slot, offset)
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function external_fun_price0CumulativeLast_1000()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        abi_decode_tuple_(4, calldatasize())
                        let ret_0 := getter_fun_price0CumulativeLast_1000()
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                        return(memPos, sub(memEnd, memPos))
                    }
                    /// @ast-id 1002 @src 0:10905:10937  "uint public price1CumulativeLast"
                    function getter_fun_price1CumulativeLast_1002() -> ret
                    {
                        let slot := 10
                        let offset := 0
                        ret := read_from_storage_split_dynamic_t_uint256(slot, offset)
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function external_fun_price1CumulativeLast_1002()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        abi_decode_tuple_(4, calldatasize())
                        let ret_0 := getter_fun_price1CumulativeLast_1002()
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                        return(memPos, sub(memEnd, memPos))
                    }
                    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0
                    {
                        if slt(sub(dataEnd, headStart), 32)
                        {
                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                        }
                        {
                            let offset := 0
                            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                        }
                    }
                    function external_fun_mint_1352()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                        let ret_0 := fun_mint_1352(param_0)
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                        return(memPos, sub(memEnd, memPos))
                    }
                    function convert_t_uint160_to_t_uint160(value) -> converted
                    {
                        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
                    }
                    function convert_t_uint160_to_t_address(value) -> converted
                    {
                        converted := convert_t_uint160_to_t_uint160(value)
                    }
                    function convert_t_address_to_t_address(value) -> converted
                    {
                        converted := convert_t_uint160_to_t_address(value)
                    }
                    function mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(slot, key) -> dataSlot
                    {
                        mstore(0, convert_t_address_to_t_address(key))
                        mstore(0x20, slot)
                        dataSlot := keccak256(0, 0x40)
                    }
                    /// @ast-id 264 @src 0:2937:2978  "mapping(address => uint) public balanceOf"
                    function getter_fun_balanceOf_264(key_0) -> ret
                    {
                        let slot := 1
                        let offset := 0
                        slot := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(slot, key_0)
                        ret := read_from_storage_split_dynamic_t_uint256(slot, offset)
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function external_fun_balanceOf_264()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                        let ret_0 := getter_fun_balanceOf_264(param_0)
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                        return(memPos, sub(memEnd, memPos))
                    }
                    /// @ast-id 1004 @src 0:10943:10960  "uint public kLast"
                    function getter_fun_kLast_1004() -> ret
                    {
                        let slot := 11
                        let offset := 0
                        ret := read_from_storage_split_dynamic_t_uint256(slot, offset)
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function external_fun_kLast_1004()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        abi_decode_tuple_(4, calldatasize())
                        let ret_0 := getter_fun_kLast_1004()
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                        return(memPos, sub(memEnd, memPos))
                    }
                    /// @ast-id 279 @src 0:3315:3353  "mapping(address => uint) public nonces"
                    function getter_fun_nonces_279(key_0) -> ret
                    {
                        let slot := 4
                        let offset := 0
                        slot := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(slot, key_0)
                        ret := read_from_storage_split_dynamic_t_uint256(slot, offset)
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function external_fun_nonces_279()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                        let ret_0 := getter_fun_nonces_279(param_0)
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                        return(memPos, sub(memEnd, memPos))
                    }
                    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack(headStart, value0, value1) -> tail
                    {
                        tail := add(headStart, 64)
                        abi_encode_t_uint256_to_t_uint256_fromStack(value0, add(headStart, 0))
                        abi_encode_t_uint256_to_t_uint256_fromStack(value1, add(headStart, 32))
                    }
                    function external_fun_burn_1523()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                        let ret_0, ret_1 := fun_burn_1523(param_0)
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack(memPos, ret_0, ret_1)
                        return(memPos, sub(memEnd, memPos))
                    }
                    function store_literal_in_memory_0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba563255(memPtr)
                    {
                        mstore(add(memPtr, 0), "UNI-V2")
                    }
                    function copy_literal_to_memory_0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba563255() -> memPtr
                    {
                        memPtr := allocate_memory_array_t_string_memory_ptr(6)
                        store_literal_in_memory_0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba563255(add(memPtr, 32))
                    }
                    function convert_t_stringliteral_0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba563255_to_t_string_memory_ptr() -> converted
                    {
                        converted := copy_literal_to_memory_0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba563255()
                    }
                    /// @src 0:2821:2861  "string public constant symbol = \"UNI-V2\""
                    function constant_symbol_255() -> ret_mpos
                    {
                        /// @src 0:2853:2861  "\"UNI-V2\""
                        let _4_mpos := convert_t_stringliteral_0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba563255_to_t_string_memory_ptr()
                        ret_mpos := _4_mpos
                    }
                    /// @ast-id 255 @src 0:2821:2861  "string public constant symbol = \"UNI-V2\""
                    function getter_fun_symbol_255() -> ret_0
                    {
                        ret_0 := constant_symbol_255()
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function external_fun_symbol_255()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        abi_decode_tuple_(4, calldatasize())
                        let ret_0 := getter_fun_symbol_255()
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(memPos, ret_0)
                        return(memPos, sub(memEnd, memPos))
                    }
                    function external_fun_transfer_485()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        let param_0, param_1 := abi_decode_tuple_t_addresst_uint256(4, calldatasize())
                        let ret_0 := fun_transfer_485(param_0, param_1)
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos, ret_0)
                        return(memPos, sub(memEnd, memPos))
                    }
                    function external_fun_tmp_1332()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        abi_decode_tuple_(4, calldatasize())
                        fun_tmp_1332()
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple__to__fromStack(memPos)
                        return(memPos, sub(memEnd, memPos))
                    }
                    function cleanup_t_rational_1000_by_1(value) -> cleaned
                    { cleaned := value }
                    function convert_t_rational_1000_by_1_to_t_uint256(value) -> converted
                    {
                        converted := cleanup_t_uint256(identity(cleanup_t_rational_1000_by_1(value)))
                    }
                    /// @src 0:10359:10407  "uint public constant MINIMUM_LIQUIDITY = 10 ** 3"
                    function constant_MINIMUM_LIQUIDITY_975() -> ret
                    {
                        /// @src 0:10400:10407  "10 ** 3"
                        let expr_974 := 0x03e8
                        let _5 := convert_t_rational_1000_by_1_to_t_uint256(expr_974)
                        ret := _5
                    }
                    /// @ast-id 975 @src 0:10359:10407  "uint public constant MINIMUM_LIQUIDITY = 10 ** 3"
                    function getter_fun_MINIMUM_LIQUIDITY_975() -> ret_0
                    {
                        ret_0 := constant_MINIMUM_LIQUIDITY_975()
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function external_fun_MINIMUM_LIQUIDITY_975()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        abi_decode_tuple_(4, calldatasize())
                        let ret_0 := getter_fun_MINIMUM_LIQUIDITY_975()
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                        return(memPos, sub(memEnd, memPos))
                    }
                    function external_fun_skim_1810()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                        fun_skim_1810(param_0)
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple__to__fromStack(memPos)
                        return(memPos, sub(memEnd, memPos))
                    }
                    /// @ast-id 988 @src 0:10516:10538  "address public factory"
                    function getter_fun_factory_988() -> ret
                    {
                        let slot := 5
                        let offset := 0
                        ret := read_from_storage_split_dynamic_t_address(slot, offset)
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function external_fun_factory_988()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        abi_decode_tuple_(4, calldatasize())
                        let ret_0 := getter_fun_factory_988()
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos, ret_0)
                        return(memPos, sub(memEnd, memPos))
                    }
                    /// @ast-id 992 @src 0:10571:10592  "address public token1"
                    function getter_fun_token1_992() -> ret
                    {
                        let slot := 7
                        let offset := 0
                        ret := read_from_storage_split_dynamic_t_address(slot, offset)
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function external_fun_token1_992()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        abi_decode_tuple_(4, calldatasize())
                        let ret_0 := getter_fun_token1_992()
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos, ret_0)
                        return(memPos, sub(memEnd, memPos))
                    }
                    function validator_revert_t_uint8(value)
                    {
                        if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }
                    }
                    function abi_decode_t_uint8(offset, end) -> value
                    {
                        value := calldataload(offset)
                        validator_revert_t_uint8(value)
                    }
                    function validator_revert_t_bytes32(value)
                    {
                        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }
                    }
                    function abi_decode_t_bytes32(offset, end) -> value
                    {
                        value := calldataload(offset)
                        validator_revert_t_bytes32(value)
                    }
                    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6
                    {
                        if slt(sub(dataEnd, headStart), 224)
                        {
                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                        }
                        {
                            let offset := 0
                            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                        }
                        {
                            let offset := 32
                            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)
                        }
                        {
                            let offset := 64
                            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                        }
                        {
                            let offset := 96
                            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                        }
                        {
                            let offset := 128
                            value4 := abi_decode_t_uint8(add(headStart, offset), dataEnd)
                        }
                        {
                            let offset := 160
                            value5 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)
                        }
                        {
                            let offset := 192
                            value6 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)
                        }
                    }
                    function external_fun_permit_618()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        let param_0, param_1, param_2, param_3, param_4, param_5, param_6 := abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(4, calldatasize())
                        fun_permit_618(param_0, param_1, param_2, param_3, param_4, param_5, param_6)
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple__to__fromStack(memPos)
                        return(memPos, sub(memEnd, memPos))
                    }
                    function mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address(slot, key) -> dataSlot
                    {
                        mstore(0, convert_t_address_to_t_address(key))
                        mstore(0x20, slot)
                        dataSlot := keccak256(0, 0x40)
                    }
                    /// @ast-id 270 @src 0:2984:3045  "mapping(address => mapping(address => uint)) public allowance"
                    function getter_fun_allowance_270(key_0, key_1) -> ret
                    {
                        let slot := 2
                        let offset := 0
                        slot := mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address(slot, key_0)
                        slot := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(slot, key_1)
                        ret := read_from_storage_split_dynamic_t_uint256(slot, offset)
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function external_fun_allowance_270()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        let param_0, param_1 := abi_decode_tuple_t_addresst_address(4, calldatasize())
                        let ret_0 := getter_fun_allowance_270(param_0, param_1)
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                        return(memPos, sub(memEnd, memPos))
                    }
                    function external_fun_sync_1839()
                    {
                        if callvalue()
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        abi_decode_tuple_(4, calldatasize())
                        fun_sync_1839()
                        let memPos := allocate_unbounded()
                        let memEnd := abi_encode_tuple__to__fromStack(memPos)
                        return(memPos, sub(memEnd, memPos))
                    }
                    function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
                    { revert(0, 0) }
                    function zero_value_for_split_t_bool() -> ret
                    { ret := 0 }
                    /// @ast-id 466 @src 0:4651:4795  "function approve(address spender, uint value) external returns (bool) {..."
                    function fun_approve_466(var_spender_449, var_value_451) -> var__454
                    {
                        /// @src 0:4715:4719  "bool"
                        let zero_t_bool_6 := zero_value_for_split_t_bool()
                        var__454 := zero_t_bool_6
                        /// @src 0:4740:4750  "msg.sender"
                        let expr_458 := caller()
                        /// @src 0:4752:4759  "spender"
                        let _7 := var_spender_449
                        let expr_459 := _7
                        /// @src 0:4761:4766  "value"
                        let _8 := var_value_451
                        let expr_460 := _8
                        fun__approve_409(expr_458, expr_459, expr_460)
                        /// @src 0:4784:4788  "true"
                        let expr_463 := 0x01
                        /// @src 0:4777:4788  "return true"
                        var__454 := expr_463
                        leave
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function update_byte_slice_32_shift_0(value, toInsert) -> result
                    {
                        let mask := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                        toInsert := shift_left_0(toInsert)
                        value := and(value, not(mask))
                        result := or(value, and(toInsert, mask))
                    }
                    function convert_t_uint256_to_t_uint256(value) -> converted
                    {
                        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))
                    }
                    function prepare_store_t_uint256(value) -> ret
                    { ret := value }
                    function update_storage_value_offset_0t_uint256_to_t_uint256(slot, value_0)
                    {
                        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)
                        sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_uint256(convertedValue_0)))
                    }
                    /// @ast-id 409 @src 0:4257:4423  "function _approve(address owner, address spender, uint value) private {..."
                    function fun__approve_409(var_owner_387, var_spender_389, var_value_391)
                    {
                        /// @src 0:4365:4370  "value"
                        let _9 := var_value_391
                        let expr_399 := _9
                        /// @src 0:4337:4346  "allowance"
                        let _10 := 0x02
                        let expr_394 := _10
                        /// @src 0:4347:4352  "owner"
                        let _11 := var_owner_387
                        let expr_395 := _11
                        /// @src 0:4337:4353  "allowance[owner]"
                        let _12 := mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address(expr_394, expr_395)
                        let _13 := _12
                        let expr_397 := _13
                        /// @src 0:4354:4361  "spender"
                        let _14 := var_spender_389
                        let expr_396 := _14
                        /// @src 0:4337:4362  "allowance[owner][spender]"
                        let _15 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_397, expr_396)
                        /// @src 0:4337:4370  "allowance[owner][spender] = value"
                        update_storage_value_offset_0t_uint256_to_t_uint256(_15, expr_399)
                        let expr_400 := expr_399
                        /// @src 0:4394:4399  "owner"
                        let _16 := var_owner_387
                        let expr_403 := _16
                        /// @src 0:4401:4408  "spender"
                        let _17 := var_spender_389
                        let expr_404 := _17
                        /// @src 0:4410:4415  "value"
                        let _18 := var_value_391
                        let expr_405 := _18
                        /// @src 0:4385:4416  "Approval(owner, spender, value)"
                        let _19 := 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925
                        let _20 := convert_t_address_to_t_address(expr_403)
                        let _21 := convert_t_address_to_t_address(expr_404)
                        {
                            let _22 := allocate_unbounded()
                            let _23 := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(_22, expr_405)
                            log3(_22, sub(_23, _22), _19, _20, _21)
                        }
                    }
                    /// @ast-id 485 @src 0:4801:4937  "function transfer(address to, uint value) external returns (bool) {..."
                    function fun_transfer_485(var_to_468, var_value_470) -> var__473
                    {
                        /// @src 0:4861:4865  "bool"
                        let zero_t_bool_24 := zero_value_for_split_t_bool()
                        var__473 := zero_t_bool_24
                        /// @src 0:4887:4897  "msg.sender"
                        let expr_477 := caller()
                        /// @src 0:4899:4901  "to"
                        let _25 := var_to_468
                        let expr_478 := _25
                        /// @src 0:4903:4908  "value"
                        let _26 := var_value_470
                        let expr_479 := _26
                        fun__transfer_447(expr_477, expr_478, expr_479)
                        /// @src 0:4926:4930  "true"
                        let expr_482 := 0x01
                        /// @src 0:4919:4930  "return true"
                        var__473 := expr_482
                        leave
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function shift_right_0_unsigned(value) -> newValue
                    { newValue := shr(0, value) }
                    function extract_from_storage_value_offset_0t_uint256(slot_value) -> value
                    {
                        value := cleanup_from_storage_t_uint256(shift_right_0_unsigned(slot_value))
                    }
                    function read_from_storage_split_offset_0_t_uint256(slot) -> value
                    {
                        value := extract_from_storage_value_offset_0t_uint256(sload(slot))
                    }
                    /// @ast-id 447 @src 0:4429:4645  "function _transfer(address from, address to, uint value) private {..."
                    function fun__transfer_447(var_from_411, var_to_413, var_value_415)
                    {
                        /// @src 0:4522:4531  "balanceOf"
                        let _27 := 0x01
                        let expr_421 := _27
                        /// @src 0:4532:4536  "from"
                        let _28 := var_from_411
                        let expr_422 := _28
                        /// @src 0:4522:4537  "balanceOf[from]"
                        let _29 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_421, expr_422)
                        let _30 := read_from_storage_split_offset_0_t_uint256(_29)
                        let expr_423 := _30
                        /// @src 0:4522:4541  "balanceOf[from].sub"
                        let expr_424_self := expr_423
                        /// @src 0:4542:4547  "value"
                        let _31 := var_value_415
                        let expr_425 := _31
                        /// @src 0:4522:4548  "balanceOf[from].sub(value)"
                        let expr_426 := fun_sub_97(expr_424_self, expr_425)
                        /// @src 0:4504:4513  "balanceOf"
                        let _32 := 0x01
                        let expr_418 := _32
                        /// @src 0:4514:4518  "from"
                        let _33 := var_from_411
                        let expr_419 := _33
                        /// @src 0:4504:4519  "balanceOf[from]"
                        let _34 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_418, expr_419)
                        /// @src 0:4504:4548  "balanceOf[from] = balanceOf[from].sub(value)"
                        update_storage_value_offset_0t_uint256_to_t_uint256(_34, expr_426)
                        let expr_427 := expr_426
                        /// @src 0:4574:4583  "balanceOf"
                        let _35 := 0x01
                        let expr_432 := _35
                        /// @src 0:4584:4586  "to"
                        let _36 := var_to_413
                        let expr_433 := _36
                        /// @src 0:4574:4587  "balanceOf[to]"
                        let _37 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_432, expr_433)
                        let _38 := read_from_storage_split_offset_0_t_uint256(_37)
                        let expr_434 := _38
                        /// @src 0:4574:4591  "balanceOf[to].add"
                        let expr_435_self := expr_434
                        /// @src 0:4592:4597  "value"
                        let _39 := var_value_415
                        let expr_436 := _39
                        /// @src 0:4574:4598  "balanceOf[to].add(value)"
                        let expr_437 := fun_add_75(expr_435_self, expr_436)
                        /// @src 0:4558:4567  "balanceOf"
                        let _40 := 0x01
                        let expr_429 := _40
                        /// @src 0:4568:4570  "to"
                        let _41 := var_to_413
                        let expr_430 := _41
                        /// @src 0:4558:4571  "balanceOf[to]"
                        let _42 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_429, expr_430)
                        /// @src 0:4558:4598  "balanceOf[to] = balanceOf[to].add(value)"
                        update_storage_value_offset_0t_uint256_to_t_uint256(_42, expr_437)
                        let expr_438 := expr_437
                        /// @src 0:4622:4626  "from"
                        let _43 := var_from_411
                        let expr_441 := _43
                        /// @src 0:4628:4630  "to"
                        let _44 := var_to_413
                        let expr_442 := _44
                        /// @src 0:4632:4637  "value"
                        let _45 := var_value_415
                        let expr_443 := _45
                        /// @src 0:4613:4638  "Transfer(from, to, value)"
                        let _46 := 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
                        let _47 := convert_t_address_to_t_address(expr_441)
                        let _48 := convert_t_address_to_t_address(expr_442)
                        {
                            let _49 := allocate_unbounded()
                            let _50 := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(_49, expr_443)
                            log3(_49, sub(_50, _49), _46, _47, _48)
                        }
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function zero_value_for_split_t_uint256() -> ret
                    { ret := 0 }
                    function panic_error_0x11()
                    {
                        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                        mstore(4, 0x11)
                        revert(0, 0x24)
                    }
                    function checked_add_t_uint256(x, y) -> sum
                    {
                        x := cleanup_t_uint256(x)
                        y := cleanup_t_uint256(y)
                        sum := add(x, y)
                        if gt(x, sum) { panic_error_0x11() }
                    }
                    function store_literal_in_memory_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db(memPtr)
                    {
                        mstore(add(memPtr, 0), "ds-math-add-overflow")
                    }
                    function abi_encode_t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db_to_t_string_memory_ptr_fromStack(pos) -> end
                    {
                        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)
                        store_literal_in_memory_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db(pos)
                        end := add(pos, 32)
                    }
                    function abi_encode_tuple_t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db__to_t_string_memory_ptr__fromStack(headStart) -> tail
                    {
                        tail := add(headStart, 32)
                        mstore(add(headStart, 0), sub(tail, headStart))
                        tail := abi_encode_t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db_to_t_string_memory_ptr_fromStack(tail)
                    }
                    function require_helper_t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db(condition)
                    {
                        if iszero(condition)
                        {
                            let memPtr := allocate_unbounded()
                            mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                            let end := abi_encode_tuple_t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                            revert(memPtr, sub(end, memPtr))
                        }
                    }
                    /// @ast-id 75 @src 0:926:1052  "function add(uint x, uint y) internal pure returns (uint z) {..."
                    function fun_add_75(var_x_55, var_y_57) -> var_z_60
                    {
                        /// @src 0:978:984  "uint z"
                        let zero_t_uint256_51 := zero_value_for_split_t_uint256()
                        var_z_60 := zero_t_uint256_51
                        /// @src 0:1009:1010  "x"
                        let _52 := var_x_55
                        let expr_64 := _52
                        /// @src 0:1013:1014  "y"
                        let _53 := var_y_57
                        let expr_65 := _53
                        /// @src 0:1009:1014  "x + y"
                        let expr_66 := checked_add_t_uint256(expr_64, expr_65)
                        /// @src 0:1005:1014  "z = x + y"
                        var_z_60 := expr_66
                        let expr_67 := expr_66
                        /// @src 0:1004:1015  "(z = x + y)"
                        let expr_68 := expr_67
                        /// @src 0:1019:1020  "x"
                        let _54 := var_x_55
                        let expr_69 := _54
                        /// @src 0:1004:1020  "(z = x + y) >= x"
                        let expr_70 := iszero(lt(cleanup_t_uint256(expr_68), cleanup_t_uint256(expr_69)))
                        /// @src 0:996:1045  "require((z = x + y) >= x, \"ds-math-add-overflow\")"
                        require_helper_t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db(expr_70)
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function checked_sub_t_uint256(x, y) -> diff
                    {
                        x := cleanup_t_uint256(x)
                        y := cleanup_t_uint256(y)
                        diff := sub(x, y)
                        if gt(diff, x) { panic_error_0x11() }
                    }
                    function store_literal_in_memory_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590(memPtr)
                    {
                        mstore(add(memPtr, 0), "ds-math-sub-underflow")
                    }
                    function abi_encode_t_stringliteral_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590_to_t_string_memory_ptr_fromStack(pos) -> end
                    {
                        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 21)
                        store_literal_in_memory_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590(pos)
                        end := add(pos, 32)
                    }
                    function abi_encode_tuple_t_stringliteral_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590__to_t_string_memory_ptr__fromStack(headStart) -> tail
                    {
                        tail := add(headStart, 32)
                        mstore(add(headStart, 0), sub(tail, headStart))
                        tail := abi_encode_t_stringliteral_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590_to_t_string_memory_ptr_fromStack(tail)
                    }
                    function require_helper_t_stringliteral_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590(condition)
                    {
                        if iszero(condition)
                        {
                            let memPtr := allocate_unbounded()
                            mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                            let end := abi_encode_tuple_t_stringliteral_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                            revert(memPtr, sub(end, memPtr))
                        }
                    }
                    /// @ast-id 97 @src 0:1058:1185  "function sub(uint x, uint y) internal pure returns (uint z) {..."
                    function fun_sub_97(var_x_77, var_y_79) -> var_z_82
                    {
                        /// @src 0:1110:1116  "uint z"
                        let zero_t_uint256_55 := zero_value_for_split_t_uint256()
                        var_z_82 := zero_t_uint256_55
                        /// @src 0:1141:1142  "x"
                        let _56 := var_x_77
                        let expr_86 := _56
                        /// @src 0:1145:1146  "y"
                        let _57 := var_y_79
                        let expr_87 := _57
                        /// @src 0:1141:1146  "x - y"
                        let expr_88 := checked_sub_t_uint256(expr_86, expr_87)
                        /// @src 0:1137:1146  "z = x - y"
                        var_z_82 := expr_88
                        let expr_89 := expr_88
                        /// @src 0:1136:1147  "(z = x - y)"
                        let expr_90 := expr_89
                        /// @src 0:1151:1152  "x"
                        let _58 := var_x_77
                        let expr_91 := _58
                        /// @src 0:1136:1152  "(z = x - y) <= x"
                        let expr_92 := iszero(gt(cleanup_t_uint256(expr_90), cleanup_t_uint256(expr_91)))
                        /// @src 0:1128:1178  "require((z = x - y) <= x, \"ds-math-sub-underflow\")"
                        require_helper_t_stringliteral_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590(expr_92)
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function cleanup_t_rational_minus_1_by_1(value) -> cleaned
                    { cleaned := value }
                    function cleanup_t_int256(value) -> cleaned
                    { cleaned := value }
                    function convert_t_rational_minus_1_by_1_to_t_int256(value) -> converted
                    {
                        converted := cleanup_t_int256(identity(cleanup_t_rational_minus_1_by_1(value)))
                    }
                    function convert_t_int256_to_t_uint256(value) -> converted
                    {
                        converted := cleanup_t_uint256(identity(cleanup_t_int256(value)))
                    }
                    /// @ast-id 539 @src 0:4943:5303  "function transferFrom(..."
                    function fun_transferFrom_539(var_from_487, var_to_489, var_value_491) -> var__494
                    {
                        /// @src 0:5051:5055  "bool"
                        let zero_t_bool_59 := zero_value_for_split_t_bool()
                        var__494 := zero_t_bool_59
                        /// @src 0:5071:5080  "allowance"
                        let _60 := 0x02
                        let expr_496 := _60
                        /// @src 0:5081:5085  "from"
                        let _61 := var_from_487
                        let expr_497 := _61
                        /// @src 0:5071:5086  "allowance[from]"
                        let _62 := mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address(expr_496, expr_497)
                        let _63 := _62
                        let expr_498 := _63
                        /// @src 0:5087:5097  "msg.sender"
                        let expr_500 := caller()
                        /// @src 0:5071:5098  "allowance[from][msg.sender]"
                        let _64 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_498, expr_500)
                        let _65 := read_from_storage_split_offset_0_t_uint256(_64)
                        let expr_501 := _65
                        /// @src 0:5111:5113  "-1"
                        let expr_507 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                        /// @src 0:5107:5114  "int(-1)"
                        let expr_508 := convert_t_rational_minus_1_by_1_to_t_int256(expr_507)
                        /// @src 0:5102:5115  "uint(int(-1))"
                        let expr_509 := convert_t_int256_to_t_uint256(expr_508)
                        /// @src 0:5071:5115  "allowance[from][msg.sender] != uint(int(-1))"
                        let expr_510 := iszero(eq(cleanup_t_uint256(expr_501), cleanup_t_uint256(expr_509)))
                        /// @src 0:5067:5240  "if (allowance[from][msg.sender] != uint(int(-1))) {..."
                        if expr_510
                        {
                            /// @src 0:5161:5170  "allowance"
                            let _66 := 0x02
                            let expr_517 := _66
                            /// @src 0:5171:5175  "from"
                            let _67 := var_from_487
                            let expr_518 := _67
                            /// @src 0:5161:5176  "allowance[from]"
                            let _68 := mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address(expr_517, expr_518)
                            let _69 := _68
                            let expr_519 := _69
                            /// @src 0:5177:5187  "msg.sender"
                            let expr_521 := caller()
                            /// @src 0:5161:5188  "allowance[from][msg.sender]"
                            let _70 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_519, expr_521)
                            let _71 := read_from_storage_split_offset_0_t_uint256(_70)
                            let expr_522 := _71
                            /// @src 0:5161:5192  "allowance[from][msg.sender].sub"
                            let expr_523_self := expr_522
                            /// @src 0:5210:5215  "value"
                            let _72 := var_value_491
                            let expr_524 := _72
                            /// @src 0:5161:5229  "allowance[from][msg.sender].sub(..."
                            let expr_525 := fun_sub_97(expr_523_self, expr_524)
                            /// @src 0:5131:5140  "allowance"
                            let _73 := 0x02
                            let expr_511 := _73
                            /// @src 0:5141:5145  "from"
                            let _74 := var_from_487
                            let expr_512 := _74
                            /// @src 0:5131:5146  "allowance[from]"
                            let _75 := mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address(expr_511, expr_512)
                            let _76 := _75
                            let expr_515 := _76
                            /// @src 0:5147:5157  "msg.sender"
                            let expr_514 := caller()
                            /// @src 0:5131:5158  "allowance[from][msg.sender]"
                            let _77 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_515, expr_514)
                            /// @src 0:5131:5229  "allowance[from][msg.sender] = allowance[from][msg.sender].sub(..."
                            update_storage_value_offset_0t_uint256_to_t_uint256(_77, expr_525)
                            let expr_526 := expr_525
                        }
                        /// @src 0:5259:5263  "from"
                        let _78 := var_from_487
                        let expr_531 := _78
                        /// @src 0:5265:5267  "to"
                        let _79 := var_to_489
                        let expr_532 := _79
                        /// @src 0:5269:5274  "value"
                        let _80 := var_value_491
                        let expr_533 := _80
                        fun__transfer_447(expr_531, expr_532, expr_533)
                        /// @src 0:5292:5296  "true"
                        let expr_536 := 0x01
                        /// @src 0:5285:5296  "return true"
                        var__494 := expr_536
                        leave
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function store_literal_in_memory_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87(memPtr)
                    {
                        mstore(add(memPtr, 0), "UniswapV2: EXPIRED")
                    }
                    function abi_encode_t_stringliteral_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87_to_t_string_memory_ptr_fromStack(pos) -> end
                    {
                        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 18)
                        store_literal_in_memory_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87(pos)
                        end := add(pos, 32)
                    }
                    function abi_encode_tuple_t_stringliteral_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87__to_t_string_memory_ptr__fromStack(headStart) -> tail
                    {
                        tail := add(headStart, 32)
                        mstore(add(headStart, 0), sub(tail, headStart))
                        tail := abi_encode_t_stringliteral_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87_to_t_string_memory_ptr_fromStack(tail)
                    }
                    function require_helper_t_stringliteral_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87(condition)
                    {
                        if iszero(condition)
                        {
                            let memPtr := allocate_unbounded()
                            mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                            let end := abi_encode_tuple_t_stringliteral_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                            revert(memPtr, sub(end, memPtr))
                        }
                    }
                    function extract_from_storage_value_offset_0t_bytes32(slot_value) -> value
                    {
                        value := cleanup_from_storage_t_bytes32(shift_right_0_unsigned(slot_value))
                    }
                    function read_from_storage_split_offset_0_t_bytes32(slot) -> value
                    {
                        value := extract_from_storage_value_offset_0t_bytes32(sload(slot))
                    }
                    function increment_t_uint256(value) -> ret
                    {
                        value := cleanup_t_uint256(value)
                        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }
                        ret := add(value, 1)
                    }
                    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack(headStart, value0, value1, value2, value3, value4, value5) -> tail
                    {
                        tail := add(headStart, 192)
                        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0, add(headStart, 0))
                        abi_encode_t_address_to_t_address_fromStack(value1, add(headStart, 32))
                        abi_encode_t_address_to_t_address_fromStack(value2, add(headStart, 64))
                        abi_encode_t_uint256_to_t_uint256_fromStack(value3, add(headStart, 96))
                        abi_encode_t_uint256_to_t_uint256_fromStack(value4, add(headStart, 128))
                        abi_encode_t_uint256_to_t_uint256_fromStack(value5, add(headStart, 160))
                    }
                    function array_dataslot_t_bytes_memory_ptr(ptr) -> data
                    {
                        data := ptr
                        data := add(ptr, 0x20)
                    }
                    function array_length_t_bytes_memory_ptr(value) -> length
                    { length := mload(value) }
                    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos
                    { updated_pos := pos }
                    function store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541(memPtr)
                    {
                        mstore(add(memPtr, 0), 0x1901000000000000000000000000000000000000000000000000000000000000)
                    }
                    function abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end
                    {
                        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 2)
                        store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541(pos)
                        end := add(pos, 2)
                    }
                    function leftAlign_t_bytes32(value) -> aligned
                    { aligned := value }
                    function abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value, pos)
                    {
                        mstore(pos, leftAlign_t_bytes32(cleanup_t_bytes32(value)))
                    }
                    function abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack(pos, value0, value1) -> end
                    {
                        pos := abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos)
                        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value0, pos)
                        pos := add(pos, 32)
                        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value1, pos)
                        pos := add(pos, 32)
                        end := pos
                    }
                    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack(headStart, value0, value1, value2, value3) -> tail
                    {
                        tail := add(headStart, 128)
                        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0, add(headStart, 0))
                        abi_encode_t_uint8_to_t_uint8_fromStack(value1, add(headStart, 32))
                        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2, add(headStart, 64))
                        abi_encode_t_bytes32_to_t_bytes32_fromStack(value3, add(headStart, 96))
                    }
                    function revert_forward_1()
                    {
                        let pos := allocate_unbounded()
                        returndatacopy(pos, 0, returndatasize())
                        revert(pos, returndatasize())
                    }
                    function cleanup_t_rational_0_by_1(value) -> cleaned
                    { cleaned := value }
                    function convert_t_rational_0_by_1_to_t_uint160(value) -> converted
                    {
                        converted := cleanup_t_uint160(identity(cleanup_t_rational_0_by_1(value)))
                    }
                    function convert_t_rational_0_by_1_to_t_address(value) -> converted
                    {
                        converted := convert_t_rational_0_by_1_to_t_uint160(value)
                    }
                    function store_literal_in_memory_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56(memPtr)
                    {
                        mstore(add(memPtr, 0), "UniswapV2: INVALID_SIGNATURE")
                    }
                    function abi_encode_t_stringliteral_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56_to_t_string_memory_ptr_fromStack(pos) -> end
                    {
                        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 28)
                        store_literal_in_memory_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56(pos)
                        end := add(pos, 32)
                    }
                    function abi_encode_tuple_t_stringliteral_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56__to_t_string_memory_ptr__fromStack(headStart) -> tail
                    {
                        tail := add(headStart, 32)
                        mstore(add(headStart, 0), sub(tail, headStart))
                        tail := abi_encode_t_stringliteral_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56_to_t_string_memory_ptr_fromStack(tail)
                    }
                    function require_helper_t_stringliteral_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56(condition)
                    {
                        if iszero(condition)
                        {
                            let memPtr := allocate_unbounded()
                            mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                            let end := abi_encode_tuple_t_stringliteral_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                            revert(memPtr, sub(end, memPtr))
                        }
                    }
                    /// @ast-id 618 @src 0:5309:6271  "function permit(..."
                    function fun_permit_618(var_owner_541, var_spender_543, var_value_545, var_deadline_547, var_v_549, var_r_551, var_s_553)
                    {
                        /// @src 0:5504:5512  "deadline"
                        let _81 := var_deadline_547
                        let expr_557 := _81
                        /// @src 0:5516:5531  "block.timestamp"
                        let expr_559 := timestamp()
                        /// @src 0:5504:5531  "deadline >= block.timestamp"
                        let expr_560 := iszero(lt(cleanup_t_uint256(expr_557), cleanup_t_uint256(expr_559)))
                        /// @src 0:5496:5554  "require(deadline >= block.timestamp, \"UniswapV2: EXPIRED\")"
                        require_helper_t_stringliteral_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87(expr_560)
                        /// @src 0:5666:5682  "DOMAIN_SEPARATOR"
                        let _82 := read_from_storage_split_offset_0_t_bytes32(0x03)
                        let expr_570 := _82
                        /// @src 0:5767:5782  "PERMIT_TYPEHASH"
                        let expr_574 := constant_PERMIT_TYPEHASH_275()
                        /// @src 0:5808:5813  "owner"
                        let _83 := var_owner_541
                        let expr_575 := _83
                        /// @src 0:5839:5846  "spender"
                        let _84 := var_spender_543
                        let expr_576 := _84
                        /// @src 0:5872:5877  "value"
                        let _85 := var_value_545
                        let expr_577 := _85
                        /// @src 0:5903:5909  "nonces"
                        let _86 := 0x04
                        let expr_578 := _86
                        /// @src 0:5910:5915  "owner"
                        let _87 := var_owner_541
                        let expr_579 := _87
                        /// @src 0:5903:5916  "nonces[owner]"
                        let _88 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_578, expr_579)
                        /// @src 0:5903:5918  "nonces[owner]++"
                        let _90 := read_from_storage_split_offset_0_t_uint256(_88)
                        let _89 := increment_t_uint256(_90)
                        update_storage_value_offset_0t_uint256_to_t_uint256(_88, _89)
                        let expr_581 := _90
                        /// @src 0:5944:5952  "deadline"
                        let _91 := var_deadline_547
                        let expr_582 := _91
                        /// @src 0:5731:5974  "abi.encode(..."
                        let expr_583_mpos := allocate_unbounded()
                        let _92 := add(expr_583_mpos, 0x20)
                        let _93 := abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack(_92, expr_574, expr_575, expr_576, expr_577, expr_581, expr_582)
                        mstore(expr_583_mpos, sub(_93, add(expr_583_mpos, 0x20)))
                        finalize_allocation(expr_583_mpos, sub(_93, expr_583_mpos))
                        /// @src 0:5700:5992  "keccak256(..."
                        let expr_584 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_583_mpos), array_length_t_bytes_memory_ptr(expr_583_mpos))
                        /// @src 0:5604:6006  "abi.encodePacked(..."
                        let expr_585_mpos := allocate_unbounded()
                        let _94 := add(expr_585_mpos, 0x20)
                        let _95 := abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack(_94, expr_570, expr_584)
                        mstore(expr_585_mpos, sub(_95, add(expr_585_mpos, 0x20)))
                        finalize_allocation(expr_585_mpos, sub(_95, expr_585_mpos))
                        /// @src 0:5581:6016  "keccak256(..."
                        let expr_586 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_585_mpos), array_length_t_bytes_memory_ptr(expr_585_mpos))
                        /// @src 0:5564:6016  "bytes32 digest = keccak256(..."
                        let var_digest_565 := expr_586
                        /// @src 0:6063:6069  "digest"
                        let _96 := var_digest_565
                        let expr_591 := _96
                        /// @src 0:6071:6072  "v"
                        let _97 := var_v_549
                        let expr_592 := _97
                        /// @src 0:6074:6075  "r"
                        let _98 := var_r_551
                        let expr_593 := _98
                        /// @src 0:6077:6078  "s"
                        let _99 := var_s_553
                        let expr_594 := _99
                        /// @src 0:6053:6079  "ecrecover(digest, v, r, s)"
                        let _100 := allocate_unbounded()
                        let _101 := abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack(_100, expr_591, expr_592, expr_593, expr_594)
                        mstore(0, 0)
                        let _102 := staticcall(gas(), 1, _100, sub(_101, _100), 0, 32)
                        if iszero(_102) { revert_forward_1() }
                        let expr_595 := shift_left_0(mload(0))
                        /// @src 0:6026:6079  "address recoveredAddress = ecrecover(digest, v, r, s)"
                        let var_recoveredAddress_589 := expr_595
                        /// @src 0:6110:6126  "recoveredAddress"
                        let _103 := var_recoveredAddress_589
                        let expr_598 := _103
                        /// @src 0:6138:6139  "0"
                        let expr_601 := 0x00
                        /// @src 0:6130:6140  "address(0)"
                        let expr_602 := convert_t_rational_0_by_1_to_t_address(expr_601)
                        /// @src 0:6110:6140  "recoveredAddress != address(0)"
                        let expr_603 := iszero(eq(cleanup_t_address(expr_598), cleanup_t_address(expr_602)))
                        /// @src 0:6110:6169  "recoveredAddress != address(0) && recoveredAddress == owner"
                        let expr_607 := expr_603
                        if expr_607
                        {
                            /// @src 0:6144:6160  "recoveredAddress"
                            let _104 := var_recoveredAddress_589
                            let expr_604 := _104
                            /// @src 0:6164:6169  "owner"
                            let _105 := var_owner_541
                            let expr_605 := _105
                            /// @src 0:6144:6169  "recoveredAddress == owner"
                            let expr_606 := eq(cleanup_t_address(expr_604), cleanup_t_address(expr_605))
                            /// @src 0:6110:6169  "recoveredAddress != address(0) && recoveredAddress == owner"
                            expr_607 := expr_606
                        }
                        /// @src 0:6089:6223  "require(..."
                        require_helper_t_stringliteral_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56(expr_607)
                        /// @src 0:6242:6247  "owner"
                        let _106 := var_owner_541
                        let expr_612 := _106
                        /// @src 0:6249:6256  "spender"
                        let _107 := var_spender_543
                        let expr_613 := _107
                        /// @src 0:6258:6263  "value"
                        let _108 := var_value_545
                        let expr_614 := _108
                        fun__approve_409(expr_612, expr_613, expr_614)
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function zero_value_for_split_t_uint112() -> ret
                    { ret := 0 }
                    function zero_value_for_split_t_uint32() -> ret
                    { ret := 0 }
                    function cleanup_from_storage_t_uint112(value) -> cleaned
                    {
                        cleaned := and(value, 0xffffffffffffffffffffffffffff)
                    }
                    function extract_from_storage_value_offset_0t_uint112(slot_value) -> value
                    {
                        value := cleanup_from_storage_t_uint112(shift_right_0_unsigned(slot_value))
                    }
                    function read_from_storage_split_offset_0_t_uint112(slot) -> value
                    {
                        value := extract_from_storage_value_offset_0t_uint112(sload(slot))
                    }
                    function shift_right_112_unsigned(value) -> newValue
                    { newValue := shr(112, value) }
                    function extract_from_storage_value_offset_14t_uint112(slot_value) -> value
                    {
                        value := cleanup_from_storage_t_uint112(shift_right_112_unsigned(slot_value))
                    }
                    function read_from_storage_split_offset_14_t_uint112(slot) -> value
                    {
                        value := extract_from_storage_value_offset_14t_uint112(sload(slot))
                    }
                    function cleanup_from_storage_t_uint32(value) -> cleaned
                    {
                        cleaned := and(value, 0xffffffff)
                    }
                    function extract_from_storage_value_offset_28t_uint32(slot_value) -> value
                    {
                        value := cleanup_from_storage_t_uint32(shift_right_224_unsigned(slot_value))
                    }
                    function read_from_storage_split_offset_28_t_uint32(slot) -> value
                    {
                        value := extract_from_storage_value_offset_28t_uint32(sload(slot))
                    }
                    /// @ast-id 1048 @src 0:11215:11503  "function getReserves()..."
                    function fun_getReserves_1048() -> var__reserve0_1029, var__reserve1_1031, var__blockTimestampLast_1033
                    {
                        /// @src 0:11283:11300  "uint112 _reserve0"
                        let zero_t_uint112_109 := zero_value_for_split_t_uint112()
                        var__reserve0_1029 := zero_t_uint112_109
                        /// @src 0:11314:11331  "uint112 _reserve1"
                        let zero_t_uint112_110 := zero_value_for_split_t_uint112()
                        var__reserve1_1031 := zero_t_uint112_110
                        /// @src 0:11345:11371  "uint32 _blockTimestampLast"
                        let zero_t_uint32_111 := zero_value_for_split_t_uint32()
                        var__blockTimestampLast_1033 := zero_t_uint32_111
                        /// @src 0:11408:11416  "reserve0"
                        let _112 := read_from_storage_split_offset_0_t_uint112(0x08)
                        let expr_1036 := _112
                        /// @src 0:11396:11416  "_reserve0 = reserve0"
                        var__reserve0_1029 := expr_1036
                        let expr_1037 := expr_1036
                        /// @src 0:11438:11446  "reserve1"
                        let _113 := read_from_storage_split_offset_14_t_uint112(0x08)
                        let expr_1040 := _113
                        /// @src 0:11426:11446  "_reserve1 = reserve1"
                        var__reserve1_1031 := expr_1040
                        let expr_1041 := expr_1040
                        /// @src 0:11478:11496  "blockTimestampLast"
                        let _114 := read_from_storage_split_offset_28_t_uint32(0x08)
                        let expr_1044 := _114
                        /// @src 0:11456:11496  "_blockTimestampLast = blockTimestampLast"
                        var__blockTimestampLast_1033 := expr_1044
                        let expr_1045 := expr_1044
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function extract_from_storage_value_offset_0t_address(slot_value) -> value
                    {
                        value := cleanup_from_storage_t_address(shift_right_0_unsigned(slot_value))
                    }
                    function read_from_storage_split_offset_0_t_address(slot) -> value
                    {
                        value := extract_from_storage_value_offset_0t_address(sload(slot))
                    }
                    function store_literal_in_memory_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37(memPtr)
                    {
                        mstore(add(memPtr, 0), "UniswapV2: FORBIDDEN")
                    }
                    function abi_encode_t_stringliteral_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37_to_t_string_memory_ptr_fromStack(pos) -> end
                    {
                        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)
                        store_literal_in_memory_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37(pos)
                        end := add(pos, 32)
                    }
                    function abi_encode_tuple_t_stringliteral_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37__to_t_string_memory_ptr__fromStack(headStart) -> tail
                    {
                        tail := add(headStart, 32)
                        mstore(add(headStart, 0), sub(tail, headStart))
                        tail := abi_encode_t_stringliteral_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37_to_t_string_memory_ptr_fromStack(tail)
                    }
                    function require_helper_t_stringliteral_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37(condition)
                    {
                        if iszero(condition)
                        {
                            let memPtr := allocate_unbounded()
                            mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                            let end := abi_encode_tuple_t_stringliteral_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                            revert(memPtr, sub(end, memPtr))
                        }
                    }
                    function update_byte_slice_20_shift_0(value, toInsert) -> result
                    {
                        let mask := 0xffffffffffffffffffffffffffffffffffffffff
                        toInsert := shift_left_0(toInsert)
                        value := and(value, not(mask))
                        result := or(value, and(toInsert, mask))
                    }
                    function prepare_store_t_address(value) -> ret
                    { ret := value }
                    function update_storage_value_offset_0t_address_to_t_address(slot, value_0)
                    {
                        let convertedValue_0 := convert_t_address_to_t_address(value_0)
                        sstore(slot, update_byte_slice_20_shift_0(sload(slot), prepare_store_t_address(convertedValue_0)))
                    }
                    /// @ast-id 1099 @src 0:11755:11961  "function initialize(address _token0, address _token1) external {..."
                    function fun_initialize_1099(var__token0_1077, var__token1_1079)
                    {
                        /// @src 0:11836:11846  "msg.sender"
                        let expr_1084 := caller()
                        /// @src 0:11850:11857  "factory"
                        let _115 := read_from_storage_split_offset_0_t_address(0x05)
                        let expr_1085 := _115
                        /// @src 0:11836:11857  "msg.sender == factory"
                        let expr_1086 := eq(cleanup_t_address(expr_1084), cleanup_t_address(expr_1085))
                        /// @src 0:11828:11882  "require(msg.sender == factory, \"UniswapV2: FORBIDDEN\")"
                        require_helper_t_stringliteral_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37(expr_1086)
                        /// @src 0:11921:11928  "_token0"
                        let _116 := var__token0_1077
                        let expr_1091 := _116
                        /// @src 0:11912:11928  "token0 = _token0"
                        update_storage_value_offset_0t_address_to_t_address(0x06, expr_1091)
                        let expr_1092 := expr_1091
                        /// @src 0:11947:11954  "_token1"
                        let _117 := var__token1_1079
                        let expr_1095 := _117
                        /// @src 0:11938:11954  "token1 = _token1"
                        update_storage_value_offset_0t_address_to_t_address(0x07, expr_1095)
                        let expr_1096 := expr_1095
                    }
                    /// @ast-id 1332 @src 0:13978:14010  "function tmp() external {..."
                    function fun_tmp_1332()
                    { }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function cleanup_t_rational_1_by_1(value) -> cleaned
                    { cleaned := value }
                    function convert_t_rational_1_by_1_to_t_uint256(value) -> converted
                    {
                        converted := cleanup_t_uint256(identity(cleanup_t_rational_1_by_1(value)))
                    }
                    function store_literal_in_memory_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a(memPtr)
                    {
                        mstore(add(memPtr, 0), "UniswapV2: LOCKED")
                    }
                    function abi_encode_t_stringliteral_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a_to_t_string_memory_ptr_fromStack(pos) -> end
                    {
                        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 17)
                        store_literal_in_memory_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a(pos)
                        end := add(pos, 32)
                    }
                    function abi_encode_tuple_t_stringliteral_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a__to_t_string_memory_ptr__fromStack(headStart) -> tail
                    {
                        tail := add(headStart, 32)
                        mstore(add(headStart, 0), sub(tail, headStart))
                        tail := abi_encode_t_stringliteral_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a_to_t_string_memory_ptr_fromStack(tail)
                    }
                    function require_helper_t_stringliteral_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a(condition)
                    {
                        if iszero(condition)
                        {
                            let memPtr := allocate_unbounded()
                            mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                            let end := abi_encode_tuple_t_stringliteral_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                            revert(memPtr, sub(end, memPtr))
                        }
                    }
                    function convert_t_rational_0_by_1_to_t_uint256(value) -> converted
                    {
                        converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))
                    }
                    /// @ast-id 1026 @src 0:11078:11209  "modifier lock() {..."
                    function modifier_lock_1337(var_liquidity_1339, var_to_1334) -> _119
                    {
                        _119 := var_liquidity_1339
                        /// @src 0:11112:11120  "unlocked"
                        let _120 := read_from_storage_split_offset_0_t_uint256(0x0c)
                        let expr_1010 := _120
                        /// @src 0:11124:11125  "1"
                        let expr_1011 := 0x01
                        /// @src 0:11112:11125  "unlocked == 1"
                        let expr_1012 := eq(cleanup_t_uint256(expr_1010), convert_t_rational_1_by_1_to_t_uint256(expr_1011))
                        /// @src 0:11104:11147  "require(unlocked == 1, \"UniswapV2: LOCKED\")"
                        require_helper_t_stringliteral_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a(expr_1012)
                        /// @src 0:11168:11169  "0"
                        let expr_1017 := 0x00
                        /// @src 0:11157:11169  "unlocked = 0"
                        let _121 := convert_t_rational_0_by_1_to_t_uint256(expr_1017)
                        update_storage_value_offset_0t_uint256_to_t_uint256(0x0c, _121)
                        let expr_1018 := _121
                        /// @src 0:11179:11180  "_"
                        _119 := fun_mint_1352_inner(var_liquidity_1339, var_to_1334)
                        /// @src 0:11201:11202  "1"
                        let expr_1022 := 0x01
                        /// @src 0:11190:11202  "unlocked = 1"
                        let _122 := convert_t_rational_1_by_1_to_t_uint256(expr_1022)
                        update_storage_value_offset_0t_uint256_to_t_uint256(0x0c, _122)
                        let expr_1023 := _122
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function convert_t_contract$_UniswapV2Pair_$1840_to_t_address(value) -> converted
                    {
                        converted := convert_t_uint160_to_t_address(value)
                    }
                    function revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()
                    { revert(0, 0) }
                    function shift_left_224(value) -> newValue
                    { newValue := shl(224, value) }
                    function abi_decode_tuple__fromMemory(headStart, dataEnd)
                    {
                        if slt(sub(dataEnd, headStart), 0)
                        {
                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                        }
                    }
                    /// @src 0:14119:15587  "function mint(address to) external lock returns (uint liquidity) {..."
                    function fun_mint_1352_inner(_123, var_to_1334) -> var_liquidity_1339
                    {
                        var_liquidity_1339 := _123
                        /// @src 0:14346:14350  "this"
                        let expr_1341_address := address()
                        /// @src 0:14346:14354  "this.tmp"
                        let expr_1343_address := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1341_address)
                        let expr_1343_functionSelector := 0xb518a776
                        /// @src 0:14346:14356  "this.tmp()"
                        if iszero(extcodesize(expr_1343_address))
                        {
                            revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()
                        }
                        let _124 := allocate_unbounded()
                        mstore(_124, shift_left_224(expr_1343_functionSelector))
                        let _125 := abi_encode_tuple__to__fromStack(add(_124, 4))
                        let _126 := call(gas(), expr_1343_address, 0, _124, sub(_125, _124), _124, 0)
                        if iszero(_126) { revert_forward_1() }
                        if _126
                        {
                            let _127 := 0
                            if gt(_127, returndatasize()) { _127 := returndatasize() }
                            finalize_allocation(_124, _127)
                            abi_decode_tuple__fromMemory(_124, add(_124, _127))
                        }
                        /// @src 0:14366:14370  "this"
                        let expr_1346_address := address()
                        /// @src 0:14366:14374  "this.tmp"
                        let expr_1348_address := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1346_address)
                        let expr_1348_functionSelector := 0xb518a776
                        /// @src 0:14366:14376  "this.tmp()"
                        if iszero(extcodesize(expr_1348_address))
                        {
                            revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()
                        }
                        let _128 := allocate_unbounded()
                        mstore(_128, shift_left_224(expr_1348_functionSelector))
                        let _129 := abi_encode_tuple__to__fromStack(add(_128, 4))
                        let _130 := call(gas(), expr_1348_address, 0, _128, sub(_129, _128), _128, 0)
                        if iszero(_130) { revert_forward_1() }
                        if _130
                        {
                            let _131 := 0
                            if gt(_131, returndatasize()) { _131 := returndatasize() }
                            finalize_allocation(_128, _131)
                            abi_decode_tuple__fromMemory(_128, add(_128, _131))
                        }
                    }
                    /// @ast-id 1352 @src 0:14119:15587  "function mint(address to) external lock returns (uint liquidity) {..."
                    function fun_mint_1352(var_to_1334) -> var_liquidity_1339
                    {
                        /// @src 0:14168:14182  "uint liquidity"
                        let zero_t_uint256_118 := zero_value_for_split_t_uint256()
                        var_liquidity_1339 := zero_t_uint256_118
                        var_liquidity_1339 := modifier_lock_1337(var_liquidity_1339, var_to_1334)
                    }
                    /// @ast-id 1026 @src 0:11078:11209  "modifier lock() {..."
                    function modifier_lock_1357(var_amount0_1359, var_amount1_1361, var_to_1354) -> _134, _135
                    {
                        _134 := var_amount0_1359
                        _135 := var_amount1_1361
                        /// @src 0:11112:11120  "unlocked"
                        let _136 := read_from_storage_split_offset_0_t_uint256(0x0c)
                        let expr_1010 := _136
                        /// @src 0:11124:11125  "1"
                        let expr_1011 := 0x01
                        /// @src 0:11112:11125  "unlocked == 1"
                        let expr_1012 := eq(cleanup_t_uint256(expr_1010), convert_t_rational_1_by_1_to_t_uint256(expr_1011))
                        /// @src 0:11104:11147  "require(unlocked == 1, \"UniswapV2: LOCKED\")"
                        require_helper_t_stringliteral_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a(expr_1012)
                        /// @src 0:11168:11169  "0"
                        let expr_1017 := 0x00
                        /// @src 0:11157:11169  "unlocked = 0"
                        let _137 := convert_t_rational_0_by_1_to_t_uint256(expr_1017)
                        update_storage_value_offset_0t_uint256_to_t_uint256(0x0c, _137)
                        let expr_1018 := _137
                        /// @src 0:11179:11180  "_"
                        _134, _135 := fun_burn_1523_inner(var_amount0_1359, var_amount1_1361, var_to_1354)
                        /// @src 0:11201:11202  "1"
                        let expr_1022 := 0x01
                        /// @src 0:11190:11202  "unlocked = 1"
                        let _138 := convert_t_rational_1_by_1_to_t_uint256(expr_1022)
                        update_storage_value_offset_0t_uint256_to_t_uint256(0x0c, _138)
                        let expr_1023 := _138
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function convert_t_uint160_to_t_contract$_IERC20_$777(value) -> converted
                    {
                        converted := convert_t_uint160_to_t_uint160(value)
                    }
                    function convert_t_address_to_t_contract$_IERC20_$777(value) -> converted
                    {
                        converted := convert_t_uint160_to_t_contract$_IERC20_$777(value)
                    }
                    function convert_t_contract$_IERC20_$777_to_t_address(value) -> converted
                    {
                        converted := convert_t_uint160_to_t_address(value)
                    }
                    function abi_decode_t_uint256_fromMemory(offset, end) -> value
                    {
                        value := mload(offset)
                        validator_revert_t_uint256(value)
                    }
                    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0
                    {
                        if slt(sub(dataEnd, headStart), 32)
                        {
                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                        }
                        {
                            let offset := 0
                            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
                        }
                    }
                    function panic_error_0x12()
                    {
                        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                        mstore(4, 0x12)
                        revert(0, 0x24)
                    }
                    function checked_div_t_uint256(x, y) -> r
                    {
                        x := cleanup_t_uint256(x)
                        y := cleanup_t_uint256(y)
                        if iszero(y) { panic_error_0x12() }
                        r := div(x, y)
                    }
                    function store_literal_in_memory_57ebfb4dd8b5082cdba0f23c17077e3b0ecb9782a51e0e9a15e9bc8c4b30c562(memPtr)
                    {
                        mstore(add(memPtr, 0), "UniswapV2: INSUFFICIENT_LIQUIDIT")
                        mstore(add(memPtr, 32), "Y_BURNED")
                    }
                    function abi_encode_t_stringliteral_57ebfb4dd8b5082cdba0f23c17077e3b0ecb9782a51e0e9a15e9bc8c4b30c562_to_t_string_memory_ptr_fromStack(pos) -> end
                    {
                        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 40)
                        store_literal_in_memory_57ebfb4dd8b5082cdba0f23c17077e3b0ecb9782a51e0e9a15e9bc8c4b30c562(pos)
                        end := add(pos, 64)
                    }
                    function abi_encode_tuple_t_stringliteral_57ebfb4dd8b5082cdba0f23c17077e3b0ecb9782a51e0e9a15e9bc8c4b30c562__to_t_string_memory_ptr__fromStack(headStart) -> tail
                    {
                        tail := add(headStart, 32)
                        mstore(add(headStart, 0), sub(tail, headStart))
                        tail := abi_encode_t_stringliteral_57ebfb4dd8b5082cdba0f23c17077e3b0ecb9782a51e0e9a15e9bc8c4b30c562_to_t_string_memory_ptr_fromStack(tail)
                    }
                    function require_helper_t_stringliteral_57ebfb4dd8b5082cdba0f23c17077e3b0ecb9782a51e0e9a15e9bc8c4b30c562(condition)
                    {
                        if iszero(condition)
                        {
                            let memPtr := allocate_unbounded()
                            mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                            let end := abi_encode_tuple_t_stringliteral_57ebfb4dd8b5082cdba0f23c17077e3b0ecb9782a51e0e9a15e9bc8c4b30c562__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                            revert(memPtr, sub(end, memPtr))
                        }
                    }
                    function convert_t_uint112_to_t_uint256(value) -> converted
                    {
                        converted := cleanup_t_uint256(identity(cleanup_t_uint112(value)))
                    }
                    /// @src 0:15696:17127  "function burn(..."
                    function fun_burn_1523_inner(_139, _140, var_to_1354) -> var_amount0_1359, var_amount1_1361
                    {
                        var_amount0_1359 := _139
                        var_amount1_1361 := _140
                        /// @src 0:15840:15853  "getReserves()"
                        let expr_1368_component_1, expr_1368_component_2, expr_1368_component_3 := fun_getReserves_1048()
                        /// @src 0:15797:15853  "(uint112 _reserve0, uint112 _reserve1, ) = getReserves()"
                        let var__reserve0_1364 := expr_1368_component_1
                        let var__reserve1_1366 := expr_1368_component_2
                        /// @src 0:15896:15902  "token0"
                        let _141 := read_from_storage_split_offset_0_t_address(0x06)
                        let expr_1372 := _141
                        /// @src 0:15878:15902  "address _token0 = token0"
                        let var__token0_1371 := expr_1372
                        /// @src 0:15945:15951  "token1"
                        let _142 := read_from_storage_split_offset_0_t_address(0x07)
                        let expr_1376 := _142
                        /// @src 0:15927:15951  "address _token1 = token1"
                        let var__token1_1375 := expr_1376
                        /// @src 0:15999:16006  "_token0"
                        let _143 := var__token0_1371
                        let expr_1381 := _143
                        /// @src 0:15992:16007  "IERC20(_token0)"
                        let expr_1382_address := convert_t_address_to_t_contract$_IERC20_$777(expr_1381)
                        /// @src 0:15992:16017  "IERC20(_token0).balanceOf"
                        let expr_1383_address := convert_t_contract$_IERC20_$777_to_t_address(expr_1382_address)
                        let expr_1383_functionSelector := 0x70a08231
                        /// @src 0:16026:16030  "this"
                        let expr_1386_address := address()
                        /// @src 0:16018:16031  "address(this)"
                        let expr_1387 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1386_address)
                        /// @src 0:15992:16032  "IERC20(_token0).balanceOf(address(this))"
                        let _144 := allocate_unbounded()
                        mstore(_144, shift_left_224(expr_1383_functionSelector))
                        let _145 := abi_encode_tuple_t_address__to_t_address__fromStack(add(_144, 4), expr_1387)
                        let _146 := call(gas(), expr_1383_address, 0, _144, sub(_145, _144), _144, 32)
                        if iszero(_146) { revert_forward_1() }
                        let expr_1388
                        if _146
                        {
                            let _147 := 32
                            if gt(_147, returndatasize()) { _147 := returndatasize() }
                            finalize_allocation(_144, _147)
                            expr_1388 := abi_decode_tuple_t_uint256_fromMemory(_144, add(_144, _147))
                        }
                        /// @src 0:15976:16032  "uint balance0 = IERC20(_token0).balanceOf(address(this))"
                        let var_balance0_1379 := expr_1388
                        /// @src 0:16065:16072  "_token1"
                        let _148 := var__token1_1375
                        let expr_1393 := _148
                        /// @src 0:16058:16073  "IERC20(_token1)"
                        let expr_1394_address := convert_t_address_to_t_contract$_IERC20_$777(expr_1393)
                        /// @src 0:16058:16083  "IERC20(_token1).balanceOf"
                        let expr_1395_address := convert_t_contract$_IERC20_$777_to_t_address(expr_1394_address)
                        let expr_1395_functionSelector := 0x70a08231
                        /// @src 0:16092:16096  "this"
                        let expr_1398_address := address()
                        /// @src 0:16084:16097  "address(this)"
                        let expr_1399 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1398_address)
                        /// @src 0:16058:16098  "IERC20(_token1).balanceOf(address(this))"
                        let _149 := allocate_unbounded()
                        mstore(_149, shift_left_224(expr_1395_functionSelector))
                        let _150 := abi_encode_tuple_t_address__to_t_address__fromStack(add(_149, 4), expr_1399)
                        let _151 := call(gas(), expr_1395_address, 0, _149, sub(_150, _149), _149, 32)
                        if iszero(_151) { revert_forward_1() }
                        let expr_1400
                        if _151
                        {
                            let _152 := 32
                            if gt(_152, returndatasize()) { _152 := returndatasize() }
                            finalize_allocation(_149, _152)
                            expr_1400 := abi_decode_tuple_t_uint256_fromMemory(_149, add(_149, _152))
                        }
                        /// @src 0:16042:16098  "uint balance1 = IERC20(_token1).balanceOf(address(this))"
                        let var_balance1_1391 := expr_1400
                        /// @src 0:16125:16134  "balanceOf"
                        let _153 := 0x01
                        let expr_1404 := _153
                        /// @src 0:16143:16147  "this"
                        let expr_1407_address := address()
                        /// @src 0:16135:16148  "address(this)"
                        let expr_1408 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1407_address)
                        /// @src 0:16125:16149  "balanceOf[address(this)]"
                        let _154 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_1404, expr_1408)
                        let _155 := read_from_storage_split_offset_0_t_uint256(_154)
                        let expr_1409 := _155
                        /// @src 0:16108:16149  "uint liquidity = balanceOf[address(this)]"
                        let var_liquidity_1403 := expr_1409
                        /// @src 0:16182:16191  "_reserve0"
                        let _156 := var__reserve0_1364
                        let expr_1414 := _156
                        /// @src 0:16193:16202  "_reserve1"
                        let _157 := var__reserve1_1366
                        let expr_1415 := _157
                        /// @src 0:16173:16203  "_mintFee(_reserve0, _reserve1)"
                        let expr_1416 := fun__mintFee_1328(expr_1414, expr_1415)
                        /// @src 0:16160:16203  "bool feeOn = _mintFee(_reserve0, _reserve1)"
                        let var_feeOn_1412 := expr_1416
                        /// @src 0:16233:16244  "totalSupply"
                        let _158 := read_from_storage_split_offset_0_t_uint256(0x00)
                        let expr_1420 := _158
                        /// @src 0:16213:16244  "uint _totalSupply = totalSupply"
                        let var__totalSupply_1419 := expr_1420
                        /// @src 0:16342:16351  "liquidity"
                        let _159 := var_liquidity_1403
                        let expr_1423 := _159
                        /// @src 0:16342:16355  "liquidity.mul"
                        let expr_1424_self := expr_1423
                        /// @src 0:16356:16364  "balance0"
                        let _160 := var_balance0_1379
                        let expr_1425 := _160
                        /// @src 0:16342:16365  "liquidity.mul(balance0)"
                        let expr_1426 := fun_mul_125(expr_1424_self, expr_1425)
                        /// @src 0:16368:16380  "_totalSupply"
                        let _161 := var__totalSupply_1419
                        let expr_1427 := _161
                        /// @src 0:16342:16380  "liquidity.mul(balance0) / _totalSupply"
                        let expr_1428 := checked_div_t_uint256(expr_1426, expr_1427)
                        /// @src 0:16332:16380  "amount0 = liquidity.mul(balance0) / _totalSupply"
                        var_amount0_1359 := expr_1428
                        let expr_1429 := expr_1428
                        /// @src 0:16448:16457  "liquidity"
                        let _162 := var_liquidity_1403
                        let expr_1432 := _162
                        /// @src 0:16448:16461  "liquidity.mul"
                        let expr_1433_self := expr_1432
                        /// @src 0:16462:16470  "balance1"
                        let _163 := var_balance1_1391
                        let expr_1434 := _163
                        /// @src 0:16448:16471  "liquidity.mul(balance1)"
                        let expr_1435 := fun_mul_125(expr_1433_self, expr_1434)
                        /// @src 0:16474:16486  "_totalSupply"
                        let _164 := var__totalSupply_1419
                        let expr_1436 := _164
                        /// @src 0:16448:16486  "liquidity.mul(balance1) / _totalSupply"
                        let expr_1437 := checked_div_t_uint256(expr_1435, expr_1436)
                        /// @src 0:16438:16486  "amount1 = liquidity.mul(balance1) / _totalSupply"
                        var_amount1_1361 := expr_1437
                        let expr_1438 := expr_1437
                        /// @src 0:16565:16572  "amount0"
                        let _165 := var_amount0_1359
                        let expr_1441 := _165
                        /// @src 0:16575:16576  "0"
                        let expr_1442 := 0x00
                        /// @src 0:16565:16576  "amount0 > 0"
                        let expr_1443 := gt(cleanup_t_uint256(expr_1441), convert_t_rational_0_by_1_to_t_uint256(expr_1442))
                        /// @src 0:16565:16591  "amount0 > 0 && amount1 > 0"
                        let expr_1447 := expr_1443
                        if expr_1447
                        {
                            /// @src 0:16580:16587  "amount1"
                            let _166 := var_amount1_1361
                            let expr_1444 := _166
                            /// @src 0:16590:16591  "0"
                            let expr_1445 := 0x00
                            /// @src 0:16580:16591  "amount1 > 0"
                            let expr_1446 := gt(cleanup_t_uint256(expr_1444), convert_t_rational_0_by_1_to_t_uint256(expr_1445))
                            /// @src 0:16565:16591  "amount0 > 0 && amount1 > 0"
                            expr_1447 := expr_1446
                        }
                        /// @src 0:16544:16657  "require(..."
                        require_helper_t_stringliteral_57ebfb4dd8b5082cdba0f23c17077e3b0ecb9782a51e0e9a15e9bc8c4b30c562(expr_1447)
                        /// @src 0:16681:16685  "this"
                        let expr_1454_address := address()
                        /// @src 0:16673:16686  "address(this)"
                        let expr_1455 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1454_address)
                        /// @src 0:16688:16697  "liquidity"
                        let _167 := var_liquidity_1403
                        let expr_1456 := _167
                        fun__burn_385(expr_1455, expr_1456)
                        /// @src 0:16722:16729  "_token0"
                        let _168 := var__token0_1371
                        let expr_1460 := _168
                        /// @src 0:16731:16733  "to"
                        let _169 := var_to_1354
                        let expr_1461 := _169
                        /// @src 0:16735:16742  "amount0"
                        let _170 := var_amount0_1359
                        let expr_1462 := _170
                        fun__safeTransfer_1066(expr_1460, expr_1461, expr_1462)
                        /// @src 0:16767:16774  "_token1"
                        let _171 := var__token1_1375
                        let expr_1466 := _171
                        /// @src 0:16776:16778  "to"
                        let _172 := var_to_1354
                        let expr_1467 := _172
                        /// @src 0:16780:16787  "amount1"
                        let _173 := var_amount1_1361
                        let expr_1468 := _173
                        fun__safeTransfer_1066(expr_1466, expr_1467, expr_1468)
                        /// @src 0:16816:16823  "_token0"
                        let _174 := var__token0_1371
                        let expr_1473 := _174
                        /// @src 0:16809:16824  "IERC20(_token0)"
                        let expr_1474_address := convert_t_address_to_t_contract$_IERC20_$777(expr_1473)
                        /// @src 0:16809:16834  "IERC20(_token0).balanceOf"
                        let expr_1475_address := convert_t_contract$_IERC20_$777_to_t_address(expr_1474_address)
                        let expr_1475_functionSelector := 0x70a08231
                        /// @src 0:16843:16847  "this"
                        let expr_1478_address := address()
                        /// @src 0:16835:16848  "address(this)"
                        let expr_1479 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1478_address)
                        /// @src 0:16809:16849  "IERC20(_token0).balanceOf(address(this))"
                        let _175 := allocate_unbounded()
                        mstore(_175, shift_left_224(expr_1475_functionSelector))
                        let _176 := abi_encode_tuple_t_address__to_t_address__fromStack(add(_175, 4), expr_1479)
                        let _177 := call(gas(), expr_1475_address, 0, _175, sub(_176, _175), _175, 32)
                        if iszero(_177) { revert_forward_1() }
                        let expr_1480
                        if _177
                        {
                            let _178 := 32
                            if gt(_178, returndatasize()) { _178 := returndatasize() }
                            finalize_allocation(_175, _178)
                            expr_1480 := abi_decode_tuple_t_uint256_fromMemory(_175, add(_175, _178))
                        }
                        /// @src 0:16798:16849  "balance0 = IERC20(_token0).balanceOf(address(this))"
                        var_balance0_1379 := expr_1480
                        let expr_1481 := expr_1480
                        /// @src 0:16877:16884  "_token1"
                        let _179 := var__token1_1375
                        let expr_1485 := _179
                        /// @src 0:16870:16885  "IERC20(_token1)"
                        let expr_1486_address := convert_t_address_to_t_contract$_IERC20_$777(expr_1485)
                        /// @src 0:16870:16895  "IERC20(_token1).balanceOf"
                        let expr_1487_address := convert_t_contract$_IERC20_$777_to_t_address(expr_1486_address)
                        let expr_1487_functionSelector := 0x70a08231
                        /// @src 0:16904:16908  "this"
                        let expr_1490_address := address()
                        /// @src 0:16896:16909  "address(this)"
                        let expr_1491 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1490_address)
                        /// @src 0:16870:16910  "IERC20(_token1).balanceOf(address(this))"
                        let _180 := allocate_unbounded()
                        mstore(_180, shift_left_224(expr_1487_functionSelector))
                        let _181 := abi_encode_tuple_t_address__to_t_address__fromStack(add(_180, 4), expr_1491)
                        let _182 := call(gas(), expr_1487_address, 0, _180, sub(_181, _180), _180, 32)
                        if iszero(_182) { revert_forward_1() }
                        let expr_1492
                        if _182
                        {
                            let _183 := 32
                            if gt(_183, returndatasize()) { _183 := returndatasize() }
                            finalize_allocation(_180, _183)
                            expr_1492 := abi_decode_tuple_t_uint256_fromMemory(_180, add(_180, _183))
                        }
                        /// @src 0:16859:16910  "balance1 = IERC20(_token1).balanceOf(address(this))"
                        var_balance1_1391 := expr_1492
                        let expr_1493 := expr_1492
                        /// @src 0:16929:16937  "balance0"
                        let _184 := var_balance0_1379
                        let expr_1496 := _184
                        /// @src 0:16939:16947  "balance1"
                        let _185 := var_balance1_1391
                        let expr_1497 := _185
                        /// @src 0:16949:16958  "_reserve0"
                        let _186 := var__reserve0_1364
                        let expr_1498 := _186
                        /// @src 0:16960:16969  "_reserve1"
                        let _187 := var__reserve1_1366
                        let expr_1499 := _187
                        fun__update_1220(expr_1496, expr_1497, expr_1498, expr_1499)
                        /// @src 0:16984:16989  "feeOn"
                        let _188 := var_feeOn_1412
                        let expr_1502 := _188
                        /// @src 0:16980:17027  "if (feeOn) kLast = uint(reserve0).mul(reserve1)"
                        if expr_1502
                        {
                            /// @src 0:17004:17012  "reserve0"
                            let _189 := read_from_storage_split_offset_0_t_uint112(0x08)
                            let expr_1506 := _189
                            /// @src 0:16999:17013  "uint(reserve0)"
                            let expr_1507 := convert_t_uint112_to_t_uint256(expr_1506)
                            /// @src 0:16999:17017  "uint(reserve0).mul"
                            let expr_1508_self := expr_1507
                            /// @src 0:17018:17026  "reserve1"
                            let _190 := read_from_storage_split_offset_14_t_uint112(0x08)
                            let expr_1509 := _190
                            /// @src 0:16999:17027  "uint(reserve0).mul(reserve1)"
                            let _191 := convert_t_uint112_to_t_uint256(expr_1509)
                            let expr_1510 := fun_mul_125(expr_1508_self, _191)
                            /// @src 0:16991:17027  "kLast = uint(reserve0).mul(reserve1)"
                            update_storage_value_offset_0t_uint256_to_t_uint256(0x0b, expr_1510)
                            let expr_1511 := expr_1510
                        }
                        /// @src 0:17087:17097  "msg.sender"
                        let expr_1516 := caller()
                        /// @src 0:17099:17106  "amount0"
                        let _192 := var_amount0_1359
                        let expr_1517 := _192
                        /// @src 0:17108:17115  "amount1"
                        let _193 := var_amount1_1361
                        let expr_1518 := _193
                        /// @src 0:17117:17119  "to"
                        let _194 := var_to_1354
                        let expr_1519 := _194
                        /// @src 0:17082:17120  "Burn(msg.sender, amount0, amount1, to)"
                        let _195 := 0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496
                        let _196 := convert_t_address_to_t_address(expr_1516)
                        let _197 := convert_t_address_to_t_address(expr_1519)
                        {
                            let _198 := allocate_unbounded()
                            let _199 := abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack(_198, expr_1517, expr_1518)
                            log3(_198, sub(_199, _198), _195, _196, _197)
                        }
                    }
                    /// @ast-id 1523 @src 0:15696:17127  "function burn(..."
                    function fun_burn_1523(var_to_1354) -> var_amount0_1359, var_amount1_1361
                    {
                        /// @src 0:15759:15771  "uint amount0"
                        let zero_t_uint256_132 := zero_value_for_split_t_uint256()
                        var_amount0_1359 := zero_t_uint256_132
                        /// @src 0:15773:15785  "uint amount1"
                        let zero_t_uint256_133 := zero_value_for_split_t_uint256()
                        var_amount1_1361 := zero_t_uint256_133
                        var_amount0_1359, var_amount1_1361 := modifier_lock_1357(var_amount0_1359, var_amount1_1361, var_to_1354)
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function checked_mul_t_uint256(x, y) -> product
                    {
                        x := cleanup_t_uint256(x)
                        y := cleanup_t_uint256(y)
                        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }
                        product := mul(x, y)
                    }
                    function store_literal_in_memory_25a0ef6406c6af6852555433653ce478274cd9f03a5dec44d001868a76b3bfdd(memPtr)
                    {
                        mstore(add(memPtr, 0), "ds-math-mul-overflow")
                    }
                    function abi_encode_t_stringliteral_25a0ef6406c6af6852555433653ce478274cd9f03a5dec44d001868a76b3bfdd_to_t_string_memory_ptr_fromStack(pos) -> end
                    {
                        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)
                        store_literal_in_memory_25a0ef6406c6af6852555433653ce478274cd9f03a5dec44d001868a76b3bfdd(pos)
                        end := add(pos, 32)
                    }
                    function abi_encode_tuple_t_stringliteral_25a0ef6406c6af6852555433653ce478274cd9f03a5dec44d001868a76b3bfdd__to_t_string_memory_ptr__fromStack(headStart) -> tail
                    {
                        tail := add(headStart, 32)
                        mstore(add(headStart, 0), sub(tail, headStart))
                        tail := abi_encode_t_stringliteral_25a0ef6406c6af6852555433653ce478274cd9f03a5dec44d001868a76b3bfdd_to_t_string_memory_ptr_fromStack(tail)
                    }
                    function require_helper_t_stringliteral_25a0ef6406c6af6852555433653ce478274cd9f03a5dec44d001868a76b3bfdd(condition)
                    {
                        if iszero(condition)
                        {
                            let memPtr := allocate_unbounded()
                            mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                            let end := abi_encode_tuple_t_stringliteral_25a0ef6406c6af6852555433653ce478274cd9f03a5dec44d001868a76b3bfdd__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                            revert(memPtr, sub(end, memPtr))
                        }
                    }
                    /// @ast-id 125 @src 0:1191:1331  "function mul(uint x, uint y) internal pure returns (uint z) {..."
                    function fun_mul_125(var_x_99, var_y_101) -> var_z_104
                    {
                        /// @src 0:1243:1249  "uint z"
                        let zero_t_uint256_200 := zero_value_for_split_t_uint256()
                        var_z_104 := zero_t_uint256_200
                        /// @src 0:1269:1270  "y"
                        let _201 := var_y_101
                        let expr_107 := _201
                        /// @src 0:1274:1275  "0"
                        let expr_108 := 0x00
                        /// @src 0:1269:1275  "y == 0"
                        let expr_109 := eq(cleanup_t_uint256(expr_107), convert_t_rational_0_by_1_to_t_uint256(expr_108))
                        /// @src 0:1269:1299  "y == 0 || (z = x * y) / y == x"
                        let expr_120 := expr_109
                        if iszero(expr_120)
                        {
                            /// @src 0:1284:1285  "x"
                            let _202 := var_x_99
                            let expr_111 := _202
                            /// @src 0:1288:1289  "y"
                            let _203 := var_y_101
                            let expr_112 := _203
                            /// @src 0:1284:1289  "x * y"
                            let expr_113 := checked_mul_t_uint256(expr_111, expr_112)
                            /// @src 0:1280:1289  "z = x * y"
                            var_z_104 := expr_113
                            let expr_114 := expr_113
                            /// @src 0:1279:1290  "(z = x * y)"
                            let expr_115 := expr_114
                            /// @src 0:1293:1294  "y"
                            let _204 := var_y_101
                            let expr_116 := _204
                            /// @src 0:1279:1294  "(z = x * y) / y"
                            let expr_117 := checked_div_t_uint256(expr_115, expr_116)
                            /// @src 0:1298:1299  "x"
                            let _205 := var_x_99
                            let expr_118 := _205
                            /// @src 0:1279:1299  "(z = x * y) / y == x"
                            let expr_119 := eq(cleanup_t_uint256(expr_117), cleanup_t_uint256(expr_118))
                            /// @src 0:1269:1299  "y == 0 || (z = x * y) / y == x"
                            expr_120 := expr_119
                        }
                        /// @src 0:1261:1324  "require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\")"
                        require_helper_t_stringliteral_25a0ef6406c6af6852555433653ce478274cd9f03a5dec44d001868a76b3bfdd(expr_120)
                    }
                    /// @ast-id 385 @src 0:4046:4251  "function _burn(address from, uint value) internal {..."
                    function fun__burn_385(var_from_352, var_value_354)
                    {
                        /// @src 0:4124:4133  "balanceOf"
                        let _206 := 0x01
                        let expr_360 := _206
                        /// @src 0:4134:4138  "from"
                        let _207 := var_from_352
                        let expr_361 := _207
                        /// @src 0:4124:4139  "balanceOf[from]"
                        let _208 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_360, expr_361)
                        let _209 := read_from_storage_split_offset_0_t_uint256(_208)
                        let expr_362 := _209
                        /// @src 0:4124:4143  "balanceOf[from].sub"
                        let expr_363_self := expr_362
                        /// @src 0:4144:4149  "value"
                        let _210 := var_value_354
                        let expr_364 := _210
                        /// @src 0:4124:4150  "balanceOf[from].sub(value)"
                        let expr_365 := fun_sub_97(expr_363_self, expr_364)
                        /// @src 0:4106:4115  "balanceOf"
                        let _211 := 0x01
                        let expr_357 := _211
                        /// @src 0:4116:4120  "from"
                        let _212 := var_from_352
                        let expr_358 := _212
                        /// @src 0:4106:4121  "balanceOf[from]"
                        let _213 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_357, expr_358)
                        /// @src 0:4106:4150  "balanceOf[from] = balanceOf[from].sub(value)"
                        update_storage_value_offset_0t_uint256_to_t_uint256(_213, expr_365)
                        let expr_366 := expr_365
                        /// @src 0:4174:4185  "totalSupply"
                        let _214 := read_from_storage_split_offset_0_t_uint256(0x00)
                        let expr_369 := _214
                        /// @src 0:4174:4189  "totalSupply.sub"
                        let expr_370_self := expr_369
                        /// @src 0:4190:4195  "value"
                        let _215 := var_value_354
                        let expr_371 := _215
                        /// @src 0:4174:4196  "totalSupply.sub(value)"
                        let expr_372 := fun_sub_97(expr_370_self, expr_371)
                        /// @src 0:4160:4196  "totalSupply = totalSupply.sub(value)"
                        update_storage_value_offset_0t_uint256_to_t_uint256(0x00, expr_372)
                        let expr_373 := expr_372
                        /// @src 0:4220:4224  "from"
                        let _216 := var_from_352
                        let expr_376 := _216
                        /// @src 0:4234:4235  "0"
                        let expr_379 := 0x00
                        /// @src 0:4226:4236  "address(0)"
                        let expr_380 := convert_t_rational_0_by_1_to_t_address(expr_379)
                        /// @src 0:4238:4243  "value"
                        let _217 := var_value_354
                        let expr_381 := _217
                        /// @src 0:4211:4244  "Transfer(from, address(0), value)"
                        let _218 := 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
                        let _219 := convert_t_address_to_t_address(expr_376)
                        let _220 := convert_t_address_to_t_address(expr_380)
                        {
                            let _221 := allocate_unbounded()
                            let _222 := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(_221, expr_381)
                            log3(_221, sub(_222, _221), _218, _219, _220)
                        }
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function validator_revert_t_bool(value)
                    {
                        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }
                    }
                    function abi_decode_t_bool_fromMemory(offset, end) -> value
                    {
                        value := mload(offset)
                        validator_revert_t_bool(value)
                    }
                    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0
                    {
                        if slt(sub(dataEnd, headStart), 32)
                        {
                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                        }
                        {
                            let offset := 0
                            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)
                        }
                    }
                    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack(headStart, value0, value1) -> tail
                    {
                        tail := add(headStart, 64)
                        abi_encode_t_address_to_t_address_fromStack(value0, add(headStart, 0))
                        abi_encode_t_uint256_to_t_uint256_fromStack(value1, add(headStart, 32))
                    }
                    /// @ast-id 1066 @src 0:11509:11629  "function _safeTransfer(address token, address to, uint value) private {..."
                    function fun__safeTransfer_1066(var_token_1050, var_to_1052, var_value_1054)
                    {
                        /// @src 0:11596:11601  "token"
                        let _223 := var_token_1050
                        let expr_1058 := _223
                        /// @src 0:11589:11602  "IERC20(token)"
                        let expr_1059_address := convert_t_address_to_t_contract$_IERC20_$777(expr_1058)
                        /// @src 0:11589:11611  "IERC20(token).transfer"
                        let expr_1060_address := convert_t_contract$_IERC20_$777_to_t_address(expr_1059_address)
                        let expr_1060_functionSelector := 0xa9059cbb
                        /// @src 0:11612:11614  "to"
                        let _224 := var_to_1052
                        let expr_1061 := _224
                        /// @src 0:11616:11621  "value"
                        let _225 := var_value_1054
                        let expr_1062 := _225
                        /// @src 0:11589:11622  "IERC20(token).transfer(to, value)"
                        let _226 := allocate_unbounded()
                        mstore(_226, shift_left_224(expr_1060_functionSelector))
                        let _227 := abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack(add(_226, 4), expr_1061, expr_1062)
                        let _228 := call(gas(), expr_1060_address, 0, _226, sub(_227, _226), _226, 32)
                        if iszero(_228) { revert_forward_1() }
                        let expr_1063
                        if _228
                        {
                            let _229 := 32
                            if gt(_229, returndatasize()) { _229 := returndatasize() }
                            finalize_allocation(_226, _229)
                            expr_1063 := abi_decode_tuple_t_bool_fromMemory(_226, add(_226, _229))
                        }
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function cleanup_t_int112(value) -> cleaned
                    {
                        cleaned := signextend(13, value)
                    }
                    function convert_t_rational_minus_1_by_1_to_t_int112(value) -> converted
                    {
                        converted := cleanup_t_int112(identity(cleanup_t_rational_minus_1_by_1(value)))
                    }
                    function convert_t_int112_to_t_uint112(value) -> converted
                    {
                        converted := cleanup_t_uint112(identity(cleanup_t_int112(value)))
                    }
                    function store_literal_in_memory_a5d1f08cd66a1a59e841a286c7f2c877311b5d331d2315cd2fe3c5f05e833928(memPtr)
                    {
                        mstore(add(memPtr, 0), "UniswapV2: OVERFLOW")
                    }
                    function abi_encode_t_stringliteral_a5d1f08cd66a1a59e841a286c7f2c877311b5d331d2315cd2fe3c5f05e833928_to_t_string_memory_ptr_fromStack(pos) -> end
                    {
                        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 19)
                        store_literal_in_memory_a5d1f08cd66a1a59e841a286c7f2c877311b5d331d2315cd2fe3c5f05e833928(pos)
                        end := add(pos, 32)
                    }
                    function abi_encode_tuple_t_stringliteral_a5d1f08cd66a1a59e841a286c7f2c877311b5d331d2315cd2fe3c5f05e833928__to_t_string_memory_ptr__fromStack(headStart) -> tail
                    {
                        tail := add(headStart, 32)
                        mstore(add(headStart, 0), sub(tail, headStart))
                        tail := abi_encode_t_stringliteral_a5d1f08cd66a1a59e841a286c7f2c877311b5d331d2315cd2fe3c5f05e833928_to_t_string_memory_ptr_fromStack(tail)
                    }
                    function require_helper_t_stringliteral_a5d1f08cd66a1a59e841a286c7f2c877311b5d331d2315cd2fe3c5f05e833928(condition)
                    {
                        if iszero(condition)
                        {
                            let memPtr := allocate_unbounded()
                            mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                            let end := abi_encode_tuple_t_stringliteral_a5d1f08cd66a1a59e841a286c7f2c877311b5d331d2315cd2fe3c5f05e833928__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                            revert(memPtr, sub(end, memPtr))
                        }
                    }
                    function cleanup_t_rational_4294967296_by_1(value) -> cleaned
                    { cleaned := value }
                    function convert_t_rational_4294967296_by_1_to_t_uint256(value) -> converted
                    {
                        converted := cleanup_t_uint256(identity(cleanup_t_rational_4294967296_by_1(value)))
                    }
                    function mod_t_uint256(x, y) -> r
                    {
                        x := cleanup_t_uint256(x)
                        y := cleanup_t_uint256(y)
                        if iszero(y) { panic_error_0x12() }
                        r := mod(x, y)
                    }
                    function convert_t_uint256_to_t_uint32(value) -> converted
                    {
                        converted := cleanup_t_uint32(identity(cleanup_t_uint256(value)))
                    }
                    function checked_sub_t_uint32(x, y) -> diff
                    {
                        x := cleanup_t_uint32(x)
                        y := cleanup_t_uint32(y)
                        diff := sub(x, y)
                        if gt(diff, 0xffffffff) { panic_error_0x11() }
                    }
                    function convert_t_rational_0_by_1_to_t_uint32(value) -> converted
                    {
                        converted := cleanup_t_uint32(identity(cleanup_t_rational_0_by_1(value)))
                    }
                    function convert_t_rational_0_by_1_to_t_uint112(value) -> converted
                    {
                        converted := cleanup_t_uint112(identity(cleanup_t_rational_0_by_1(value)))
                    }
                    function cleanup_t_uint224(value) -> cleaned
                    {
                        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
                    }
                    function convert_t_uint224_to_t_uint256(value) -> converted
                    {
                        converted := cleanup_t_uint256(identity(cleanup_t_uint224(value)))
                    }
                    function convert_t_uint32_to_t_uint256(value) -> converted
                    {
                        converted := cleanup_t_uint256(identity(cleanup_t_uint32(value)))
                    }
                    function convert_t_uint256_to_t_uint112(value) -> converted
                    {
                        converted := cleanup_t_uint112(identity(cleanup_t_uint256(value)))
                    }
                    function update_byte_slice_14_shift_0(value, toInsert) -> result
                    {
                        let mask := 0xffffffffffffffffffffffffffff
                        toInsert := shift_left_0(toInsert)
                        value := and(value, not(mask))
                        result := or(value, and(toInsert, mask))
                    }
                    function convert_t_uint112_to_t_uint112(value) -> converted
                    {
                        converted := cleanup_t_uint112(identity(cleanup_t_uint112(value)))
                    }
                    function prepare_store_t_uint112(value) -> ret
                    { ret := value }
                    function update_storage_value_offset_0t_uint112_to_t_uint112(slot, value_0)
                    {
                        let convertedValue_0 := convert_t_uint112_to_t_uint112(value_0)
                        sstore(slot, update_byte_slice_14_shift_0(sload(slot), prepare_store_t_uint112(convertedValue_0)))
                    }
                    function shift_left_112(value) -> newValue
                    { newValue := shl(112, value) }
                    function update_byte_slice_14_shift_14(value, toInsert) -> result
                    {
                        let mask := 0xffffffffffffffffffffffffffff0000000000000000000000000000
                        toInsert := shift_left_112(toInsert)
                        value := and(value, not(mask))
                        result := or(value, and(toInsert, mask))
                    }
                    function update_storage_value_offset_14t_uint112_to_t_uint112(slot, value_0)
                    {
                        let convertedValue_0 := convert_t_uint112_to_t_uint112(value_0)
                        sstore(slot, update_byte_slice_14_shift_14(sload(slot), prepare_store_t_uint112(convertedValue_0)))
                    }
                    function update_byte_slice_4_shift_28(value, toInsert) -> result
                    {
                        let mask := 0xffffffff00000000000000000000000000000000000000000000000000000000
                        toInsert := shift_left_224(toInsert)
                        value := and(value, not(mask))
                        result := or(value, and(toInsert, mask))
                    }
                    function convert_t_uint32_to_t_uint32(value) -> converted
                    {
                        converted := cleanup_t_uint32(identity(cleanup_t_uint32(value)))
                    }
                    function prepare_store_t_uint32(value) -> ret
                    { ret := value }
                    function update_storage_value_offset_28t_uint32_to_t_uint32(slot, value_0)
                    {
                        let convertedValue_0 := convert_t_uint32_to_t_uint32(value_0)
                        sstore(slot, update_byte_slice_4_shift_28(sload(slot), prepare_store_t_uint32(convertedValue_0)))
                    }
                    function abi_encode_tuple_t_uint112_t_uint112__to_t_uint112_t_uint112__fromStack(headStart, value0, value1) -> tail
                    {
                        tail := add(headStart, 64)
                        abi_encode_t_uint112_to_t_uint112_fromStack(value0, add(headStart, 0))
                        abi_encode_t_uint112_to_t_uint112_fromStack(value1, add(headStart, 32))
                    }
                    /// @ast-id 1220 @src 0:12043:13044  "function _update(..."
                    function fun__update_1220(var_balance0_1101, var_balance1_1103, var__reserve0_1105, var__reserve1_1107)
                    {
                        /// @src 0:12205:12213  "balance0"
                        let _230 := var_balance0_1101
                        let expr_1111 := _230
                        /// @src 0:12232:12234  "-1"
                        let expr_1117 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                        /// @src 0:12225:12235  "int112(-1)"
                        let expr_1118 := convert_t_rational_minus_1_by_1_to_t_int112(expr_1117)
                        /// @src 0:12217:12236  "uint112(int112(-1))"
                        let expr_1119 := convert_t_int112_to_t_uint112(expr_1118)
                        /// @src 0:12205:12236  "balance0 <= uint112(int112(-1))"
                        let expr_1120 := iszero(gt(cleanup_t_uint256(expr_1111), convert_t_uint112_to_t_uint256(expr_1119)))
                        /// @src 0:12205:12271  "balance0 <= uint112(int112(-1)) && balance1 <= uint112(int112(-1))"
                        let expr_1131 := expr_1120
                        if expr_1131
                        {
                            /// @src 0:12240:12248  "balance1"
                            let _231 := var_balance1_1103
                            let expr_1121 := _231
                            /// @src 0:12267:12269  "-1"
                            let expr_1127 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                            /// @src 0:12260:12270  "int112(-1)"
                            let expr_1128 := convert_t_rational_minus_1_by_1_to_t_int112(expr_1127)
                            /// @src 0:12252:12271  "uint112(int112(-1))"
                            let expr_1129 := convert_t_int112_to_t_uint112(expr_1128)
                            /// @src 0:12240:12271  "balance1 <= uint112(int112(-1))"
                            let expr_1130 := iszero(gt(cleanup_t_uint256(expr_1121), convert_t_uint112_to_t_uint256(expr_1129)))
                            /// @src 0:12205:12271  "balance0 <= uint112(int112(-1)) && balance1 <= uint112(int112(-1))"
                            expr_1131 := expr_1130
                        }
                        /// @src 0:12184:12316  "require(..."
                        require_helper_t_stringliteral_a5d1f08cd66a1a59e841a286c7f2c877311b5d331d2315cd2fe3c5f05e833928(expr_1131)
                        /// @src 0:12357:12372  "block.timestamp"
                        let expr_1140 := timestamp()
                        /// @src 0:12375:12382  "2 ** 32"
                        let expr_1143 := 0x0100000000
                        /// @src 0:12357:12382  "block.timestamp % 2 ** 32"
                        let expr_1144 := mod_t_uint256(expr_1140, convert_t_rational_4294967296_by_1_to_t_uint256(expr_1143))
                        /// @src 0:12350:12383  "uint32(block.timestamp % 2 ** 32)"
                        let expr_1145 := convert_t_uint256_to_t_uint32(expr_1144)
                        /// @src 0:12326:12383  "uint32 blockTimestamp = uint32(block.timestamp % 2 ** 32)"
                        let var_blockTimestamp_1136 := expr_1145
                        /// @src 0:12414:12428  "blockTimestamp"
                        let _232 := var_blockTimestamp_1136
                        let expr_1149 := _232
                        /// @src 0:12431:12449  "blockTimestampLast"
                        let _233 := read_from_storage_split_offset_28_t_uint32(0x08)
                        let expr_1150 := _233
                        /// @src 0:12414:12449  "blockTimestamp - blockTimestampLast"
                        let expr_1151 := checked_sub_t_uint32(expr_1149, expr_1150)
                        /// @src 0:12393:12449  "uint32 timeElapsed = blockTimestamp - blockTimestampLast"
                        let var_timeElapsed_1148 := expr_1151
                        /// @src 0:12486:12497  "timeElapsed"
                        let _234 := var_timeElapsed_1148
                        let expr_1153 := _234
                        /// @src 0:12500:12501  "0"
                        let expr_1154 := 0x00
                        /// @src 0:12486:12501  "timeElapsed > 0"
                        let expr_1155 := gt(cleanup_t_uint32(expr_1153), convert_t_rational_0_by_1_to_t_uint32(expr_1154))
                        /// @src 0:12486:12519  "timeElapsed > 0 && _reserve0 != 0"
                        let expr_1159 := expr_1155
                        if expr_1159
                        {
                            /// @src 0:12505:12514  "_reserve0"
                            let _235 := var__reserve0_1105
                            let expr_1156 := _235
                            /// @src 0:12518:12519  "0"
                            let expr_1157 := 0x00
                            /// @src 0:12505:12519  "_reserve0 != 0"
                            let expr_1158 := iszero(eq(cleanup_t_uint112(expr_1156), convert_t_rational_0_by_1_to_t_uint112(expr_1157)))
                            /// @src 0:12486:12519  "timeElapsed > 0 && _reserve0 != 0"
                            expr_1159 := expr_1158
                        }
                        /// @src 0:12486:12537  "timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0"
                        let expr_1163 := expr_1159
                        if expr_1163
                        {
                            /// @src 0:12523:12532  "_reserve1"
                            let _236 := var__reserve1_1107
                            let expr_1160 := _236
                            /// @src 0:12536:12537  "0"
                            let expr_1161 := 0x00
                            /// @src 0:12523:12537  "_reserve1 != 0"
                            let expr_1162 := iszero(eq(cleanup_t_uint112(expr_1160), convert_t_rational_0_by_1_to_t_uint112(expr_1161)))
                            /// @src 0:12486:12537  "timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0"
                            expr_1163 := expr_1162
                        }
                        /// @src 0:12482:12878  "if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {..."
                        if expr_1163
                        {
                            /// @src 0:12658:12667  "UQ112x112"
                            let expr_1167_address := linkersymbol("UniswapV2Factory.sol:UQ112x112")
                            /// @src 0:12675:12684  "_reserve1"
                            let _237 := var__reserve1_1107
                            let expr_1169 := _237
                            /// @src 0:12658:12685  "UQ112x112.encode(_reserve1)"
                            let expr_1170 := fun_encode_800(expr_1169)
                            /// @src 0:12658:12691  "UQ112x112.encode(_reserve1).uqdiv"
                            let expr_1171_self := expr_1170
                            /// @src 0:12692:12701  "_reserve0"
                            let _238 := var__reserve0_1105
                            let expr_1172 := _238
                            /// @src 0:12658:12702  "UQ112x112.encode(_reserve1).uqdiv(_reserve0)"
                            let expr_1173 := fun_uqdiv_819(expr_1171_self, expr_1172)
                            /// @src 0:12653:12703  "uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0))"
                            let expr_1174 := convert_t_uint224_to_t_uint256(expr_1173)
                            /// @src 0:12722:12733  "timeElapsed"
                            let _239 := var_timeElapsed_1148
                            let expr_1175 := _239
                            /// @src 0:12653:12733  "uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) *..."
                            let expr_1176 := checked_mul_t_uint256(expr_1174, convert_t_uint32_to_t_uint256(expr_1175))
                            /// @src 0:12613:12733  "price0CumulativeLast +=..."
                            let _240 := read_from_storage_split_offset_0_t_uint256(0x09)
                            let expr_1177 := checked_add_t_uint256(_240, expr_1176)
                            update_storage_value_offset_0t_uint256_to_t_uint256(0x09, expr_1177)
                            /// @src 0:12792:12801  "UQ112x112"
                            let expr_1182_address := linkersymbol("UniswapV2Factory.sol:UQ112x112")
                            /// @src 0:12809:12818  "_reserve0"
                            let _241 := var__reserve0_1105
                            let expr_1184 := _241
                            /// @src 0:12792:12819  "UQ112x112.encode(_reserve0)"
                            let expr_1185 := fun_encode_800(expr_1184)
                            /// @src 0:12792:12825  "UQ112x112.encode(_reserve0).uqdiv"
                            let expr_1186_self := expr_1185
                            /// @src 0:12826:12835  "_reserve1"
                            let _242 := var__reserve1_1107
                            let expr_1187 := _242
                            /// @src 0:12792:12836  "UQ112x112.encode(_reserve0).uqdiv(_reserve1)"
                            let expr_1188 := fun_uqdiv_819(expr_1186_self, expr_1187)
                            /// @src 0:12787:12837  "uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1))"
                            let expr_1189 := convert_t_uint224_to_t_uint256(expr_1188)
                            /// @src 0:12856:12867  "timeElapsed"
                            let _243 := var_timeElapsed_1148
                            let expr_1190 := _243
                            /// @src 0:12787:12867  "uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) *..."
                            let expr_1191 := checked_mul_t_uint256(expr_1189, convert_t_uint32_to_t_uint256(expr_1190))
                            /// @src 0:12747:12867  "price1CumulativeLast +=..."
                            let _244 := read_from_storage_split_offset_0_t_uint256(0x0a)
                            let expr_1192 := checked_add_t_uint256(_244, expr_1191)
                            update_storage_value_offset_0t_uint256_to_t_uint256(0x0a, expr_1192)
                        }
                        /// @src 0:12906:12914  "balance0"
                        let _245 := var_balance0_1101
                        let expr_1199 := _245
                        /// @src 0:12898:12915  "uint112(balance0)"
                        let expr_1200 := convert_t_uint256_to_t_uint112(expr_1199)
                        /// @src 0:12887:12915  "reserve0 = uint112(balance0)"
                        update_storage_value_offset_0t_uint112_to_t_uint112(0x08, expr_1200)
                        let expr_1201 := expr_1200
                        /// @src 0:12944:12952  "balance1"
                        let _246 := var_balance1_1103
                        let expr_1206 := _246
                        /// @src 0:12936:12953  "uint112(balance1)"
                        let expr_1207 := convert_t_uint256_to_t_uint112(expr_1206)
                        /// @src 0:12925:12953  "reserve1 = uint112(balance1)"
                        update_storage_value_offset_14t_uint112_to_t_uint112(0x08, expr_1207)
                        let expr_1208 := expr_1207
                        /// @src 0:12984:12998  "blockTimestamp"
                        let _247 := var_blockTimestamp_1136
                        let expr_1211 := _247
                        /// @src 0:12963:12998  "blockTimestampLast = blockTimestamp"
                        update_storage_value_offset_28t_uint32_to_t_uint32(0x08, expr_1211)
                        let expr_1212 := expr_1211
                        /// @src 0:13018:13026  "reserve0"
                        let _248 := read_from_storage_split_offset_0_t_uint112(0x08)
                        let expr_1215 := _248
                        /// @src 0:13028:13036  "reserve1"
                        let _249 := read_from_storage_split_offset_14_t_uint112(0x08)
                        let expr_1216 := _249
                        /// @src 0:13013:13037  "Sync(reserve0, reserve1)"
                        let _250 := 0x1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1
                        {
                            let _251 := allocate_unbounded()
                            let _252 := abi_encode_tuple_t_uint112_t_uint112__to_t_uint112_t_uint112__fromStack(_251, expr_1215, expr_1216)
                            log1(_251, sub(_252, _251), _250)
                        }
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function zero_value_for_split_t_uint224() -> ret
                    { ret := 0 }
                    function convert_t_uint112_to_t_uint224(value) -> converted
                    {
                        converted := cleanup_t_uint224(identity(cleanup_t_uint112(value)))
                    }
                    function cleanup_t_rational_5192296858534827628530496329220096_by_1(value) -> cleaned
                    { cleaned := value }
                    function convert_t_rational_5192296858534827628530496329220096_by_1_to_t_uint224(value) -> converted
                    {
                        converted := cleanup_t_uint224(identity(cleanup_t_rational_5192296858534827628530496329220096_by_1(value)))
                    }
                    /// @src 0:8068:8100  "uint224 constant Q112 = 2 ** 112"
                    function constant_Q112_783() -> ret
                    {
                        /// @src 0:8092:8100  "2 ** 112"
                        let expr_782 := 0x010000000000000000000000000000
                        let _255 := convert_t_rational_5192296858534827628530496329220096_by_1_to_t_uint224(expr_782)
                        ret := _255
                    }
                    function checked_mul_t_uint224(x, y) -> product
                    {
                        x := cleanup_t_uint224(x)
                        y := cleanup_t_uint224(y)
                        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }
                        product := mul(x, y)
                    }
                    /// @ast-id 800 @src 0:8146:8264  "function encode(uint112 y) internal pure returns (uint224 z) {..."
                    function fun_encode_800(var_y_785) -> var_z_788
                    {
                        /// @src 0:8196:8205  "uint224 z"
                        let zero_t_uint224_253 := zero_value_for_split_t_uint224()
                        var_z_788 := zero_t_uint224_253
                        /// @src 0:8229:8230  "y"
                        let _254 := var_y_785
                        let expr_793 := _254
                        /// @src 0:8221:8231  "uint224(y)"
                        let expr_794 := convert_t_uint112_to_t_uint224(expr_793)
                        /// @src 0:8234:8238  "Q112"
                        let expr_795 := constant_Q112_783()
                        /// @src 0:8221:8238  "uint224(y) * Q112"
                        let expr_796 := checked_mul_t_uint224(expr_794, expr_795)
                        /// @src 0:8217:8238  "z = uint224(y) * Q112"
                        var_z_788 := expr_796
                        let expr_797 := expr_796
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function checked_div_t_uint224(x, y) -> r
                    {
                        x := cleanup_t_uint224(x)
                        y := cleanup_t_uint224(y)
                        if iszero(y) { panic_error_0x12() }
                        r := div(x, y)
                    }
                    /// @ast-id 819 @src 0:8332:8438  "function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {..."
                    function fun_uqdiv_819(var_x_802, var_y_804) -> var_z_807
                    {
                        /// @src 0:8392:8401  "uint224 z"
                        let zero_t_uint224_256 := zero_value_for_split_t_uint224()
                        var_z_807 := zero_t_uint224_256
                        /// @src 0:8417:8418  "x"
                        let _257 := var_x_802
                        let expr_810 := _257
                        /// @src 0:8429:8430  "y"
                        let _258 := var_y_804
                        let expr_813 := _258
                        /// @src 0:8421:8431  "uint224(y)"
                        let expr_814 := convert_t_uint112_to_t_uint224(expr_813)
                        /// @src 0:8417:8431  "x / uint224(y)"
                        let expr_815 := checked_div_t_uint224(expr_810, expr_814)
                        /// @src 0:8413:8431  "z = x / uint224(y)"
                        var_z_807 := expr_815
                        let expr_816 := expr_815
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function convert_t_uint160_to_t_contract$_IUniswapV2Factory_$52(value) -> converted
                    {
                        converted := convert_t_uint160_to_t_uint160(value)
                    }
                    function convert_t_address_to_t_contract$_IUniswapV2Factory_$52(value) -> converted
                    {
                        converted := convert_t_uint160_to_t_contract$_IUniswapV2Factory_$52(value)
                    }
                    function convert_t_contract$_IUniswapV2Factory_$52_to_t_address(value) -> converted
                    {
                        converted := convert_t_uint160_to_t_address(value)
                    }
                    function abi_decode_t_address_fromMemory(offset, end) -> value
                    {
                        value := mload(offset)
                        validator_revert_t_address(value)
                    }
                    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0
                    {
                        if slt(sub(dataEnd, headStart), 32)
                        {
                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                        }
                        {
                            let offset := 0
                            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)
                        }
                    }
                    function cleanup_t_rational_5_by_1(value) -> cleaned
                    { cleaned := value }
                    function convert_t_rational_5_by_1_to_t_uint256(value) -> converted
                    {
                        converted := cleanup_t_uint256(identity(cleanup_t_rational_5_by_1(value)))
                    }
                    /// @ast-id 1328 @src 0:13131:13972  "function _mintFee(..."
                    function fun__mintFee_1328(var__reserve0_1222, var__reserve1_1224) -> var_feeOn_1227
                    {
                        /// @src 0:13226:13236  "bool feeOn"
                        let zero_t_bool_259 := zero_value_for_split_t_bool()
                        var_feeOn_1227 := zero_t_bool_259
                        /// @src 0:13282:13289  "factory"
                        let _260 := read_from_storage_split_offset_0_t_address(0x05)
                        let expr_1232 := _260
                        /// @src 0:13264:13290  "IUniswapV2Factory(factory)"
                        let expr_1233_address := convert_t_address_to_t_contract$_IUniswapV2Factory_$52(expr_1232)
                        /// @src 0:13264:13296  "IUniswapV2Factory(factory).feeTo"
                        let expr_1234_address := convert_t_contract$_IUniswapV2Factory_$52_to_t_address(expr_1233_address)
                        let expr_1234_functionSelector := 0x017e7e58
                        /// @src 0:13264:13298  "IUniswapV2Factory(factory).feeTo()"
                        let _261 := allocate_unbounded()
                        mstore(_261, shift_left_224(expr_1234_functionSelector))
                        let _262 := abi_encode_tuple__to__fromStack(add(_261, 4))
                        let _263 := call(gas(), expr_1234_address, 0, _261, sub(_262, _261), _261, 32)
                        if iszero(_263) { revert_forward_1() }
                        let expr_1235
                        if _263
                        {
                            let _264 := 32
                            if gt(_264, returndatasize()) { _264 := returndatasize() }
                            finalize_allocation(_261, _264)
                            expr_1235 := abi_decode_tuple_t_address_fromMemory(_261, add(_261, _264))
                        }
                        /// @src 0:13248:13298  "address feeTo = IUniswapV2Factory(factory).feeTo()"
                        let var_feeTo_1230 := expr_1235
                        /// @src 0:13316:13321  "feeTo"
                        let _265 := var_feeTo_1230
                        let expr_1238 := _265
                        /// @src 0:13333:13334  "0"
                        let expr_1241 := 0x00
                        /// @src 0:13325:13335  "address(0)"
                        let expr_1242 := convert_t_rational_0_by_1_to_t_address(expr_1241)
                        /// @src 0:13316:13335  "feeTo != address(0)"
                        let expr_1243 := iszero(eq(cleanup_t_address(expr_1238), cleanup_t_address(expr_1242)))
                        /// @src 0:13308:13335  "feeOn = feeTo != address(0)"
                        var_feeOn_1227 := expr_1243
                        let expr_1244 := expr_1243
                        /// @src 0:13359:13364  "kLast"
                        let _266 := read_from_storage_split_offset_0_t_uint256(0x0b)
                        let expr_1248 := _266
                        /// @src 0:13345:13364  "uint _kLast = kLast"
                        let var__kLast_1247 := expr_1248
                        /// @src 0:13393:13398  "feeOn"
                        let _267 := var_feeOn_1227
                        let expr_1250 := _267
                        /// @src 0:13389:13966  "if (feeOn) {..."
                        switch expr_1250
                        case 0 {
                            /// @src 0:13919:13925  "_kLast"
                            let _268 := var__kLast_1247
                            let expr_1317 := _268
                            /// @src 0:13929:13930  "0"
                            let expr_1318 := 0x00
                            /// @src 0:13919:13930  "_kLast != 0"
                            let expr_1319 := iszero(eq(cleanup_t_uint256(expr_1317), convert_t_rational_0_by_1_to_t_uint256(expr_1318)))
                            /// @src 0:13915:13966  "if (_kLast != 0) {..."
                            if expr_1319
                            {
                                /// @src 0:13954:13955  "0"
                                let expr_1321 := 0x00
                                /// @src 0:13946:13955  "kLast = 0"
                                let _269 := convert_t_rational_0_by_1_to_t_uint256(expr_1321)
                                update_storage_value_offset_0t_uint256_to_t_uint256(0x0b, _269)
                                let expr_1322 := _269
                            }
                        }
                        default /// @src 0:13389:13966  "if (feeOn) {..."
                        {
                            /// @src 0:13418:13424  "_kLast"
                            let _270 := var__kLast_1247
                            let expr_1251 := _270
                            /// @src 0:13428:13429  "0"
                            let expr_1252 := 0x00
                            /// @src 0:13418:13429  "_kLast != 0"
                            let expr_1253 := iszero(eq(cleanup_t_uint256(expr_1251), convert_t_rational_0_by_1_to_t_uint256(expr_1252)))
                            /// @src 0:13414:13899  "if (_kLast != 0) {..."
                            if expr_1253
                            {
                                /// @src 0:13462:13466  "Math"
                                let expr_1256_address := linkersymbol("UniswapV2Factory.sol:Math")
                                /// @src 0:13477:13486  "_reserve0"
                                let _271 := var__reserve0_1222
                                let expr_1260 := _271
                                /// @src 0:13472:13487  "uint(_reserve0)"
                                let expr_1261 := convert_t_uint112_to_t_uint256(expr_1260)
                                /// @src 0:13472:13491  "uint(_reserve0).mul"
                                let expr_1262_self := expr_1261
                                /// @src 0:13492:13501  "_reserve1"
                                let _272 := var__reserve1_1224
                                let expr_1263 := _272
                                /// @src 0:13472:13502  "uint(_reserve0).mul(_reserve1)"
                                let _273 := convert_t_uint112_to_t_uint256(expr_1263)
                                let expr_1264 := fun_mul_125(expr_1262_self, _273)
                                /// @src 0:13462:13503  "Math.sqrt(uint(_reserve0).mul(_reserve1))"
                                let expr_1265 := fun_sqrt_693(expr_1264)
                                /// @src 0:13449:13503  "uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1))"
                                let var_rootK_1255 := expr_1265
                                /// @src 0:13538:13542  "Math"
                                let expr_1269_address := linkersymbol("UniswapV2Factory.sol:Math")
                                /// @src 0:13548:13554  "_kLast"
                                let _274 := var__kLast_1247
                                let expr_1271 := _274
                                /// @src 0:13538:13555  "Math.sqrt(_kLast)"
                                let expr_1272 := fun_sqrt_693(expr_1271)
                                /// @src 0:13521:13555  "uint rootKLast = Math.sqrt(_kLast)"
                                let var_rootKLast_1268 := expr_1272
                                /// @src 0:13577:13582  "rootK"
                                let _275 := var_rootK_1255
                                let expr_1274 := _275
                                /// @src 0:13585:13594  "rootKLast"
                                let _276 := var_rootKLast_1268
                                let expr_1275 := _276
                                /// @src 0:13577:13594  "rootK > rootKLast"
                                let expr_1276 := gt(cleanup_t_uint256(expr_1274), cleanup_t_uint256(expr_1275))
                                /// @src 0:13573:13885  "if (rootK > rootKLast) {..."
                                if expr_1276
                                {
                                    /// @src 0:13635:13646  "totalSupply"
                                    let _277 := read_from_storage_split_offset_0_t_uint256(0x00)
                                    let expr_1279 := _277
                                    /// @src 0:13635:13650  "totalSupply.mul"
                                    let expr_1280_self := expr_1279
                                    /// @src 0:13651:13656  "rootK"
                                    let _278 := var_rootK_1255
                                    let expr_1281 := _278
                                    /// @src 0:13651:13660  "rootK.sub"
                                    let expr_1282_self := expr_1281
                                    /// @src 0:13661:13670  "rootKLast"
                                    let _279 := var_rootKLast_1268
                                    let expr_1283 := _279
                                    /// @src 0:13651:13671  "rootK.sub(rootKLast)"
                                    let expr_1284 := fun_sub_97(expr_1282_self, expr_1283)
                                    /// @src 0:13635:13672  "totalSupply.mul(rootK.sub(rootKLast))"
                                    let expr_1285 := fun_mul_125(expr_1280_self, expr_1284)
                                    /// @src 0:13618:13672  "uint numerator = totalSupply.mul(rootK.sub(rootKLast))"
                                    let var_numerator_1278 := expr_1285
                                    /// @src 0:13713:13718  "rootK"
                                    let _280 := var_rootK_1255
                                    let expr_1289 := _280
                                    /// @src 0:13713:13722  "rootK.mul"
                                    let expr_1290_self := expr_1289
                                    /// @src 0:13723:13724  "5"
                                    let expr_1291 := 0x05
                                    /// @src 0:13713:13725  "rootK.mul(5)"
                                    let _281 := convert_t_rational_5_by_1_to_t_uint256(expr_1291)
                                    let expr_1292 := fun_mul_125(expr_1290_self, _281)
                                    /// @src 0:13713:13729  "rootK.mul(5).add"
                                    let expr_1293_self := expr_1292
                                    /// @src 0:13730:13739  "rootKLast"
                                    let _282 := var_rootKLast_1268
                                    let expr_1294 := _282
                                    /// @src 0:13713:13740  "rootK.mul(5).add(rootKLast)"
                                    let expr_1295 := fun_add_75(expr_1293_self, expr_1294)
                                    /// @src 0:13694:13740  "uint denominator = rootK.mul(5).add(rootKLast)"
                                    let var_denominator_1288 := expr_1295
                                    /// @src 0:13779:13788  "numerator"
                                    let _283 := var_numerator_1278
                                    let expr_1299 := _283
                                    /// @src 0:13791:13802  "denominator"
                                    let _284 := var_denominator_1288
                                    let expr_1300 := _284
                                    /// @src 0:13779:13802  "numerator / denominator"
                                    let expr_1301 := checked_div_t_uint256(expr_1299, expr_1300)
                                    /// @src 0:13762:13802  "uint liquidity = numerator / denominator"
                                    let var_liquidity_1298 := expr_1301
                                    /// @src 0:13828:13837  "liquidity"
                                    let _285 := var_liquidity_1298
                                    let expr_1303 := _285
                                    /// @src 0:13840:13841  "0"
                                    let expr_1304 := 0x00
                                    /// @src 0:13828:13841  "liquidity > 0"
                                    let expr_1305 := gt(cleanup_t_uint256(expr_1303), convert_t_rational_0_by_1_to_t_uint256(expr_1304))
                                    /// @src 0:13824:13866  "if (liquidity > 0) _mint(feeTo, liquidity)"
                                    if expr_1305
                                    {
                                        /// @src 0:13849:13854  "feeTo"
                                        let _286 := var_feeTo_1230
                                        let expr_1307 := _286
                                        /// @src 0:13856:13865  "liquidity"
                                        let _287 := var_liquidity_1298
                                        let expr_1308 := _287
                                        fun__mint_350(expr_1307, expr_1308)
                                    }
                                }
                            }
                        }
                    }
                    /// @ast-id 350 @src 0:3843:4040  "function _mint(address to, uint value) internal {..."
                    function fun__mint_350(var_to_317, var_value_319)
                    {
                        /// @src 0:3915:3926  "totalSupply"
                        let _288 := read_from_storage_split_offset_0_t_uint256(0x00)
                        let expr_323 := _288
                        /// @src 0:3915:3930  "totalSupply.add"
                        let expr_324_self := expr_323
                        /// @src 0:3931:3936  "value"
                        let _289 := var_value_319
                        let expr_325 := _289
                        /// @src 0:3915:3937  "totalSupply.add(value)"
                        let expr_326 := fun_add_75(expr_324_self, expr_325)
                        /// @src 0:3901:3937  "totalSupply = totalSupply.add(value)"
                        update_storage_value_offset_0t_uint256_to_t_uint256(0x00, expr_326)
                        let expr_327 := expr_326
                        /// @src 0:3963:3972  "balanceOf"
                        let _290 := 0x01
                        let expr_332 := _290
                        /// @src 0:3973:3975  "to"
                        let _291 := var_to_317
                        let expr_333 := _291
                        /// @src 0:3963:3976  "balanceOf[to]"
                        let _292 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_332, expr_333)
                        let _293 := read_from_storage_split_offset_0_t_uint256(_292)
                        let expr_334 := _293
                        /// @src 0:3963:3980  "balanceOf[to].add"
                        let expr_335_self := expr_334
                        /// @src 0:3981:3986  "value"
                        let _294 := var_value_319
                        let expr_336 := _294
                        /// @src 0:3963:3987  "balanceOf[to].add(value)"
                        let expr_337 := fun_add_75(expr_335_self, expr_336)
                        /// @src 0:3947:3956  "balanceOf"
                        let _295 := 0x01
                        let expr_329 := _295
                        /// @src 0:3957:3959  "to"
                        let _296 := var_to_317
                        let expr_330 := _296
                        /// @src 0:3947:3960  "balanceOf[to]"
                        let _297 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_329, expr_330)
                        /// @src 0:3947:3987  "balanceOf[to] = balanceOf[to].add(value)"
                        update_storage_value_offset_0t_uint256_to_t_uint256(_297, expr_337)
                        let expr_338 := expr_337
                        /// @src 0:4019:4020  "0"
                        let expr_343 := 0x00
                        /// @src 0:4011:4021  "address(0)"
                        let expr_344 := convert_t_rational_0_by_1_to_t_address(expr_343)
                        /// @src 0:4023:4025  "to"
                        let _298 := var_to_317
                        let expr_345 := _298
                        /// @src 0:4027:4032  "value"
                        let _299 := var_value_319
                        let expr_346 := _299
                        /// @src 0:4002:4033  "Transfer(address(0), to, value)"
                        let _300 := 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
                        let _301 := convert_t_address_to_t_address(expr_344)
                        let _302 := convert_t_address_to_t_address(expr_345)
                        {
                            let _303 := allocate_unbounded()
                            let _304 := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(_303, expr_346)
                            log3(_303, sub(_304, _303), _300, _301, _302)
                        }
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function cleanup_t_rational_3_by_1(value) -> cleaned
                    { cleaned := value }
                    function convert_t_rational_3_by_1_to_t_uint256(value) -> converted
                    {
                        converted := cleanup_t_uint256(identity(cleanup_t_rational_3_by_1(value)))
                    }
                    function cleanup_t_rational_2_by_1(value) -> cleaned
                    { cleaned := value }
                    function convert_t_rational_2_by_1_to_t_uint256(value) -> converted
                    {
                        converted := cleanup_t_uint256(identity(cleanup_t_rational_2_by_1(value)))
                    }
                    /// @ast-id 693 @src 0:6630:6922  "function sqrt(uint y) internal pure returns (uint z) {..."
                    function fun_sqrt_693(var_y_641) -> var_z_644
                    {
                        /// @src 0:6675:6681  "uint z"
                        let zero_t_uint256_305 := zero_value_for_split_t_uint256()
                        var_z_644 := zero_t_uint256_305
                        /// @src 0:6697:6698  "y"
                        let _306 := var_y_641
                        let expr_646 := _306
                        /// @src 0:6701:6702  "3"
                        let expr_647 := 0x03
                        /// @src 0:6697:6702  "y > 3"
                        let expr_648 := gt(cleanup_t_uint256(expr_646), convert_t_rational_3_by_1_to_t_uint256(expr_647))
                        /// @src 0:6693:6916  "if (y > 3) {..."
                        switch expr_648
                        case 0 {
                            /// @src 0:6878:6879  "y"
                            let _307 := var_y_641
                            let expr_682 := _307
                            /// @src 0:6883:6884  "0"
                            let expr_683 := 0x00
                            /// @src 0:6878:6884  "y != 0"
                            let expr_684 := iszero(eq(cleanup_t_uint256(expr_682), convert_t_rational_0_by_1_to_t_uint256(expr_683)))
                            /// @src 0:6874:6916  "if (y != 0) {..."
                            if expr_684
                            {
                                /// @src 0:6904:6905  "1"
                                let expr_686 := 0x01
                                /// @src 0:6900:6905  "z = 1"
                                let _308 := convert_t_rational_1_by_1_to_t_uint256(expr_686)
                                var_z_644 := _308
                                let expr_687 := _308
                            }
                        }
                        default /// @src 0:6693:6916  "if (y > 3) {..."
                        {
                            /// @src 0:6722:6723  "y"
                            let _309 := var_y_641
                            let expr_650 := _309
                            /// @src 0:6718:6723  "z = y"
                            var_z_644 := expr_650
                            let expr_651 := expr_650
                            /// @src 0:6746:6747  "y"
                            let _310 := var_y_641
                            let expr_655 := _310
                            /// @src 0:6750:6751  "2"
                            let expr_656 := 0x02
                            /// @src 0:6746:6751  "y / 2"
                            let expr_657 := checked_div_t_uint256(expr_655, convert_t_rational_2_by_1_to_t_uint256(expr_656))
                            /// @src 0:6754:6755  "1"
                            let expr_658 := 0x01
                            /// @src 0:6746:6755  "y / 2 + 1"
                            let expr_659 := checked_add_t_uint256(expr_657, convert_t_rational_1_by_1_to_t_uint256(expr_658))
                            /// @src 0:6737:6755  "uint x = y / 2 + 1"
                            let var_x_654 := expr_659
                            /// @src 0:6769:6858  "while (x < z) {..."
                            for { } 1 { }
                            {
                                /// @src 0:6776:6777  "x"
                                let _311 := var_x_654
                                let expr_661 := _311
                                /// @src 0:6780:6781  "z"
                                let _312 := var_z_644
                                let expr_662 := _312
                                /// @src 0:6776:6781  "x < z"
                                let expr_663 := lt(cleanup_t_uint256(expr_661), cleanup_t_uint256(expr_662))
                                if iszero(expr_663) { break }
                                /// @src 0:6805:6806  "x"
                                let _313 := var_x_654
                                let expr_665 := _313
                                /// @src 0:6801:6806  "z = x"
                                var_z_644 := expr_665
                                let expr_666 := expr_665
                                /// @src 0:6829:6830  "y"
                                let _314 := var_y_641
                                let expr_669 := _314
                                /// @src 0:6833:6834  "x"
                                let _315 := var_x_654
                                let expr_670 := _315
                                /// @src 0:6829:6834  "y / x"
                                let expr_671 := checked_div_t_uint256(expr_669, expr_670)
                                /// @src 0:6837:6838  "x"
                                let _316 := var_x_654
                                let expr_672 := _316
                                /// @src 0:6829:6838  "y / x + x"
                                let expr_673 := checked_add_t_uint256(expr_671, expr_672)
                                /// @src 0:6828:6839  "(y / x + x)"
                                let expr_674 := expr_673
                                /// @src 0:6842:6843  "2"
                                let expr_675 := 0x02
                                /// @src 0:6828:6843  "(y / x + x) / 2"
                                let expr_676 := checked_div_t_uint256(expr_674, convert_t_rational_2_by_1_to_t_uint256(expr_675))
                                /// @src 0:6824:6843  "x = (y / x + x) / 2"
                                var_x_654 := expr_676
                                let expr_677 := expr_676
                            }
                        }
                    }
                    /// @ast-id 1026 @src 0:11078:11209  "modifier lock() {..."
                    function modifier_lock_1534(var_amount0Out_1525, var_amount1Out_1527, var_to_1529, var_data_1531_offset, var_data_1531_length)
                    {
                        /// @src 0:11112:11120  "unlocked"
                        let _317 := read_from_storage_split_offset_0_t_uint256(0x0c)
                        let expr_1010 := _317
                        /// @src 0:11124:11125  "1"
                        let expr_1011 := 0x01
                        /// @src 0:11112:11125  "unlocked == 1"
                        let expr_1012 := eq(cleanup_t_uint256(expr_1010), convert_t_rational_1_by_1_to_t_uint256(expr_1011))
                        /// @src 0:11104:11147  "require(unlocked == 1, \"UniswapV2: LOCKED\")"
                        require_helper_t_stringliteral_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a(expr_1012)
                        /// @src 0:11168:11169  "0"
                        let expr_1017 := 0x00
                        /// @src 0:11157:11169  "unlocked = 0"
                        let _318 := convert_t_rational_0_by_1_to_t_uint256(expr_1017)
                        update_storage_value_offset_0t_uint256_to_t_uint256(0x0c, _318)
                        let expr_1018 := _318
                        /// @src 0:11179:11180  "_"
                        fun_swap_1760_inner(var_amount0Out_1525, var_amount1Out_1527, var_to_1529, var_data_1531_offset, var_data_1531_length)
                        /// @src 0:11201:11202  "1"
                        let expr_1022 := 0x01
                        /// @src 0:11190:11202  "unlocked = 1"
                        let _319 := convert_t_rational_1_by_1_to_t_uint256(expr_1022)
                        update_storage_value_offset_0t_uint256_to_t_uint256(0x0c, _319)
                        let expr_1023 := _319
                    }
                    /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
                    function store_literal_in_memory_05339493da7e2cbe77e17beadf6b91132eb307939495f5f1797bf88d95539e83(memPtr)
                    {
                        mstore(add(memPtr, 0), "UniswapV2: INSUFFICIENT_OUTPUT_A")
                        mstore(add(memPtr, 32), "MOUNT")
                    }
                    function abi_encode_t_stringliteral_05339493da7e2cbe77e17beadf6b91132eb307939495f5f1797bf88d95539e83_to_t_string_memory_ptr_fromStack(pos) -> end
                    {
                        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)
                        store_literal_in_memory_05339493da7e2cbe77e17beadf6b91132eb307939495f5f1797bf88d95539e83(pos)
                        end := add(pos, 64)
                    }
                    function abi_encode_tuple_t_stringliteral_05339493da7e2cbe77e17beadf6b91132eb307939495f5f1797bf88d95539e83__to_t_string_memory_ptr__fromStack(headStart) -> tail
                    {
                        tail := add(headStart, 32)
                        mstore(add(headStart, 0), sub(tail, headStart))
                        tail := abi_encode_t_stringliteral_05339493da7e2cbe77e17beadf6b91132eb307939495f5f1797bf88d95539e83_to_t_string_memory_ptr_fromStack(tail)
                    }
                    function require_helper_t_stringliteral_05339493da7e2cbe77e17beadf6b91132eb307939495f5f1797bf88d95539e83(condition)
                    {
                        if iszero(condition)
                        {
                            let memPtr := allocate_unbounded()
                            mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                            let end := abi_encode_tuple_t_stringliteral_05339493da7e2cbe77e17beadf6b91132eb307939495f5f1797bf88d95539e83__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                            revert(memPtr, sub(end, memPtr))
                        }
                    }
                    function store_literal_in_memory_3f354ef449b2a9b081220ce21f57691008110b653edc191d8288e60cef58bb5f(memPtr)
                    {
                        mstore(add(memPtr, 0), "UniswapV2: INSUFFICIENT_LIQUIDIT")
                        mstore(add(memPtr, 32), "Y")
                    }
                    function abi_encode_t_stringliteral_3f354ef449b2a9b081220ce21f57691008110b653edc191d8288e60cef58bb5f_to_t_string_memory_ptr_fromStack(pos) -> end
                    {
                        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)
                        store_literal_in_memory_3f354ef449b2a9b081220ce21f57691008110b653edc191d8288e60cef58bb5f(pos)
                        end := add(pos, 64)
                    }
                    function abi_encode_tuple_t_stringliteral_3f354ef449b2a9b081220ce21f57691008110b653edc191d8288e60cef58bb5f__to_t_string_memory_ptr__fromStack(headStart) -> tail
                    {
                        tail := add(headStart, 32)
                        mstore(add(headStart, 0), sub(tail, headStart))
                        tail := abi_encode_t_stringliteral_3f354ef449b2a9b081220ce21f57691008110b653edc191d8288e60cef58bb5f_to_t_string_memory_ptr_fromStack(tail)
                    }
                    function require_helper_t_stringliteral_3f354ef449b2a9b081220ce21f57691008110b653edc191d8288e60cef58bb5f(condition)
                    {
                        if iszero(condition)
                        {
                            let memPtr := allocate_unbounded()
                            mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                            let end := abi_encode_tuple_t_stringliteral_3f354ef449b2a9b081220ce21f57691008110b653edc191d8288e60cef58bb5f__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                            revert(memPtr, sub(end, memPtr))
                        }
                    }
                    function store_literal_in_memory_25d395026e6e4dd4e9808c7d6d3dd1f45abaf4874ae71f7161fff58de03154d3(memPtr)
                    {
                        mstore(add(memPtr, 0), "UniswapV2: INVALID_TO")
                    }
                    function abi_encode_t_stringliteral_25d395026e6e4dd4e9808c7d6d3dd1f45abaf4874ae71f7161fff58de03154d3_to_t_string_memory_ptr_fromStack(pos) -> end
                    {
                        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 21)
                        store_literal_in_memory_25d395026e6e4dd4e9808c7d6d3dd1f45abaf4874ae71f7161fff58de03154d3(pos)
                        end := add(pos, 32)
                    }
                    function abi_encode_tuple_t_stringliteral_25d395026e6e4dd4e9808c7d6d3dd1f45abaf4874ae71f7161fff58de03154d3__to_t_string_memory_ptr__fromStack(headStart) -> tail
                    {
                        tail := add(headStart, 32)
                        mstore(add(headStart, 0), sub(tail, headStart))
                        tail := abi_encode_t_stringliteral_25d395026e6e4dd4e9808c7d6d3dd1f45abaf4874ae71f7161fff58de03154d3_to_t_string_memory_ptr_fromStack(tail)
                    }
                    function require_helper_t_stringliteral_25d395026e6e4dd4e9808c7d6d3dd1f45abaf4874ae71f7161fff58de03154d3(condition)
                    {
                        if iszero(condition)
                        {
                            let memPtr := allocate_unbounded()
                            mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                            let end := abi_encode_tuple_t_stringliteral_25d395026e6e4dd4e9808c7d6d3dd1f45abaf4874ae71f7161fff58de03154d3__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                            revert(memPtr, sub(end, memPtr))
                        }
                    }
                    function array_length_t_bytes_calldata_ptr(value, len) -> length
                    { length := len }
                    function convert_t_uint160_to_t_contract$_IUniswapV2Callee_$959(value) -> converted
                    {
                        converted := convert_t_uint160_to_t_uint160(value)
                    }
                    function convert_t_address_to_t_contract$_IUniswapV2Callee_$959(value) -> converted
                    {
                        converted := convert_t_uint160_to_t_contract$_IUniswapV2Callee_$959(value)
                    }
                    function convert_t_contract$_IUniswapV2Callee_$959_to_t_address(value) -> converted
                    {
                        converted := convert_t_uint160_to_t_address(value)
                    }
                    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos
                    {
                        mstore(pos, length)
                        updated_pos := add(pos, 0x20)
                    }
                    function copy_calldata_to_memory_with_cleanup(src, dst, length)
                    {
                        calldatacopy(dst, src, length)
                        mstore(add(dst, length), 0)
                    }
                    function abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(start, length, pos) -> end
                    {
                        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)
                        copy_calldata_to_memory_with_cleanup(start, pos, length)
                        end := add(pos, round_up_to_mul_of_32(length))
                    }
                    function abi_encode_tuple_t_address_t_uint256_t_uint256_t_bytes_calldata_ptr__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack(headStart, value0, value1, value2, value3, value4) -> tail
                    {
                        tail := add(headStart, 128)
                        abi_encode_t_address_to_t_address_fromStack(value0, add(headStart, 0))
                        abi_encode_t_uint256_to_t_uint256_fromStack(value1, add(headStart, 32))
                        abi_encode_t_uint256_to_t_uint256_fromStack(value2, add(headStart, 64))
                        mstore(add(headStart, 96), sub(tail, headStart))
                        tail := abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(value3, value4, tail)
                    }
                    function store_literal_in_memory_10e2efc32d8a31d3b2c11a545b3ed09c2dbabc58ef6de4033929d0002e425b67(memPtr)
                    {
                        mstore(add(memPtr, 0), "UniswapV2: INSUFFICIENT_INPUT_AM")
                        mstore(add(memPtr, 32), "OUNT")
                    }
                    function abi_encode_t_stringliteral_10e2efc32d8a31d3b2c11a545b3ed09c2dbabc58ef6de4033929d0002e425b67_to_t_string_memory_ptr_fromStack(pos) -> end
                    {
                        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)
                        store_literal_in_memory_10e2efc32d8a31d3b2c11a545b3ed09c2dbabc58ef6de4033929d0002e425b67(pos)
                        end := add(pos, 64)
                    }
                    function abi_encode_tuple_t_stringliteral_10e2efc32d8a31d3b2c11a545b3ed09c2dbabc58ef6de4033929d0002e425b67__to_t_string_memory_ptr__fromStack(headStart) -> tail
                    {
                        tail := add(headStart, 32)
                        mstore(add(headStart, 0), sub(tail, headStart))
                        tail := abi_encode_t_stringliteral_10e2efc32d8a31d3b2c11a545b3ed09c2dbabc58ef6de4033929d0002e425b67_to_t_string_memory_ptr_fromStack(tail)
                    }
                    function require_helper_t_stringliteral_10e2efc32d8a31d3b2c11a545b3ed09c2dbabc58ef6de4033929d0002e425b67(condition)
                    {
                        if iszero(condition)
                        {
                            let memPtr := allocate_unbounded()
                            mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                            let end := abi_encode_tuple_t_stringliteral_10e2efc32d8a31d3b2c11a545b3ed09c2dbabc58ef6de4033929d0002e425b67__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                            revert(memPtr, sub(end, memPtr))
                        }
                    }
                    function cleanup_t_rational_1000000_by_1(value) -> cleaned
                    { cleaned := value }
                    function convert_t_rational_1000000_by_1_to_t_uint256(value) -> converted
                    {
                        converted := cleanup_t_uint256(identity(cleanup_t_rational_1000000_by_1(value)))
                    }
                    function store_literal_in_memory_50b159bbb975f5448705db79eafd212ba91c20fe5a110a13759239545d3339af(memPtr)
                    {
                        mstore(add(memPtr, 0), "UniswapV2: K")
                    }
                    function abi_encode_t_stringliteral_50b159bbb975f5448705db79eafd212ba91c20fe5a110a13759239545d3339af_to_t_string_memory_ptr_fromStack(pos) -> end
                    {
                        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 12)
                        store_literal_in_memory_50b159bbb975f5448705db79eafd212ba91c20fe5a110a13759239545d3339af(pos)
                        end := add(pos, 32)
                    }
                    function abi_encode_tuple_t_stringliteral_50b159bbb975f5448705db79eafd212ba91c20fe5a110a13759239545d3339af__to_t_string_memory_ptr__fromStack(headStart) -> tail
                    {
                        tail := add(headStart, 32)
                        mstore(add(headStart, 0), sub(tail, headStart))
                        tail := abi_encode_t_stringliteral_50b159bbb975f5448705db79eafd212ba91c20fe5a110a13759239545d3339af_to_t_string_memory_ptr_fromStack(tail)
                    }
                    function require_helper_t_stringliteral_50b159bbb975f5448705db79eafd212ba91c20fe5a110a13759239545d3339af(condition)
                    {
                        if iszero(condition)
                        {
                            let memPtr := allocate_unbounded()
                            mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                            let end := abi_encode_tuple_t_stringliteral_50b159bbb975f5448705db79eafd212ba91c20fe5a110a13759239545d3339af__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                            revert(memPtr, sub(end, memPtr))
                        }
                    }
                    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack(headStart, value0, value1, value2, value3) -> tail
                    {
                        tail := add(headStart, 128)
                        abi_encode_t_uint256_to_t_uint256_fromStack(value0, add(headStart, 0))
                        abi_encode_t_uint256_to_t_uint256_fromStack(value1, add(headStart, 32))
                        abi_encode_t_uint256_to_t_uint256_fromStack(value2, add(headStart, 64))
                        abi_encode_t_uint256_to_t_uint256_fromStack(value3, add(headStart, 96))
                    }
                    /// @src 0:17236:19536  "function swap(..."
                    function fun_swap_1760_inner(var_amount0Out_1525, var_amount1Out_1527, var_to_1529, var_data_1531_offset, var_data_1531_length)
                    {
                        /// @src 0:17400:17410  "amount0Out"
                        let _320 := var_amount0Out_1525
                        let expr_1537 := _320
                        /// @src 0:17413:17414  "0"
                        let expr_1538 := 0x00
                        /// @src 0:17400:17414  "amount0Out > 0"
                        let expr_1539 := gt(cleanup_t_uint256(expr_1537), convert_t_rational_0_by_1_to_t_uint256(expr_1538))
                        /// @src 0:17400:17432  "amount0Out > 0 || amount1Out > 0"
                        let expr_1543 := expr_1539
                        if iszero(expr_1543)
                        {
                            /// @src 0:17418:17428  "amount1Out"
                            let _321 := var_amount1Out_1527
                            let expr_1540 := _321
                            /// @src 0:17431:17432  "0"
                            let expr_1541 := 0x00
                            /// @src 0:17418:17432  "amount1Out > 0"
                            let expr_1542 := gt(cleanup_t_uint256(expr_1540), convert_t_rational_0_by_1_to_t_uint256(expr_1541))
                            /// @src 0:17400:17432  "amount0Out > 0 || amount1Out > 0"
                            expr_1543 := expr_1542
                        }
                        /// @src 0:17379:17495  "require(..."
                        require_helper_t_stringliteral_05339493da7e2cbe77e17beadf6b91132eb307939495f5f1797bf88d95539e83(expr_1543)
                        /// @src 0:17548:17561  "getReserves()"
                        let expr_1552_component_1, expr_1552_component_2, expr_1552_component_3 := fun_getReserves_1048()
                        /// @src 0:17505:17561  "(uint112 _reserve0, uint112 _reserve1, ) = getReserves()"
                        let var__reserve0_1548 := expr_1552_component_1
                        let var__reserve1_1550 := expr_1552_component_2
                        /// @src 0:17607:17617  "amount0Out"
                        let _322 := var_amount0Out_1525
                        let expr_1555 := _322
                        /// @src 0:17620:17629  "_reserve0"
                        let _323 := var__reserve0_1548
                        let expr_1556 := _323
                        /// @src 0:17607:17629  "amount0Out < _reserve0"
                        let expr_1557 := lt(cleanup_t_uint256(expr_1555), convert_t_uint112_to_t_uint256(expr_1556))
                        /// @src 0:17607:17655  "amount0Out < _reserve0 && amount1Out < _reserve1"
                        let expr_1561 := expr_1557
                        if expr_1561
                        {
                            /// @src 0:17633:17643  "amount1Out"
                            let _324 := var_amount1Out_1527
                            let expr_1558 := _324
                            /// @src 0:17646:17655  "_reserve1"
                            let _325 := var__reserve1_1550
                            let expr_1559 := _325
                            /// @src 0:17633:17655  "amount1Out < _reserve1"
                            let expr_1560 := lt(cleanup_t_uint256(expr_1558), convert_t_uint112_to_t_uint256(expr_1559))
                            /// @src 0:17607:17655  "amount0Out < _reserve0 && amount1Out < _reserve1"
                            expr_1561 := expr_1560
                        }
                        /// @src 0:17586:17714  "require(..."
                        require_helper_t_stringliteral_3f354ef449b2a9b081220ce21f57691008110b653edc191d8288e60cef58bb5f(expr_1561)
                        /// @src 0:17725:17738  "uint balance0"
                        let var_balance0_1566
                        let zero_t_uint256_326 := zero_value_for_split_t_uint256()
                        var_balance0_1566 := zero_t_uint256_326
                        /// @src 0:17748:17761  "uint balance1"
                        let var_balance1_1569
                        let zero_t_uint256_327 := zero_value_for_split_t_uint256()
                        var_balance1_1569 := zero_t_uint256_327
                        /// @src 0:17870:17876  "token0"
                        let _328 := read_from_storage_split_offset_0_t_address(0x06)
                        let expr_1573 := _328
                        /// @src 0:17852:17876  "address _token0 = token0"
                        let var__token0_1572 := expr_1573
                        /// @src 0:17908:17914  "token1"
                        let _329 := read_from_storage_split_offset_0_t_address(0x07)
                        let expr_1577 := _329
                        /// @src 0:17890:17914  "address _token1 = token1"
                        let var__token1_1576 := expr_1577
                        /// @src 0:17936:17938  "to"
                        let _330 := var_to_1529
                        let expr_1580 := _330
                        /// @src 0:17942:17949  "_token0"
                        let _331 := var__token0_1572
                        let expr_1581 := _331
                        /// @src 0:17936:17949  "to != _token0"
                        let expr_1582 := iszero(eq(cleanup_t_address(expr_1580), cleanup_t_address(expr_1581)))
                        /// @src 0:17936:17966  "to != _token0 && to != _token1"
                        let expr_1586 := expr_1582
                        if expr_1586
                        {
                            /// @src 0:17953:17955  "to"
                            let _332 := var_to_1529
                            let expr_1583 := _332
                            /// @src 0:17959:17966  "_token1"
                            let _333 := var__token1_1576
                            let expr_1584 := _333
                            /// @src 0:17953:17966  "to != _token1"
                            let expr_1585 := iszero(eq(cleanup_t_address(expr_1583), cleanup_t_address(expr_1584)))
                            /// @src 0:17936:17966  "to != _token0 && to != _token1"
                            expr_1586 := expr_1585
                        }
                        /// @src 0:17928:17992  "require(to != _token0 && to != _token1, \"UniswapV2: INVALID_TO\")"
                        require_helper_t_stringliteral_25d395026e6e4dd4e9808c7d6d3dd1f45abaf4874ae71f7161fff58de03154d3(expr_1586)
                        /// @src 0:18010:18020  "amount0Out"
                        let _334 := var_amount0Out_1525
                        let expr_1590 := _334
                        /// @src 0:18023:18024  "0"
                        let expr_1591 := 0x00
                        /// @src 0:18010:18024  "amount0Out > 0"
                        let expr_1592 := gt(cleanup_t_uint256(expr_1590), convert_t_rational_0_by_1_to_t_uint256(expr_1591))
                        /// @src 0:18006:18064  "if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out)"
                        if expr_1592
                        {
                            /// @src 0:18040:18047  "_token0"
                            let _335 := var__token0_1572
                            let expr_1594 := _335
                            /// @src 0:18049:18051  "to"
                            let _336 := var_to_1529
                            let expr_1595 := _336
                            /// @src 0:18053:18063  "amount0Out"
                            let _337 := var_amount0Out_1525
                            let expr_1596 := _337
                            fun__safeTransfer_1066(expr_1594, expr_1595, expr_1596)
                        }
                        /// @src 0:18116:18126  "amount1Out"
                        let _338 := var_amount1Out_1527
                        let expr_1600 := _338
                        /// @src 0:18129:18130  "0"
                        let expr_1601 := 0x00
                        /// @src 0:18116:18130  "amount1Out > 0"
                        let expr_1602 := gt(cleanup_t_uint256(expr_1600), convert_t_rational_0_by_1_to_t_uint256(expr_1601))
                        /// @src 0:18112:18170  "if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out)"
                        if expr_1602
                        {
                            /// @src 0:18146:18153  "_token1"
                            let _339 := var__token1_1576
                            let expr_1604 := _339
                            /// @src 0:18155:18157  "to"
                            let _340 := var_to_1529
                            let expr_1605 := _340
                            /// @src 0:18159:18169  "amount1Out"
                            let _341 := var_amount1Out_1527
                            let expr_1606 := _341
                            fun__safeTransfer_1066(expr_1604, expr_1605, expr_1606)
                        }
                        /// @src 0:18222:18226  "data"
                        let _342_offset := var_data_1531_offset
                        let _342_length := var_data_1531_length
                        let expr_1610_offset := _342_offset
                        let expr_1610_length := _342_length
                        /// @src 0:18222:18233  "data.length"
                        let expr_1611 := array_length_t_bytes_calldata_ptr(expr_1610_offset, expr_1610_length)
                        /// @src 0:18236:18237  "0"
                        let expr_1612 := 0x00
                        /// @src 0:18222:18237  "data.length > 0"
                        let expr_1613 := gt(cleanup_t_uint256(expr_1611), convert_t_rational_0_by_1_to_t_uint256(expr_1612))
                        /// @src 0:18218:18429  "if (data.length > 0)..."
                        if expr_1613
                        {
                            /// @src 0:18272:18274  "to"
                            let _343 := var_to_1529
                            let expr_1615 := _343
                            /// @src 0:18255:18275  "IUniswapV2Callee(to)"
                            let expr_1616_address := convert_t_address_to_t_contract$_IUniswapV2Callee_$959(expr_1615)
                            /// @src 0:18255:18289  "IUniswapV2Callee(to).uniswapV2Call"
                            let expr_1617_address := convert_t_contract$_IUniswapV2Callee_$959_to_t_address(expr_1616_address)
                            let expr_1617_functionSelector := 0x10d1e85c
                            /// @src 0:18311:18321  "msg.sender"
                            let expr_1619 := caller()
                            /// @src 0:18343:18353  "amount0Out"
                            let _344 := var_amount0Out_1525
                            let expr_1620 := _344
                            /// @src 0:18375:18385  "amount1Out"
                            let _345 := var_amount1Out_1527
                            let expr_1621 := _345
                            /// @src 0:18407:18411  "data"
                            let _346_offset := var_data_1531_offset
                            let _346_length := var_data_1531_length
                            let expr_1622_offset := _346_offset
                            let expr_1622_length := _346_length
                            /// @src 0:18255:18429  "IUniswapV2Callee(to).uniswapV2Call(..."
                            if iszero(extcodesize(expr_1617_address))
                            {
                                revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()
                            }
                            let _347 := allocate_unbounded()
                            mstore(_347, shift_left_224(expr_1617_functionSelector))
                            let _348 := abi_encode_tuple_t_address_t_uint256_t_uint256_t_bytes_calldata_ptr__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack(add(_347, 4), expr_1619, expr_1620, expr_1621, expr_1622_offset, expr_1622_length)
                            let _349 := call(gas(), expr_1617_address, 0, _347, sub(_348, _347), _347, 0)
                            if iszero(_349) { revert_forward_1() }
                            if _349
                            {
                                let _350 := 0
                                if gt(_350, returndatasize()) { _350 := returndatasize() }
                                finalize_allocation(_347, _350)
                                abi_decode_tuple__fromMemory(_347, add(_347, _350))
                            }
                        }
                        /// @src 0:18461:18468  "_token0"
                        let _351 := var__token0_1572
                        let expr_1628 := _351
                        /// @src 0:18454:18469  "IERC20(_token0)"
                        let expr_1629_address := convert_t_address_to_t_contract$_IERC20_$777(expr_1628)
                        /// @src 0:18454:18479  "IERC20(_token0).balanceOf"
                        let expr_1630_address := convert_t_contract$_IERC20_$777_to_t_address(expr_1629_address)
                        let expr_1630_functionSelector := 0x70a08231
                        /// @src 0:18488:18492  "this"
                        let expr_1633_address := address()
                        /// @src 0:18480:18493  "address(this)"
                        let expr_1634 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1633_address)
                        /// @src 0:18454:18494  "IERC20(_token0).balanceOf(address(this))"
                        let _352 := allocate_unbounded()
                        mstore(_352, shift_left_224(expr_1630_functionSelector))
                        let _353 := abi_encode_tuple_t_address__to_t_address__fromStack(add(_352, 4), expr_1634)
                        let _354 := call(gas(), expr_1630_address, 0, _352, sub(_353, _352), _352, 32)
                        if iszero(_354) { revert_forward_1() }
                        let expr_1635
                        if _354
                        {
                            let _355 := 32
                            if gt(_355, returndatasize()) { _355 := returndatasize() }
                            finalize_allocation(_352, _355)
                            expr_1635 := abi_decode_tuple_t_uint256_fromMemory(_352, add(_352, _355))
                        }
                        /// @src 0:18443:18494  "balance0 = IERC20(_token0).balanceOf(address(this))"
                        var_balance0_1566 := expr_1635
                        let expr_1636 := expr_1635
                        /// @src 0:18526:18533  "_token1"
                        let _356 := var__token1_1576
                        let expr_1640 := _356
                        /// @src 0:18519:18534  "IERC20(_token1)"
                        let expr_1641_address := convert_t_address_to_t_contract$_IERC20_$777(expr_1640)
                        /// @src 0:18519:18544  "IERC20(_token1).balanceOf"
                        let expr_1642_address := convert_t_contract$_IERC20_$777_to_t_address(expr_1641_address)
                        let expr_1642_functionSelector := 0x70a08231
                        /// @src 0:18553:18557  "this"
                        let expr_1645_address := address()
                        /// @src 0:18545:18558  "address(this)"
                        let expr_1646 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1645_address)
                        /// @src 0:18519:18559  "IERC20(_token1).balanceOf(address(this))"
                        let _357 := allocate_unbounded()
                        mstore(_357, shift_left_224(expr_1642_functionSelector))
                        let _358 := abi_encode_tuple_t_address__to_t_address__fromStack(add(_357, 4), expr_1646)
                        let _359 := call(gas(), expr_1642_address, 0, _357, sub(_358, _357), _357, 32)
                        if iszero(_359) { revert_forward_1() }
                        let expr_1647
                        if _359
                        {
                            let _360 := 32
                            if gt(_360, returndatasize()) { _360 := returndatasize() }
                            finalize_allocation(_357, _360)
                            expr_1647 := abi_decode_tuple_t_uint256_fromMemory(_357, add(_357, _360))
                        }
                        /// @src 0:18508:18559  "balance1 = IERC20(_token1).balanceOf(address(this))"
                        var_balance1_1569 := expr_1647
                        let expr_1648 := expr_1647
                        /// @src 0:18596:18604  "balance0"
                        let _361 := var_balance0_1566
                        let expr_1653 := _361
                        /// @src 0:18607:18616  "_reserve0"
                        let _362 := var__reserve0_1548
                        let expr_1654 := _362
                        /// @src 0:18619:18629  "amount0Out"
                        let _363 := var_amount0Out_1525
                        let expr_1655 := _363
                        /// @src 0:18607:18629  "_reserve0 - amount0Out"
                        let expr_1656 := checked_sub_t_uint256(convert_t_uint112_to_t_uint256(expr_1654), expr_1655)
                        /// @src 0:18596:18629  "balance0 > _reserve0 - amount0Out"
                        let expr_1657 := gt(cleanup_t_uint256(expr_1653), cleanup_t_uint256(expr_1656))
                        /// @src 0:18596:18695  "balance0 > _reserve0 - amount0Out..."
                        let expr_1665
                        switch expr_1657
                        case 0 {
                            /// @src 0:18694:18695  "0"
                            let expr_1664 := 0x00
                            /// @src 0:18596:18695  "balance0 > _reserve0 - amount0Out..."
                            expr_1665 := convert_t_rational_0_by_1_to_t_uint256(expr_1664)
                        }
                        default {
                            /// @src 0:18644:18652  "balance0"
                            let _364 := var_balance0_1566
                            let expr_1658 := _364
                            /// @src 0:18656:18665  "_reserve0"
                            let _365 := var__reserve0_1548
                            let expr_1659 := _365
                            /// @src 0:18668:18678  "amount0Out"
                            let _366 := var_amount0Out_1525
                            let expr_1660 := _366
                            /// @src 0:18656:18678  "_reserve0 - amount0Out"
                            let expr_1661 := checked_sub_t_uint256(convert_t_uint112_to_t_uint256(expr_1659), expr_1660)
                            /// @src 0:18655:18679  "(_reserve0 - amount0Out)"
                            let expr_1662 := expr_1661
                            /// @src 0:18644:18679  "balance0 - (_reserve0 - amount0Out)"
                            let expr_1663 := checked_sub_t_uint256(expr_1658, expr_1662)
                            /// @src 0:18596:18695  "balance0 > _reserve0 - amount0Out..."
                            expr_1665 := expr_1663
                        }
                        /// @src 0:18579:18695  "uint amount0In = balance0 > _reserve0 - amount0Out..."
                        let var_amount0In_1652 := expr_1665
                        /// @src 0:18722:18730  "balance1"
                        let _367 := var_balance1_1569
                        let expr_1669 := _367
                        /// @src 0:18733:18742  "_reserve1"
                        let _368 := var__reserve1_1550
                        let expr_1670 := _368
                        /// @src 0:18745:18755  "amount1Out"
                        let _369 := var_amount1Out_1527
                        let expr_1671 := _369
                        /// @src 0:18733:18755  "_reserve1 - amount1Out"
                        let expr_1672 := checked_sub_t_uint256(convert_t_uint112_to_t_uint256(expr_1670), expr_1671)
                        /// @src 0:18722:18755  "balance1 > _reserve1 - amount1Out"
                        let expr_1673 := gt(cleanup_t_uint256(expr_1669), cleanup_t_uint256(expr_1672))
                        /// @src 0:18722:18821  "balance1 > _reserve1 - amount1Out..."
                        let expr_1681
                        switch expr_1673
                        case 0 {
                            /// @src 0:18820:18821  "0"
                            let expr_1680 := 0x00
                            /// @src 0:18722:18821  "balance1 > _reserve1 - amount1Out..."
                            expr_1681 := convert_t_rational_0_by_1_to_t_uint256(expr_1680)
                        }
                        default {
                            /// @src 0:18770:18778  "balance1"
                            let _370 := var_balance1_1569
                            let expr_1674 := _370
                            /// @src 0:18782:18791  "_reserve1"
                            let _371 := var__reserve1_1550
                            let expr_1675 := _371
                            /// @src 0:18794:18804  "amount1Out"
                            let _372 := var_amount1Out_1527
                            let expr_1676 := _372
                            /// @src 0:18782:18804  "_reserve1 - amount1Out"
                            let expr_1677 := checked_sub_t_uint256(convert_t_uint112_to_t_uint256(expr_1675), expr_1676)
                            /// @src 0:18781:18805  "(_reserve1 - amount1Out)"
                            let expr_1678 := expr_1677
                            /// @src 0:18770:18805  "balance1 - (_reserve1 - amount1Out)"
                            let expr_1679 := checked_sub_t_uint256(expr_1674, expr_1678)
                            /// @src 0:18722:18821  "balance1 > _reserve1 - amount1Out..."
                            expr_1681 := expr_1679
                        }
                        /// @src 0:18705:18821  "uint amount1In = balance1 > _reserve1 - amount1Out..."
                        let var_amount1In_1668 := expr_1681
                        /// @src 0:18852:18861  "amount0In"
                        let _373 := var_amount0In_1652
                        let expr_1684 := _373
                        /// @src 0:18864:18865  "0"
                        let expr_1685 := 0x00
                        /// @src 0:18852:18865  "amount0In > 0"
                        let expr_1686 := gt(cleanup_t_uint256(expr_1684), convert_t_rational_0_by_1_to_t_uint256(expr_1685))
                        /// @src 0:18852:18882  "amount0In > 0 || amount1In > 0"
                        let expr_1690 := expr_1686
                        if iszero(expr_1690)
                        {
                            /// @src 0:18869:18878  "amount1In"
                            let _374 := var_amount1In_1668
                            let expr_1687 := _374
                            /// @src 0:18881:18882  "0"
                            let expr_1688 := 0x00
                            /// @src 0:18869:18882  "amount1In > 0"
                            let expr_1689 := gt(cleanup_t_uint256(expr_1687), convert_t_rational_0_by_1_to_t_uint256(expr_1688))
                            /// @src 0:18852:18882  "amount0In > 0 || amount1In > 0"
                            expr_1690 := expr_1689
                        }
                        /// @src 0:18831:18944  "require(..."
                        require_helper_t_stringliteral_10e2efc32d8a31d3b2c11a545b3ed09c2dbabc58ef6de4033929d0002e425b67(expr_1690)
                        /// @src 0:19068:19076  "balance0"
                        let _375 := var_balance0_1566
                        let expr_1696 := _375
                        /// @src 0:19068:19080  "balance0.mul"
                        let expr_1697_self := expr_1696
                        /// @src 0:19081:19085  "1000"
                        let expr_1698 := 0x03e8
                        /// @src 0:19068:19086  "balance0.mul(1000)"
                        let _376 := convert_t_rational_1000_by_1_to_t_uint256(expr_1698)
                        let expr_1699 := fun_mul_125(expr_1697_self, _376)
                        /// @src 0:19068:19090  "balance0.mul(1000).sub"
                        let expr_1700_self := expr_1699
                        /// @src 0:19091:19100  "amount0In"
                        let _377 := var_amount0In_1652
                        let expr_1701 := _377
                        /// @src 0:19091:19104  "amount0In.mul"
                        let expr_1702_self := expr_1701
                        /// @src 0:19105:19106  "3"
                        let expr_1703 := 0x03
                        /// @src 0:19091:19107  "amount0In.mul(3)"
                        let _378 := convert_t_rational_3_by_1_to_t_uint256(expr_1703)
                        let expr_1704 := fun_mul_125(expr_1702_self, _378)
                        /// @src 0:19068:19108  "balance0.mul(1000).sub(amount0In.mul(3))"
                        let expr_1705 := fun_sub_97(expr_1700_self, expr_1704)
                        /// @src 0:19044:19108  "uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3))"
                        let var_balance0Adjusted_1695 := expr_1705
                        /// @src 0:19146:19154  "balance1"
                        let _379 := var_balance1_1569
                        let expr_1709 := _379
                        /// @src 0:19146:19158  "balance1.mul"
                        let expr_1710_self := expr_1709
                        /// @src 0:19159:19163  "1000"
                        let expr_1711 := 0x03e8
                        /// @src 0:19146:19164  "balance1.mul(1000)"
                        let _380 := convert_t_rational_1000_by_1_to_t_uint256(expr_1711)
                        let expr_1712 := fun_mul_125(expr_1710_self, _380)
                        /// @src 0:19146:19168  "balance1.mul(1000).sub"
                        let expr_1713_self := expr_1712
                        /// @src 0:19169:19178  "amount1In"
                        let _381 := var_amount1In_1668
                        let expr_1714 := _381
                        /// @src 0:19169:19182  "amount1In.mul"
                        let expr_1715_self := expr_1714
                        /// @src 0:19183:19184  "3"
                        let expr_1716 := 0x03
                        /// @src 0:19169:19185  "amount1In.mul(3)"
                        let _382 := convert_t_rational_3_by_1_to_t_uint256(expr_1716)
                        let expr_1717 := fun_mul_125(expr_1715_self, _382)
                        /// @src 0:19146:19186  "balance1.mul(1000).sub(amount1In.mul(3))"
                        let expr_1718 := fun_sub_97(expr_1713_self, expr_1717)
                        /// @src 0:19122:19186  "uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3))"
                        let var_balance1Adjusted_1708 := expr_1718
                        /// @src 0:19225:19241  "balance0Adjusted"
                        let _383 := var_balance0Adjusted_1695
                        let expr_1721 := _383
                        /// @src 0:19225:19245  "balance0Adjusted.mul"
                        let expr_1722_self := expr_1721
                        /// @src 0:19246:19262  "balance1Adjusted"
                        let _384 := var_balance1Adjusted_1708
                        let expr_1723 := _384
                        /// @src 0:19225:19263  "balance0Adjusted.mul(balance1Adjusted)"
                        let expr_1724 := fun_mul_125(expr_1722_self, expr_1723)
                        /// @src 0:19292:19301  "_reserve0"
                        let _385 := var__reserve0_1548
                        let expr_1727 := _385
                        /// @src 0:19287:19302  "uint(_reserve0)"
                        let expr_1728 := convert_t_uint112_to_t_uint256(expr_1727)
                        /// @src 0:19287:19306  "uint(_reserve0).mul"
                        let expr_1729_self := expr_1728
                        /// @src 0:19307:19316  "_reserve1"
                        let _386 := var__reserve1_1550
                        let expr_1730 := _386
                        /// @src 0:19287:19317  "uint(_reserve0).mul(_reserve1)"
                        let _387 := convert_t_uint112_to_t_uint256(expr_1730)
                        let expr_1731 := fun_mul_125(expr_1729_self, _387)
                        /// @src 0:19287:19321  "uint(_reserve0).mul(_reserve1).mul"
                        let expr_1732_self := expr_1731
                        /// @src 0:19322:19331  "1000 ** 2"
                        let expr_1735 := 0x0f4240
                        /// @src 0:19287:19332  "uint(_reserve0).mul(_reserve1).mul(1000 ** 2)"
                        let _388 := convert_t_rational_1000000_by_1_to_t_uint256(expr_1735)
                        let expr_1736 := fun_mul_125(expr_1732_self, _388)
                        /// @src 0:19225:19332  "balance0Adjusted.mul(balance1Adjusted) >=..."
                        let expr_1737 := iszero(lt(cleanup_t_uint256(expr_1724), cleanup_t_uint256(expr_1736)))
                        /// @src 0:19200:19378  "require(..."
                        require_helper_t_stringliteral_50b159bbb975f5448705db79eafd212ba91c20fe5a110a13759239545d3339af(expr_1737)
                        /// @src 0:19407:19415  "balance0"
                        let _389 := var_balance0_1566
                        let expr_1743 := _389
                        /// @src 0:19417:19425  "balance1"
                        let _390 := var_balance1_1569
                        let expr_1744 := _390
                        /// @src 0:19427:19436  "_reserve0"
                        let _391 := var__reserve0_1548
                        let expr_1745 := _391
                        /// @src 0:19438:19447  "_reserve1"
                        let _392 := var__reserve1_1550
                        let expr_1746 := _392
                        fun__update_1220(expr_1743, expr_1744, expr_1745, expr_1746)
                        /// @src 0:19468:19478  "msg.sender"
                        let expr_1751 := caller()
                        /// @src 0:19480:19489  "amount0In"
                        let _393 := var_amount0In_1652
                        let expr_1752 := _393
                        /// @src 0:19491:19500  "amount1In"
                        let _394 := var_amount1In_1668
                        let expr_1753 := _394
                        /// @src 0:19502:19512  "amount0Out"
                        let _395 := var_amount0Out_1525
                        let expr_1754 := _395
                        /// @src 0:19514:19524  "amount1Out"
                        let _396 := var_amount1Out_1527
                        let expr_1755 := _396
                        /// @src 0:19526:19528  "to"
                        let _397 := var_to_1529
                        let expr_1756 := _397
                        /// @src 0:19463:19529  "Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to)"
                        let _398 := 0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822
                        let _399 := convert_t_address_to_t_address(expr_1751)
                        let _400 := convert_t_address_to_t_address(expr_1756)
                        {
                            let _401 := allocate_unbounded()
                            let _402 := abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack(_401, expr_1752, expr_1753, expr_1754, expr_1755)
                            log3(_401, sub(_402, _401), _398, _399, _400)
                        }
                    }
                    /// @ast-id 1760 @src 0:17236:19536  "function swap(..."
                    function fun_swap_1760(var_amount0Out_1525, var_amount1Out_1527, var_to_1529, var_data_1531_offset, var_data_1531_length)
                    {
                        modifier_lock_1534(var_amount0Out_1525, var_amount1Out_1527, var_to_1529, var_data_1531_offset, var_data_1531_length)
                    }
                    /// @ast-id 1026 @src 0:11078:11209  "modifier lock() {..."
                    function modifier_lock_1765(var_to_1762)
                    {
                        /// @src 0:11112:11120  "unlocked"
                        let _403 := read_from_storage_split_offset_0_t_uint256(0x0c)
                        let expr_1010 := _403
                        /// @src 0:11124:11125  "1"
                        let expr_1011 := 0x01
                        /// @src 0:11112:11125  "unlocked == 1"
                        let expr_1012 := eq(cleanup_t_uint256(expr_1010), convert_t_rational_1_by_1_to_t_uint256(expr_1011))
                        /// @src 0:11104:11147  "require(unlocked == 1, \"UniswapV2: LOCKED\")"
                        require_helper_t_stringliteral_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a(expr_1012)
                        /// @src 0:11168:11169  "0"
                        let expr_1017 := 0x00
                        /// @src 0:11157:11169  "unlocked = 0"
                        let _404 := convert_t_rational_0_by_1_to_t_uint256(expr_1017)
                        update_storage_value_offset_0t_uint256_to_t_uint256(0x0c, _404)
                        let expr_1018 := _404
                        /// @src 0:11179:11180  "_"
                        fun_skim_1810_inner(var_to_1762)
                        /// @src 0:11201:11202  "1"
                        let expr_1022 := 0x01
                        /// @src 0:11190:11202  "unlocked = 1"
                        let _405 := convert_t_rational_1_by_1_to_t_uint256(expr_1022)
                        update_storage_value_offset_0t_uint256_to_t_uint256(0x0c, _405)
                        let expr_1023 := _405
                    }
                    /// @src 0:19582:20003  "function skim(address to) external lock {..."
                    function fun_skim_1810_inner(var_to_1762)
                    {
                        /// @src 0:19650:19656  "token0"
                        let _406 := read_from_storage_split_offset_0_t_address(0x06)
                        let expr_1769 := _406
                        /// @src 0:19632:19656  "address _token0 = token0"
                        let var__token0_1768 := expr_1769
                        /// @src 0:19699:19705  "token1"
                        let _407 := read_from_storage_split_offset_0_t_address(0x07)
                        let expr_1773 := _407
                        /// @src 0:19681:19705  "address _token1 = token1"
                        let var__token1_1772 := expr_1773
                        /// @src 0:19757:19764  "_token0"
                        let _408 := var__token0_1768
                        let expr_1776 := _408
                        /// @src 0:19778:19780  "to"
                        let _409 := var_to_1762
                        let expr_1777 := _409
                        /// @src 0:19801:19808  "_token0"
                        let _410 := var__token0_1768
                        let expr_1779 := _410
                        /// @src 0:19794:19809  "IERC20(_token0)"
                        let expr_1780_address := convert_t_address_to_t_contract$_IERC20_$777(expr_1779)
                        /// @src 0:19794:19819  "IERC20(_token0).balanceOf"
                        let expr_1781_address := convert_t_contract$_IERC20_$777_to_t_address(expr_1780_address)
                        let expr_1781_functionSelector := 0x70a08231
                        /// @src 0:19828:19832  "this"
                        let expr_1784_address := address()
                        /// @src 0:19820:19833  "address(this)"
                        let expr_1785 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1784_address)
                        /// @src 0:19794:19834  "IERC20(_token0).balanceOf(address(this))"
                        let _411 := allocate_unbounded()
                        mstore(_411, shift_left_224(expr_1781_functionSelector))
                        let _412 := abi_encode_tuple_t_address__to_t_address__fromStack(add(_411, 4), expr_1785)
                        let _413 := call(gas(), expr_1781_address, 0, _411, sub(_412, _411), _411, 32)
                        if iszero(_413) { revert_forward_1() }
                        let expr_1786
                        if _413
                        {
                            let _414 := 32
                            if gt(_414, returndatasize()) { _414 := returndatasize() }
                            finalize_allocation(_411, _414)
                            expr_1786 := abi_decode_tuple_t_uint256_fromMemory(_411, add(_411, _414))
                        }
                        /// @src 0:19794:19838  "IERC20(_token0).balanceOf(address(this)).sub"
                        let expr_1787_self := expr_1786
                        /// @src 0:19839:19847  "reserve0"
                        let _415 := read_from_storage_split_offset_0_t_uint112(0x08)
                        let expr_1788 := _415
                        /// @src 0:19794:19848  "IERC20(_token0).balanceOf(address(this)).sub(reserve0)"
                        let _416 := convert_t_uint112_to_t_uint256(expr_1788)
                        let expr_1789 := fun_sub_97(expr_1787_self, _416)
                        fun__safeTransfer_1066(expr_1776, expr_1777, expr_1789)
                        /// @src 0:19895:19902  "_token1"
                        let _417 := var__token1_1772
                        let expr_1793 := _417
                        /// @src 0:19916:19918  "to"
                        let _418 := var_to_1762
                        let expr_1794 := _418
                        /// @src 0:19939:19946  "_token1"
                        let _419 := var__token1_1772
                        let expr_1796 := _419
                        /// @src 0:19932:19947  "IERC20(_token1)"
                        let expr_1797_address := convert_t_address_to_t_contract$_IERC20_$777(expr_1796)
                        /// @src 0:19932:19957  "IERC20(_token1).balanceOf"
                        let expr_1798_address := convert_t_contract$_IERC20_$777_to_t_address(expr_1797_address)
                        let expr_1798_functionSelector := 0x70a08231
                        /// @src 0:19966:19970  "this"
                        let expr_1801_address := address()
                        /// @src 0:19958:19971  "address(this)"
                        let expr_1802 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1801_address)
                        /// @src 0:19932:19972  "IERC20(_token1).balanceOf(address(this))"
                        let _420 := allocate_unbounded()
                        mstore(_420, shift_left_224(expr_1798_functionSelector))
                        let _421 := abi_encode_tuple_t_address__to_t_address__fromStack(add(_420, 4), expr_1802)
                        let _422 := call(gas(), expr_1798_address, 0, _420, sub(_421, _420), _420, 32)
                        if iszero(_422) { revert_forward_1() }
                        let expr_1803
                        if _422
                        {
                            let _423 := 32
                            if gt(_423, returndatasize()) { _423 := returndatasize() }
                            finalize_allocation(_420, _423)
                            expr_1803 := abi_decode_tuple_t_uint256_fromMemory(_420, add(_420, _423))
                        }
                        /// @src 0:19932:19976  "IERC20(_token1).balanceOf(address(this)).sub"
                        let expr_1804_self := expr_1803
                        /// @src 0:19977:19985  "reserve1"
                        let _424 := read_from_storage_split_offset_14_t_uint112(0x08)
                        let expr_1805 := _424
                        /// @src 0:19932:19986  "IERC20(_token1).balanceOf(address(this)).sub(reserve1)"
                        let _425 := convert_t_uint112_to_t_uint256(expr_1805)
                        let expr_1806 := fun_sub_97(expr_1804_self, _425)
                        fun__safeTransfer_1066(expr_1793, expr_1794, expr_1806)
                    }
                    /// @ast-id 1810 @src 0:19582:20003  "function skim(address to) external lock {..."
                    function fun_skim_1810(var_to_1762)
                    {
                        modifier_lock_1765(var_to_1762)
                    }
                    /// @ast-id 1026 @src 0:11078:11209  "modifier lock() {..."
                    function modifier_lock_1813()
                    {
                        /// @src 0:11112:11120  "unlocked"
                        let _426 := read_from_storage_split_offset_0_t_uint256(0x0c)
                        let expr_1010 := _426
                        /// @src 0:11124:11125  "1"
                        let expr_1011 := 0x01
                        /// @src 0:11112:11125  "unlocked == 1"
                        let expr_1012 := eq(cleanup_t_uint256(expr_1010), convert_t_rational_1_by_1_to_t_uint256(expr_1011))
                        /// @src 0:11104:11147  "require(unlocked == 1, \"UniswapV2: LOCKED\")"
                        require_helper_t_stringliteral_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a(expr_1012)
                        /// @src 0:11168:11169  "0"
                        let expr_1017 := 0x00
                        /// @src 0:11157:11169  "unlocked = 0"
                        let _427 := convert_t_rational_0_by_1_to_t_uint256(expr_1017)
                        update_storage_value_offset_0t_uint256_to_t_uint256(0x0c, _427)
                        let expr_1018 := _427
                        /// @src 0:11179:11180  "_"
                        fun_sync_1839_inner()
                        /// @src 0:11201:11202  "1"
                        let expr_1022 := 0x01
                        /// @src 0:11190:11202  "unlocked = 1"
                        let _428 := convert_t_rational_1_by_1_to_t_uint256(expr_1022)
                        update_storage_value_offset_0t_uint256_to_t_uint256(0x0c, _428)
                        let expr_1023 := _428
                    }
                    /// @src 0:20049:20263  "function sync() external lock {..."
                    function fun_sync_1839_inner()
                    {
                        /// @src 0:20117:20123  "token0"
                        let _429 := read_from_storage_split_offset_0_t_address(0x06)
                        let expr_1817 := _429
                        /// @src 0:20110:20124  "IERC20(token0)"
                        let expr_1818_address := convert_t_address_to_t_contract$_IERC20_$777(expr_1817)
                        /// @src 0:20110:20134  "IERC20(token0).balanceOf"
                        let expr_1819_address := convert_t_contract$_IERC20_$777_to_t_address(expr_1818_address)
                        let expr_1819_functionSelector := 0x70a08231
                        /// @src 0:20143:20147  "this"
                        let expr_1822_address := address()
                        /// @src 0:20135:20148  "address(this)"
                        let expr_1823 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1822_address)
                        /// @src 0:20110:20149  "IERC20(token0).balanceOf(address(this))"
                        let _430 := allocate_unbounded()
                        mstore(_430, shift_left_224(expr_1819_functionSelector))
                        let _431 := abi_encode_tuple_t_address__to_t_address__fromStack(add(_430, 4), expr_1823)
                        let _432 := call(gas(), expr_1819_address, 0, _430, sub(_431, _430), _430, 32)
                        if iszero(_432) { revert_forward_1() }
                        let expr_1824
                        if _432
                        {
                            let _433 := 32
                            if gt(_433, returndatasize()) { _433 := returndatasize() }
                            finalize_allocation(_430, _433)
                            expr_1824 := abi_decode_tuple_t_uint256_fromMemory(_430, add(_430, _433))
                        }
                        /// @src 0:20170:20176  "token1"
                        let _434 := read_from_storage_split_offset_0_t_address(0x07)
                        let expr_1826 := _434
                        /// @src 0:20163:20177  "IERC20(token1)"
                        let expr_1827_address := convert_t_address_to_t_contract$_IERC20_$777(expr_1826)
                        /// @src 0:20163:20187  "IERC20(token1).balanceOf"
                        let expr_1828_address := convert_t_contract$_IERC20_$777_to_t_address(expr_1827_address)
                        let expr_1828_functionSelector := 0x70a08231
                        /// @src 0:20196:20200  "this"
                        let expr_1831_address := address()
                        /// @src 0:20188:20201  "address(this)"
                        let expr_1832 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1831_address)
                        /// @src 0:20163:20202  "IERC20(token1).balanceOf(address(this))"
                        let _435 := allocate_unbounded()
                        mstore(_435, shift_left_224(expr_1828_functionSelector))
                        let _436 := abi_encode_tuple_t_address__to_t_address__fromStack(add(_435, 4), expr_1832)
                        let _437 := call(gas(), expr_1828_address, 0, _435, sub(_436, _435), _435, 32)
                        if iszero(_437) { revert_forward_1() }
                        let expr_1833
                        if _437
                        {
                            let _438 := 32
                            if gt(_438, returndatasize()) { _438 := returndatasize() }
                            finalize_allocation(_435, _438)
                            expr_1833 := abi_decode_tuple_t_uint256_fromMemory(_435, add(_435, _438))
                        }
                        /// @src 0:20216:20224  "reserve0"
                        let _439 := read_from_storage_split_offset_0_t_uint112(0x08)
                        let expr_1834 := _439
                        /// @src 0:20238:20246  "reserve1"
                        let _440 := read_from_storage_split_offset_14_t_uint112(0x08)
                        let expr_1835 := _440
                        fun__update_1220(expr_1824, expr_1833, expr_1834, expr_1835)
                    }
                    /// @ast-id 1839 @src 0:20049:20263  "function sync() external lock {..."
                    function fun_sync_1839()
                    { modifier_lock_1813() }
                }
                data ".metadata" hex"a2646970667358221220fb0cf1d257ee5397229745db0c2be90b14578d6345016f033134f5727c9f8f8064736f6c63430008100033"
            }
        }
        data ".metadata" hex"a264697066735822122075625ef819a5939db8dbd037fe8ea33e83ea6b765ae633cb46ee5b79862268af64736f6c63430008100033"
    }
}

Optimized IR:
/// @use-src 0:"UniswapV2Factory.sol"
object "UniswapV2Pair_1840" {
    code {
        /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        constructor_UniswapV2Pair_1840()
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("UniswapV2Pair_1840_deployed"), datasize("UniswapV2Pair_1840_deployed"))
        return(_1, datasize("UniswapV2Pair_1840_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function shift_left_0(value) -> newValue
        { newValue := shl(0, value) }
        function update_byte_slice_32_shift_0(value, toInsert) -> result
        {
            let mask := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function cleanup_t_rational_1_by_1(value) -> cleaned
        { cleaned := value }
        function cleanup_t_uint256(value) -> cleaned
        { cleaned := value }
        function identity(value) -> ret
        { ret := value }
        function convert_t_rational_1_by_1_to_t_uint256(value) -> converted
        {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_1_by_1(value)))
        }
        function prepare_store_t_uint256(value) -> ret
        { ret := value }
        function update_storage_value_offset_0t_rational_1_by_1_to_t_uint256(slot, value_0)
        {
            let convertedValue_0 := convert_t_rational_1_by_1_to_t_uint256(value_0)
            sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_uint256(convertedValue_0)))
        }
        function update_byte_slice_20_shift_0(value, toInsert) -> result
        {
            let mask := 0xffffffffffffffffffffffffffffffffffffffff
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function cleanup_t_uint160(value) -> cleaned
        {
            cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
        }
        function convert_t_uint160_to_t_uint160(value) -> converted
        {
            converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
        }
        function convert_t_uint160_to_t_address(value) -> converted
        {
            converted := convert_t_uint160_to_t_uint160(value)
        }
        function convert_t_address_to_t_address(value) -> converted
        {
            converted := convert_t_uint160_to_t_address(value)
        }
        function prepare_store_t_address(value) -> ret
        { ret := value }
        function update_storage_value_offset_0t_address_to_t_address(slot, value_0)
        {
            let convertedValue_0 := convert_t_address_to_t_address(value_0)
            sstore(slot, update_byte_slice_20_shift_0(sload(slot), prepare_store_t_address(convertedValue_0)))
        }
        /// @ast-id 1075 @src 0:11635:11693  "constructor() public {..."
        function constructor_UniswapV2Pair_1840()
        {
            constructor_UniswapV2ERC20_619()
            /// @src 0:11071:11072  "1"
            let expr_1006 := 0x01
            update_storage_value_offset_0t_rational_1_by_1_to_t_uint256(0x0c, expr_1006)
            /// @src 0:11676:11686  "msg.sender"
            let expr_1071 := caller()
            /// @src 0:11666:11686  "factory = msg.sender"
            update_storage_value_offset_0t_address_to_t_address(0x05, expr_1071)
            let expr_1072 := expr_1071
        }
        /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
        function zero_value_for_split_t_uint256() -> ret
        { ret := 0 }
        function round_up_to_mul_of_32(value) -> result
        {
            result := and(add(value, 31), not(31))
        }
        function panic_error_0x41()
        {
            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
            mstore(4, 0x41)
            revert(0, 0x24)
        }
        function finalize_allocation(memPtr, size)
        {
            let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
            if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
            mstore(64, newFreePtr)
        }
        function allocate_memory(size) -> memPtr
        {
            memPtr := allocate_unbounded()
            finalize_allocation(memPtr, size)
        }
        function array_allocation_size_t_string_memory_ptr(length) -> size
        {
            if gt(length, 0xffffffffffffffff) { panic_error_0x41() }
            size := round_up_to_mul_of_32(length)
            size := add(size, 0x20)
        }
        function allocate_memory_array_t_string_memory_ptr(length) -> memPtr
        {
            let allocSize := array_allocation_size_t_string_memory_ptr(length)
            memPtr := allocate_memory(allocSize)
            mstore(memPtr, length)
        }
        function store_literal_in_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738(memPtr)
        {
            mstore(add(memPtr, 0), "Uniswap V2")
        }
        function copy_literal_to_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738() -> memPtr
        {
            memPtr := allocate_memory_array_t_string_memory_ptr(10)
            store_literal_in_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738(add(memPtr, 32))
        }
        function convert_t_stringliteral_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738_to_t_string_memory_ptr() -> converted
        {
            converted := copy_literal_to_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738()
        }
        /// @src 0:2773:2815  "string public constant name = \"Uniswap V2\""
        function constant_name_252() -> ret_mpos
        {
            /// @src 0:2803:2815  "\"Uniswap V2\""
            let _3_mpos := convert_t_stringliteral_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738_to_t_string_memory_ptr()
            ret_mpos := _3_mpos
        }
        function convert_array_t_string_memory_ptr_to_t_bytes_memory_ptr(value) -> converted
        { converted := value }
        function array_dataslot_t_bytes_memory_ptr(ptr) -> data
        {
            data := ptr
            data := add(ptr, 0x20)
        }
        function array_length_t_bytes_memory_ptr(value) -> length
        { length := mload(value) }
        function store_literal_in_memory_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6(memPtr)
        { mstore(add(memPtr, 0), "1") }
        function copy_literal_to_memory_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6() -> memPtr
        {
            memPtr := allocate_memory_array_t_string_memory_ptr(1)
            store_literal_in_memory_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6(add(memPtr, 32))
        }
        function convert_t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6_to_t_bytes_memory_ptr() -> converted
        {
            converted := copy_literal_to_memory_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6()
        }
        function convert_t_contract$_UniswapV2ERC20_$619_to_t_address(value) -> converted
        {
            converted := convert_t_uint160_to_t_address(value)
        }
        function cleanup_t_bytes32(value) -> cleaned
        { cleaned := value }
        function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos)
        {
            mstore(pos, cleanup_t_bytes32(value))
        }
        function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos)
        {
            mstore(pos, cleanup_t_uint256(value))
        }
        function cleanup_t_address(value) -> cleaned
        {
            cleaned := cleanup_t_uint160(value)
        }
        function abi_encode_t_address_to_t_address_fromStack(value, pos)
        {
            mstore(pos, cleanup_t_address(value))
        }
        function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack(headStart, value0, value1, value2, value3, value4) -> tail
        {
            tail := add(headStart, 160)
            abi_encode_t_bytes32_to_t_bytes32_fromStack(value0, add(headStart, 0))
            abi_encode_t_bytes32_to_t_bytes32_fromStack(value1, add(headStart, 32))
            abi_encode_t_bytes32_to_t_bytes32_fromStack(value2, add(headStart, 64))
            abi_encode_t_uint256_to_t_uint256_fromStack(value3, add(headStart, 96))
            abi_encode_t_address_to_t_address_fromStack(value4, add(headStart, 128))
        }
        function convert_t_bytes32_to_t_bytes32(value) -> converted
        {
            converted := cleanup_t_bytes32(value)
        }
        function shift_right_0_unsigned(value) -> newValue
        { newValue := shr(0, value) }
        function prepare_store_t_bytes32(value) -> ret
        {
            ret := shift_right_0_unsigned(value)
        }
        function update_storage_value_offset_0t_bytes32_to_t_bytes32(slot, value_0)
        {
            let convertedValue_0 := convert_t_bytes32_to_t_bytes32(value_0)
            sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_bytes32(convertedValue_0)))
        }
        /// @ast-id 315 @src 0:3360:3837  "constructor() {..."
        function constructor_UniswapV2ERC20_619()
        {
            constructor_IUniswapV2ERC20_243()
            /// @src 0:3384:3396  "uint chainId"
            let var_chainId_283
            let zero_t_uint256_2 := zero_value_for_split_t_uint256()
            var_chainId_283 := zero_t_uint256_2
            /// @src 0:3406:3459  "assembly {..."
            { var_chainId_283 := chainid() }
            /// @src 0:3538:3671  "keccak256(..."
            let expr_292 := 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f
            /// @src 0:3705:3709  "name"
            let expr_296_mpos := constant_name_252()
            /// @src 0:3699:3710  "bytes(name)"
            let expr_297_mpos := convert_array_t_string_memory_ptr_to_t_bytes_memory_ptr(expr_296_mpos)
            /// @src 0:3689:3711  "keccak256(bytes(name))"
            let expr_298 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_297_mpos), array_length_t_bytes_memory_ptr(expr_297_mpos))
            /// @src 0:3739:3749  "bytes(\"1\")"
            let expr_303_mpos := convert_t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6_to_t_bytes_memory_ptr()
            /// @src 0:3729:3750  "keccak256(bytes(\"1\"))"
            let expr_304 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_303_mpos), array_length_t_bytes_memory_ptr(expr_303_mpos))
            /// @src 0:3768:3775  "chainId"
            let _4 := var_chainId_283
            let expr_305 := _4
            /// @src 0:3801:3805  "this"
            let expr_308_address := address()
            /// @src 0:3793:3806  "address(this)"
            let expr_309 := convert_t_contract$_UniswapV2ERC20_$619_to_t_address(expr_308_address)
            /// @src 0:3510:3820  "abi.encode(..."
            let expr_310_mpos := allocate_unbounded()
            let _5 := add(expr_310_mpos, 0x20)
            let _6 := abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack(_5, expr_292, expr_298, expr_304, expr_305, expr_309)
            mstore(expr_310_mpos, sub(_6, add(expr_310_mpos, 0x20)))
            finalize_allocation(expr_310_mpos, sub(_6, expr_310_mpos))
            /// @src 0:3487:3830  "keccak256(..."
            let expr_311 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_310_mpos), array_length_t_bytes_memory_ptr(expr_310_mpos))
            /// @src 0:3468:3830  "DOMAIN_SEPARATOR = keccak256(..."
            update_storage_value_offset_0t_bytes32_to_t_bytes32(0x03, expr_311)
            let expr_312 := expr_311
        }
        /// @src 0:1421:2618  "interface IUniswapV2ERC20 {..."
        function constructor_IUniswapV2ERC20_243()
        {
            constructor_IUniswapV2Pair_946()
        }
        /// @src 0:8527:9899  "interface IUniswapV2Pair {..."
        function constructor_IUniswapV2Pair_946()
        { }
    }
    /// @use-src 0:"UniswapV2Factory.sol"
    object "UniswapV2Pair_1840_deployed" {
        code {
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            mstore(64, memoryguard(128))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := shift_right_224_unsigned(calldataload(0))
                switch selector
                case 0x022c0d9f { external_fun_swap_1760() }
                case 0x06fdde03 { external_fun_name_252() }
                case 0x0902f1ac {
                    external_fun_getReserves_1048()
                }
                case 0x095ea7b3 { external_fun_approve_466() }
                case 0x0dfe1681 { external_fun_token0_990() }
                case 0x18160ddd {
                    external_fun_totalSupply_260()
                }
                case 0x23b872dd {
                    external_fun_transferFrom_539()
                }
                case 0x30adf81f {
                    external_fun_PERMIT_TYPEHASH_275()
                }
                case 0x313ce567 { external_fun_decimals_258() }
                case 0x3644e515 {
                    external_fun_DOMAIN_SEPARATOR_272()
                }
                case 0x485cc955 {
                    external_fun_initialize_1099()
                }
                case 0x5909c0d5 {
                    external_fun_price0CumulativeLast_1000()
                }
                case 0x5a3d5493 {
                    external_fun_price1CumulativeLast_1002()
                }
                case 0x6a627842 { external_fun_mint_1352() }
                case 0x70a08231 { external_fun_balanceOf_264() }
                case 0x7464fc3d { external_fun_kLast_1004() }
                case 0x7ecebe00 { external_fun_nonces_279() }
                case 0x89afcb44 { external_fun_burn_1523() }
                case 0x95d89b41 { external_fun_symbol_255() }
                case 0xa9059cbb { external_fun_transfer_485() }
                case 0xb518a776 { external_fun_tmp_1332() }
                case 0xba9a7a56 {
                    external_fun_MINIMUM_LIQUIDITY_975()
                }
                case 0xbc25cf77 { external_fun_skim_1810() }
                case 0xc45a0155 { external_fun_factory_988() }
                case 0xd21220a7 { external_fun_token1_992() }
                case 0xd505accf { external_fun_permit_618() }
                case 0xdd62ed3e { external_fun_allowance_270() }
                case 0xfff6cae9 { external_fun_sync_1839() }
                default { }
            }
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
            { revert(0, 0) }
            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
            { revert(0, 0) }
            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
            { revert(0, 0) }
            function cleanup_t_uint256(value) -> cleaned
            { cleaned := value }
            function validator_revert_t_uint256(value)
            {
                if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }
            }
            function abi_decode_t_uint256(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_uint256(value)
            }
            function cleanup_t_uint160(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function cleanup_t_address(value) -> cleaned
            {
                cleaned := cleanup_t_uint160(value)
            }
            function validator_revert_t_address(value)
            {
                if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }
            }
            function abi_decode_t_address(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_address(value)
            }
            function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()
            { revert(0, 0) }
            function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490()
            { revert(0, 0) }
            function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()
            { revert(0, 0) }
            function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length
            {
                if iszero(slt(add(offset, 0x1f), end))
                {
                    revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()
                }
                length := calldataload(offset)
                if gt(length, 0xffffffffffffffff)
                {
                    revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490()
                }
                arrayPos := add(offset, 0x20)
                if gt(add(arrayPos, mul(length, 0x01)), end)
                {
                    revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()
                }
            }
            function abi_decode_tuple_t_uint256t_uint256t_addresst_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4
            {
                if slt(sub(dataEnd, headStart), 128)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 64
                    value2 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := calldataload(add(headStart, 96))
                    if gt(offset, 0xffffffffffffffff)
                    {
                        revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
                    }
                    value3, value4 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)
                }
            }
            function abi_encode_tuple__to__fromStack(headStart) -> tail
            { tail := add(headStart, 0) }
            function external_fun_swap_1760()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1, param_2, param_3, param_4 := abi_decode_tuple_t_uint256t_uint256t_addresst_bytes_calldata_ptr(4, calldatasize())
                fun_swap_1760(param_0, param_1, param_2, param_3, param_4)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_decode_tuple_(headStart, dataEnd)
            {
                if slt(sub(dataEnd, headStart), 0)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
            }
            function round_up_to_mul_of_32(value) -> result
            {
                result := and(add(value, 31), not(31))
            }
            function panic_error_0x41()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x41)
                revert(0, 0x24)
            }
            function finalize_allocation(memPtr, size)
            {
                let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
                mstore(64, newFreePtr)
            }
            function allocate_memory(size) -> memPtr
            {
                memPtr := allocate_unbounded()
                finalize_allocation(memPtr, size)
            }
            function array_allocation_size_t_string_memory_ptr(length) -> size
            {
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }
                size := round_up_to_mul_of_32(length)
                size := add(size, 0x20)
            }
            function allocate_memory_array_t_string_memory_ptr(length) -> memPtr
            {
                let allocSize := array_allocation_size_t_string_memory_ptr(length)
                memPtr := allocate_memory(allocSize)
                mstore(memPtr, length)
            }
            function store_literal_in_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738(memPtr)
            {
                mstore(add(memPtr, 0), "Uniswap V2")
            }
            function copy_literal_to_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738() -> memPtr
            {
                memPtr := allocate_memory_array_t_string_memory_ptr(10)
                store_literal_in_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738(add(memPtr, 32))
            }
            function convert_t_stringliteral_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738_to_t_string_memory_ptr() -> converted
            {
                converted := copy_literal_to_memory_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738()
            }
            /// @src 0:2773:2815  "string public constant name = \"Uniswap V2\""
            function constant_name_252() -> ret_mpos
            {
                /// @src 0:2803:2815  "\"Uniswap V2\""
                let _1_mpos := convert_t_stringliteral_bfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738_to_t_string_memory_ptr()
                ret_mpos := _1_mpos
            }
            /// @ast-id 252 @src 0:2773:2815  "string public constant name = \"Uniswap V2\""
            function getter_fun_name_252() -> ret_0
            { ret_0 := constant_name_252() }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function array_length_t_string_memory_ptr(value) -> length
            { length := mload(value) }
            function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos
            {
                mstore(pos, length)
                updated_pos := add(pos, 0x20)
            }
            function copy_memory_to_memory_with_cleanup(src, dst, length)
            {
                let i := 0
                for { } lt(i, length) { i := add(i, 32) }
                {
                    mstore(add(dst, i), mload(add(src, i)))
                }
                mstore(add(dst, length), 0)
            }
            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end
            {
                let length := array_length_t_string_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)
                copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)
                end := add(pos, round_up_to_mul_of_32(length))
            }
            function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0, tail)
            }
            function external_fun_name_252()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_name_252()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_t_uint112(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffff)
            }
            function abi_encode_t_uint112_to_t_uint112_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_uint112(value))
            }
            function cleanup_t_uint32(value) -> cleaned
            {
                cleaned := and(value, 0xffffffff)
            }
            function abi_encode_t_uint32_to_t_uint32_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_uint32(value))
            }
            function abi_encode_tuple_t_uint112_t_uint112_t_uint32__to_t_uint112_t_uint112_t_uint32__fromStack(headStart, value0, value1, value2) -> tail
            {
                tail := add(headStart, 96)
                abi_encode_t_uint112_to_t_uint112_fromStack(value0, add(headStart, 0))
                abi_encode_t_uint112_to_t_uint112_fromStack(value1, add(headStart, 32))
                abi_encode_t_uint32_to_t_uint32_fromStack(value2, add(headStart, 64))
            }
            function external_fun_getReserves_1048()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0, ret_1, ret_2 := fun_getReserves_1048()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint112_t_uint112_t_uint32__to_t_uint112_t_uint112_t_uint32__fromStack(memPos, ret_0, ret_1, ret_2)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1
            {
                if slt(sub(dataEnd, headStart), 64)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
            }
            function cleanup_t_bool(value) -> cleaned
            {
                cleaned := iszero(iszero(value))
            }
            function abi_encode_t_bool_to_t_bool_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_bool(value))
            }
            function abi_encode_tuple_t_bool__to_t_bool__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_bool_to_t_bool_fromStack(value0, add(headStart, 0))
            }
            function external_fun_approve_466()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1 := abi_decode_tuple_t_addresst_uint256(4, calldatasize())
                let ret_0 := fun_approve_466(param_0, param_1)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function shift_right_unsigned_dynamic(bits, value) -> newValue
            { newValue := shr(bits, value) }
            function cleanup_from_storage_t_address(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function extract_from_storage_value_dynamict_address(slot_value, offset) -> value
            {
                value := cleanup_from_storage_t_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
            }
            function read_from_storage_split_dynamic_t_address(slot, offset) -> value
            {
                value := extract_from_storage_value_dynamict_address(sload(slot), offset)
            }
            /// @ast-id 990 @src 0:10544:10565  "address public token0"
            function getter_fun_token0_990() -> ret
            {
                let slot := 6
                let offset := 0
                ret := read_from_storage_split_dynamic_t_address(slot, offset)
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function abi_encode_t_address_to_t_address_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_address(value))
            }
            function abi_encode_tuple_t_address__to_t_address__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_address_to_t_address_fromStack(value0, add(headStart, 0))
            }
            function external_fun_token0_990()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_token0_990()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_from_storage_t_uint256(value) -> cleaned
            { cleaned := value }
            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value
            {
                value := cleanup_from_storage_t_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
            }
            function read_from_storage_split_dynamic_t_uint256(slot, offset) -> value
            {
                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)
            }
            /// @ast-id 260 @src 0:2908:2931  "uint public totalSupply"
            function getter_fun_totalSupply_260() -> ret
            {
                let slot := 0
                let offset := 0
                ret := read_from_storage_split_dynamic_t_uint256(slot, offset)
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_uint256(value))
            }
            function abi_encode_tuple_t_uint256__to_t_uint256__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_uint256_to_t_uint256_fromStack(value0, add(headStart, 0))
            }
            function external_fun_totalSupply_260()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_totalSupply_260()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2
            {
                if slt(sub(dataEnd, headStart), 96)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value1 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 64
                    value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
            }
            function external_fun_transferFrom_539()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1, param_2 := abi_decode_tuple_t_addresst_addresst_uint256(4, calldatasize())
                let ret_0 := fun_transferFrom_539(param_0, param_1, param_2)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_t_rational_49955707469362902507454157297736832118868343942642399513960811609542965143241_by_1(value) -> cleaned
            { cleaned := value }
            function cleanup_t_bytes32(value) -> cleaned
            { cleaned := value }
            function shift_left_0(value) -> newValue
            { newValue := shl(0, value) }
            function convert_t_rational_49955707469362902507454157297736832118868343942642399513960811609542965143241_by_1_to_t_bytes32(value) -> converted
            {
                converted := cleanup_t_bytes32(shift_left_0(cleanup_t_rational_49955707469362902507454157297736832118868343942642399513960811609542965143241_by_1(value)))
            }
            /// @src 0:3193:3309  "bytes32 public constant PERMIT_TYPEHASH =..."
            function constant_PERMIT_TYPEHASH_275() -> ret
            {
                /// @src 0:3243:3309  "0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9"
                let expr_274 := 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9
                let _2 := convert_t_rational_49955707469362902507454157297736832118868343942642399513960811609542965143241_by_1_to_t_bytes32(expr_274)
                ret := _2
            }
            /// @ast-id 275 @src 0:3193:3309  "bytes32 public constant PERMIT_TYPEHASH =..."
            function getter_fun_PERMIT_TYPEHASH_275() -> ret_0
            {
                ret_0 := constant_PERMIT_TYPEHASH_275()
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_bytes32(value))
            }
            function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_bytes32_to_t_bytes32_fromStack(value0, add(headStart, 0))
            }
            function external_fun_PERMIT_TYPEHASH_275()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_PERMIT_TYPEHASH_275()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_t_rational_18_by_1(value) -> cleaned
            { cleaned := value }
            function cleanup_t_uint8(value) -> cleaned
            { cleaned := and(value, 0xff) }
            function identity(value) -> ret
            { ret := value }
            function convert_t_rational_18_by_1_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_18_by_1(value)))
            }
            /// @src 0:2867:2902  "uint8 public constant decimals = 18"
            function constant_decimals_258() -> ret
            {
                /// @src 0:2900:2902  "18"
                let expr_257 := 0x12
                let _3 := convert_t_rational_18_by_1_to_t_uint8(expr_257)
                ret := _3
            }
            /// @ast-id 258 @src 0:2867:2902  "uint8 public constant decimals = 18"
            function getter_fun_decimals_258() -> ret_0
            {
                ret_0 := constant_decimals_258()
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_uint8(value))
            }
            function abi_encode_tuple_t_uint8__to_t_uint8__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_uint8_to_t_uint8_fromStack(value0, add(headStart, 0))
            }
            function external_fun_decimals_258()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_decimals_258()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint8__to_t_uint8__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_from_storage_t_bytes32(value) -> cleaned
            { cleaned := value }
            function extract_from_storage_value_dynamict_bytes32(slot_value, offset) -> value
            {
                value := cleanup_from_storage_t_bytes32(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
            }
            function read_from_storage_split_dynamic_t_bytes32(slot, offset) -> value
            {
                value := extract_from_storage_value_dynamict_bytes32(sload(slot), offset)
            }
            /// @ast-id 272 @src 0:3052:3083  "bytes32 public DOMAIN_SEPARATOR"
            function getter_fun_DOMAIN_SEPARATOR_272() -> ret
            {
                let slot := 3
                let offset := 0
                ret := read_from_storage_split_dynamic_t_bytes32(slot, offset)
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function external_fun_DOMAIN_SEPARATOR_272()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_DOMAIN_SEPARATOR_272()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1
            {
                if slt(sub(dataEnd, headStart), 64)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value1 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
            }
            function external_fun_initialize_1099()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1 := abi_decode_tuple_t_addresst_address(4, calldatasize())
                fun_initialize_1099(param_0, param_1)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            /// @ast-id 1000 @src 0:10867:10899  "uint public price0CumulativeLast"
            function getter_fun_price0CumulativeLast_1000() -> ret
            {
                let slot := 9
                let offset := 0
                ret := read_from_storage_split_dynamic_t_uint256(slot, offset)
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function external_fun_price0CumulativeLast_1000()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_price0CumulativeLast_1000()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            /// @ast-id 1002 @src 0:10905:10937  "uint public price1CumulativeLast"
            function getter_fun_price1CumulativeLast_1002() -> ret
            {
                let slot := 10
                let offset := 0
                ret := read_from_storage_split_dynamic_t_uint256(slot, offset)
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function external_fun_price1CumulativeLast_1002()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_price1CumulativeLast_1002()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_decode_tuple_t_address(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
            }
            function external_fun_mint_1352()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                let ret_0 := fun_mint_1352(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function convert_t_uint160_to_t_uint160(value) -> converted
            {
                converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
            }
            function convert_t_uint160_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_uint160(value)
            }
            function convert_t_address_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_address(value)
            }
            function mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(slot, key) -> dataSlot
            {
                mstore(0, convert_t_address_to_t_address(key))
                mstore(0x20, slot)
                dataSlot := keccak256(0, 0x40)
            }
            /// @ast-id 264 @src 0:2937:2978  "mapping(address => uint) public balanceOf"
            function getter_fun_balanceOf_264(key_0) -> ret
            {
                let slot := 1
                let offset := 0
                slot := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(slot, key_0)
                ret := read_from_storage_split_dynamic_t_uint256(slot, offset)
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function external_fun_balanceOf_264()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                let ret_0 := getter_fun_balanceOf_264(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            /// @ast-id 1004 @src 0:10943:10960  "uint public kLast"
            function getter_fun_kLast_1004() -> ret
            {
                let slot := 11
                let offset := 0
                ret := read_from_storage_split_dynamic_t_uint256(slot, offset)
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function external_fun_kLast_1004()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_kLast_1004()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            /// @ast-id 279 @src 0:3315:3353  "mapping(address => uint) public nonces"
            function getter_fun_nonces_279(key_0) -> ret
            {
                let slot := 4
                let offset := 0
                slot := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(slot, key_0)
                ret := read_from_storage_split_dynamic_t_uint256(slot, offset)
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function external_fun_nonces_279()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                let ret_0 := getter_fun_nonces_279(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack(headStart, value0, value1) -> tail
            {
                tail := add(headStart, 64)
                abi_encode_t_uint256_to_t_uint256_fromStack(value0, add(headStart, 0))
                abi_encode_t_uint256_to_t_uint256_fromStack(value1, add(headStart, 32))
            }
            function external_fun_burn_1523()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                let ret_0, ret_1 := fun_burn_1523(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack(memPos, ret_0, ret_1)
                return(memPos, sub(memEnd, memPos))
            }
            function store_literal_in_memory_0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba563255(memPtr)
            {
                mstore(add(memPtr, 0), "UNI-V2")
            }
            function copy_literal_to_memory_0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba563255() -> memPtr
            {
                memPtr := allocate_memory_array_t_string_memory_ptr(6)
                store_literal_in_memory_0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba563255(add(memPtr, 32))
            }
            function convert_t_stringliteral_0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba563255_to_t_string_memory_ptr() -> converted
            {
                converted := copy_literal_to_memory_0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba563255()
            }
            /// @src 0:2821:2861  "string public constant symbol = \"UNI-V2\""
            function constant_symbol_255() -> ret_mpos
            {
                /// @src 0:2853:2861  "\"UNI-V2\""
                let _4_mpos := convert_t_stringliteral_0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba563255_to_t_string_memory_ptr()
                ret_mpos := _4_mpos
            }
            /// @ast-id 255 @src 0:2821:2861  "string public constant symbol = \"UNI-V2\""
            function getter_fun_symbol_255() -> ret_0
            {
                ret_0 := constant_symbol_255()
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function external_fun_symbol_255()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_symbol_255()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_transfer_485()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1 := abi_decode_tuple_t_addresst_uint256(4, calldatasize())
                let ret_0 := fun_transfer_485(param_0, param_1)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_tmp_1332()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                fun_tmp_1332()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_t_rational_1000_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_1000_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_1000_by_1(value)))
            }
            /// @src 0:10359:10407  "uint public constant MINIMUM_LIQUIDITY = 10 ** 3"
            function constant_MINIMUM_LIQUIDITY_975() -> ret
            {
                /// @src 0:10400:10407  "10 ** 3"
                let expr_974 := 0x03e8
                let _5 := convert_t_rational_1000_by_1_to_t_uint256(expr_974)
                ret := _5
            }
            /// @ast-id 975 @src 0:10359:10407  "uint public constant MINIMUM_LIQUIDITY = 10 ** 3"
            function getter_fun_MINIMUM_LIQUIDITY_975() -> ret_0
            {
                ret_0 := constant_MINIMUM_LIQUIDITY_975()
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function external_fun_MINIMUM_LIQUIDITY_975()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_MINIMUM_LIQUIDITY_975()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_skim_1810()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                fun_skim_1810(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            /// @ast-id 988 @src 0:10516:10538  "address public factory"
            function getter_fun_factory_988() -> ret
            {
                let slot := 5
                let offset := 0
                ret := read_from_storage_split_dynamic_t_address(slot, offset)
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function external_fun_factory_988()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_factory_988()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            /// @ast-id 992 @src 0:10571:10592  "address public token1"
            function getter_fun_token1_992() -> ret
            {
                let slot := 7
                let offset := 0
                ret := read_from_storage_split_dynamic_t_address(slot, offset)
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function external_fun_token1_992()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_token1_992()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function validator_revert_t_uint8(value)
            {
                if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }
            }
            function abi_decode_t_uint8(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_uint8(value)
            }
            function validator_revert_t_bytes32(value)
            {
                if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }
            }
            function abi_decode_t_bytes32(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_bytes32(value)
            }
            function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6
            {
                if slt(sub(dataEnd, headStart), 224)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value1 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 64
                    value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 96
                    value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 128
                    value4 := abi_decode_t_uint8(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 160
                    value5 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 192
                    value6 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)
                }
            }
            function external_fun_permit_618()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1, param_2, param_3, param_4, param_5, param_6 := abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(4, calldatasize())
                fun_permit_618(param_0, param_1, param_2, param_3, param_4, param_5, param_6)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address(slot, key) -> dataSlot
            {
                mstore(0, convert_t_address_to_t_address(key))
                mstore(0x20, slot)
                dataSlot := keccak256(0, 0x40)
            }
            /// @ast-id 270 @src 0:2984:3045  "mapping(address => mapping(address => uint)) public allowance"
            function getter_fun_allowance_270(key_0, key_1) -> ret
            {
                let slot := 2
                let offset := 0
                slot := mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address(slot, key_0)
                slot := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(slot, key_1)
                ret := read_from_storage_split_dynamic_t_uint256(slot, offset)
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function external_fun_allowance_270()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1 := abi_decode_tuple_t_addresst_address(4, calldatasize())
                let ret_0 := getter_fun_allowance_270(param_0, param_1)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_sync_1839()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                fun_sync_1839()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
            function zero_value_for_split_t_bool() -> ret
            { ret := 0 }
            /// @ast-id 466 @src 0:4651:4795  "function approve(address spender, uint value) external returns (bool) {..."
            function fun_approve_466(var_spender_449, var_value_451) -> var__454
            {
                /// @src 0:4715:4719  "bool"
                let zero_t_bool_6 := zero_value_for_split_t_bool()
                var__454 := zero_t_bool_6
                /// @src 0:4740:4750  "msg.sender"
                let expr_458 := caller()
                /// @src 0:4752:4759  "spender"
                let _7 := var_spender_449
                let expr_459 := _7
                /// @src 0:4761:4766  "value"
                let _8 := var_value_451
                let expr_460 := _8
                fun__approve_409(expr_458, expr_459, expr_460)
                /// @src 0:4784:4788  "true"
                let expr_463 := 0x01
                /// @src 0:4777:4788  "return true"
                var__454 := expr_463
                leave
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function update_byte_slice_32_shift_0(value, toInsert) -> result
            {
                let mask := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_uint256_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))
            }
            function prepare_store_t_uint256(value) -> ret
            { ret := value }
            function update_storage_value_offset_0t_uint256_to_t_uint256(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)
                sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_uint256(convertedValue_0)))
            }
            /// @ast-id 409 @src 0:4257:4423  "function _approve(address owner, address spender, uint value) private {..."
            function fun__approve_409(var_owner_387, var_spender_389, var_value_391)
            {
                /// @src 0:4365:4370  "value"
                let _9 := var_value_391
                let expr_399 := _9
                /// @src 0:4337:4346  "allowance"
                let _10 := 0x02
                let expr_394 := _10
                /// @src 0:4347:4352  "owner"
                let _11 := var_owner_387
                let expr_395 := _11
                /// @src 0:4337:4353  "allowance[owner]"
                let _12 := mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address(expr_394, expr_395)
                let _13 := _12
                let expr_397 := _13
                /// @src 0:4354:4361  "spender"
                let _14 := var_spender_389
                let expr_396 := _14
                /// @src 0:4337:4362  "allowance[owner][spender]"
                let _15 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_397, expr_396)
                /// @src 0:4337:4370  "allowance[owner][spender] = value"
                update_storage_value_offset_0t_uint256_to_t_uint256(_15, expr_399)
                let expr_400 := expr_399
                /// @src 0:4394:4399  "owner"
                let _16 := var_owner_387
                let expr_403 := _16
                /// @src 0:4401:4408  "spender"
                let _17 := var_spender_389
                let expr_404 := _17
                /// @src 0:4410:4415  "value"
                let _18 := var_value_391
                let expr_405 := _18
                /// @src 0:4385:4416  "Approval(owner, spender, value)"
                let _19 := 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925
                let _20 := convert_t_address_to_t_address(expr_403)
                let _21 := convert_t_address_to_t_address(expr_404)
                {
                    let _22 := allocate_unbounded()
                    let _23 := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(_22, expr_405)
                    log3(_22, sub(_23, _22), _19, _20, _21)
                }
            }
            /// @ast-id 485 @src 0:4801:4937  "function transfer(address to, uint value) external returns (bool) {..."
            function fun_transfer_485(var_to_468, var_value_470) -> var__473
            {
                /// @src 0:4861:4865  "bool"
                let zero_t_bool_24 := zero_value_for_split_t_bool()
                var__473 := zero_t_bool_24
                /// @src 0:4887:4897  "msg.sender"
                let expr_477 := caller()
                /// @src 0:4899:4901  "to"
                let _25 := var_to_468
                let expr_478 := _25
                /// @src 0:4903:4908  "value"
                let _26 := var_value_470
                let expr_479 := _26
                fun__transfer_447(expr_477, expr_478, expr_479)
                /// @src 0:4926:4930  "true"
                let expr_482 := 0x01
                /// @src 0:4919:4930  "return true"
                var__473 := expr_482
                leave
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function shift_right_0_unsigned(value) -> newValue
            { newValue := shr(0, value) }
            function extract_from_storage_value_offset_0t_uint256(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint256(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_uint256(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_uint256(sload(slot))
            }
            /// @ast-id 447 @src 0:4429:4645  "function _transfer(address from, address to, uint value) private {..."
            function fun__transfer_447(var_from_411, var_to_413, var_value_415)
            {
                /// @src 0:4522:4531  "balanceOf"
                let _27 := 0x01
                let expr_421 := _27
                /// @src 0:4532:4536  "from"
                let _28 := var_from_411
                let expr_422 := _28
                /// @src 0:4522:4537  "balanceOf[from]"
                let _29 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_421, expr_422)
                let _30 := read_from_storage_split_offset_0_t_uint256(_29)
                let expr_423 := _30
                /// @src 0:4522:4541  "balanceOf[from].sub"
                let expr_424_self := expr_423
                /// @src 0:4542:4547  "value"
                let _31 := var_value_415
                let expr_425 := _31
                /// @src 0:4522:4548  "balanceOf[from].sub(value)"
                let expr_426 := fun_sub_97(expr_424_self, expr_425)
                /// @src 0:4504:4513  "balanceOf"
                let _32 := 0x01
                let expr_418 := _32
                /// @src 0:4514:4518  "from"
                let _33 := var_from_411
                let expr_419 := _33
                /// @src 0:4504:4519  "balanceOf[from]"
                let _34 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_418, expr_419)
                /// @src 0:4504:4548  "balanceOf[from] = balanceOf[from].sub(value)"
                update_storage_value_offset_0t_uint256_to_t_uint256(_34, expr_426)
                let expr_427 := expr_426
                /// @src 0:4574:4583  "balanceOf"
                let _35 := 0x01
                let expr_432 := _35
                /// @src 0:4584:4586  "to"
                let _36 := var_to_413
                let expr_433 := _36
                /// @src 0:4574:4587  "balanceOf[to]"
                let _37 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_432, expr_433)
                let _38 := read_from_storage_split_offset_0_t_uint256(_37)
                let expr_434 := _38
                /// @src 0:4574:4591  "balanceOf[to].add"
                let expr_435_self := expr_434
                /// @src 0:4592:4597  "value"
                let _39 := var_value_415
                let expr_436 := _39
                /// @src 0:4574:4598  "balanceOf[to].add(value)"
                let expr_437 := fun_add_75(expr_435_self, expr_436)
                /// @src 0:4558:4567  "balanceOf"
                let _40 := 0x01
                let expr_429 := _40
                /// @src 0:4568:4570  "to"
                let _41 := var_to_413
                let expr_430 := _41
                /// @src 0:4558:4571  "balanceOf[to]"
                let _42 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_429, expr_430)
                /// @src 0:4558:4598  "balanceOf[to] = balanceOf[to].add(value)"
                update_storage_value_offset_0t_uint256_to_t_uint256(_42, expr_437)
                let expr_438 := expr_437
                /// @src 0:4622:4626  "from"
                let _43 := var_from_411
                let expr_441 := _43
                /// @src 0:4628:4630  "to"
                let _44 := var_to_413
                let expr_442 := _44
                /// @src 0:4632:4637  "value"
                let _45 := var_value_415
                let expr_443 := _45
                /// @src 0:4613:4638  "Transfer(from, to, value)"
                let _46 := 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
                let _47 := convert_t_address_to_t_address(expr_441)
                let _48 := convert_t_address_to_t_address(expr_442)
                {
                    let _49 := allocate_unbounded()
                    let _50 := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(_49, expr_443)
                    log3(_49, sub(_50, _49), _46, _47, _48)
                }
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function zero_value_for_split_t_uint256() -> ret
            { ret := 0 }
            function panic_error_0x11()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x11)
                revert(0, 0x24)
            }
            function checked_add_t_uint256(x, y) -> sum
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                sum := add(x, y)
                if gt(x, sum) { panic_error_0x11() }
            }
            function store_literal_in_memory_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db(memPtr)
            {
                mstore(add(memPtr, 0), "ds-math-add-overflow")
            }
            function abi_encode_t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)
                store_literal_in_memory_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @ast-id 75 @src 0:926:1052  "function add(uint x, uint y) internal pure returns (uint z) {..."
            function fun_add_75(var_x_55, var_y_57) -> var_z_60
            {
                /// @src 0:978:984  "uint z"
                let zero_t_uint256_51 := zero_value_for_split_t_uint256()
                var_z_60 := zero_t_uint256_51
                /// @src 0:1009:1010  "x"
                let _52 := var_x_55
                let expr_64 := _52
                /// @src 0:1013:1014  "y"
                let _53 := var_y_57
                let expr_65 := _53
                /// @src 0:1009:1014  "x + y"
                let expr_66 := checked_add_t_uint256(expr_64, expr_65)
                /// @src 0:1005:1014  "z = x + y"
                var_z_60 := expr_66
                let expr_67 := expr_66
                /// @src 0:1004:1015  "(z = x + y)"
                let expr_68 := expr_67
                /// @src 0:1019:1020  "x"
                let _54 := var_x_55
                let expr_69 := _54
                /// @src 0:1004:1020  "(z = x + y) >= x"
                let expr_70 := iszero(lt(cleanup_t_uint256(expr_68), cleanup_t_uint256(expr_69)))
                /// @src 0:996:1045  "require((z = x + y) >= x, \"ds-math-add-overflow\")"
                require_helper_t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db(expr_70)
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function checked_sub_t_uint256(x, y) -> diff
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                diff := sub(x, y)
                if gt(diff, x) { panic_error_0x11() }
            }
            function store_literal_in_memory_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590(memPtr)
            {
                mstore(add(memPtr, 0), "ds-math-sub-underflow")
            }
            function abi_encode_t_stringliteral_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 21)
                store_literal_in_memory_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @ast-id 97 @src 0:1058:1185  "function sub(uint x, uint y) internal pure returns (uint z) {..."
            function fun_sub_97(var_x_77, var_y_79) -> var_z_82
            {
                /// @src 0:1110:1116  "uint z"
                let zero_t_uint256_55 := zero_value_for_split_t_uint256()
                var_z_82 := zero_t_uint256_55
                /// @src 0:1141:1142  "x"
                let _56 := var_x_77
                let expr_86 := _56
                /// @src 0:1145:1146  "y"
                let _57 := var_y_79
                let expr_87 := _57
                /// @src 0:1141:1146  "x - y"
                let expr_88 := checked_sub_t_uint256(expr_86, expr_87)
                /// @src 0:1137:1146  "z = x - y"
                var_z_82 := expr_88
                let expr_89 := expr_88
                /// @src 0:1136:1147  "(z = x - y)"
                let expr_90 := expr_89
                /// @src 0:1151:1152  "x"
                let _58 := var_x_77
                let expr_91 := _58
                /// @src 0:1136:1152  "(z = x - y) <= x"
                let expr_92 := iszero(gt(cleanup_t_uint256(expr_90), cleanup_t_uint256(expr_91)))
                /// @src 0:1128:1178  "require((z = x - y) <= x, \"ds-math-sub-underflow\")"
                require_helper_t_stringliteral_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590(expr_92)
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function cleanup_t_rational_minus_1_by_1(value) -> cleaned
            { cleaned := value }
            function cleanup_t_int256(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_minus_1_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_minus_1_by_1(value)))
            }
            function convert_t_int256_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_int256(value)))
            }
            /// @ast-id 539 @src 0:4943:5303  "function transferFrom(..."
            function fun_transferFrom_539(var_from_487, var_to_489, var_value_491) -> var__494
            {
                /// @src 0:5051:5055  "bool"
                let zero_t_bool_59 := zero_value_for_split_t_bool()
                var__494 := zero_t_bool_59
                /// @src 0:5071:5080  "allowance"
                let _60 := 0x02
                let expr_496 := _60
                /// @src 0:5081:5085  "from"
                let _61 := var_from_487
                let expr_497 := _61
                /// @src 0:5071:5086  "allowance[from]"
                let _62 := mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address(expr_496, expr_497)
                let _63 := _62
                let expr_498 := _63
                /// @src 0:5087:5097  "msg.sender"
                let expr_500 := caller()
                /// @src 0:5071:5098  "allowance[from][msg.sender]"
                let _64 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_498, expr_500)
                let _65 := read_from_storage_split_offset_0_t_uint256(_64)
                let expr_501 := _65
                /// @src 0:5111:5113  "-1"
                let expr_507 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                /// @src 0:5107:5114  "int(-1)"
                let expr_508 := convert_t_rational_minus_1_by_1_to_t_int256(expr_507)
                /// @src 0:5102:5115  "uint(int(-1))"
                let expr_509 := convert_t_int256_to_t_uint256(expr_508)
                /// @src 0:5071:5115  "allowance[from][msg.sender] != uint(int(-1))"
                let expr_510 := iszero(eq(cleanup_t_uint256(expr_501), cleanup_t_uint256(expr_509)))
                /// @src 0:5067:5240  "if (allowance[from][msg.sender] != uint(int(-1))) {..."
                if expr_510
                {
                    /// @src 0:5161:5170  "allowance"
                    let _66 := 0x02
                    let expr_517 := _66
                    /// @src 0:5171:5175  "from"
                    let _67 := var_from_487
                    let expr_518 := _67
                    /// @src 0:5161:5176  "allowance[from]"
                    let _68 := mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address(expr_517, expr_518)
                    let _69 := _68
                    let expr_519 := _69
                    /// @src 0:5177:5187  "msg.sender"
                    let expr_521 := caller()
                    /// @src 0:5161:5188  "allowance[from][msg.sender]"
                    let _70 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_519, expr_521)
                    let _71 := read_from_storage_split_offset_0_t_uint256(_70)
                    let expr_522 := _71
                    /// @src 0:5161:5192  "allowance[from][msg.sender].sub"
                    let expr_523_self := expr_522
                    /// @src 0:5210:5215  "value"
                    let _72 := var_value_491
                    let expr_524 := _72
                    /// @src 0:5161:5229  "allowance[from][msg.sender].sub(..."
                    let expr_525 := fun_sub_97(expr_523_self, expr_524)
                    /// @src 0:5131:5140  "allowance"
                    let _73 := 0x02
                    let expr_511 := _73
                    /// @src 0:5141:5145  "from"
                    let _74 := var_from_487
                    let expr_512 := _74
                    /// @src 0:5131:5146  "allowance[from]"
                    let _75 := mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address(expr_511, expr_512)
                    let _76 := _75
                    let expr_515 := _76
                    /// @src 0:5147:5157  "msg.sender"
                    let expr_514 := caller()
                    /// @src 0:5131:5158  "allowance[from][msg.sender]"
                    let _77 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_515, expr_514)
                    /// @src 0:5131:5229  "allowance[from][msg.sender] = allowance[from][msg.sender].sub(..."
                    update_storage_value_offset_0t_uint256_to_t_uint256(_77, expr_525)
                    let expr_526 := expr_525
                }
                /// @src 0:5259:5263  "from"
                let _78 := var_from_487
                let expr_531 := _78
                /// @src 0:5265:5267  "to"
                let _79 := var_to_489
                let expr_532 := _79
                /// @src 0:5269:5274  "value"
                let _80 := var_value_491
                let expr_533 := _80
                fun__transfer_447(expr_531, expr_532, expr_533)
                /// @src 0:5292:5296  "true"
                let expr_536 := 0x01
                /// @src 0:5285:5296  "return true"
                var__494 := expr_536
                leave
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function store_literal_in_memory_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87(memPtr)
            {
                mstore(add(memPtr, 0), "UniswapV2: EXPIRED")
            }
            function abi_encode_t_stringliteral_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 18)
                store_literal_in_memory_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function extract_from_storage_value_offset_0t_bytes32(slot_value) -> value
            {
                value := cleanup_from_storage_t_bytes32(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_bytes32(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_bytes32(sload(slot))
            }
            function increment_t_uint256(value) -> ret
            {
                value := cleanup_t_uint256(value)
                if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }
                ret := add(value, 1)
            }
            function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack(headStart, value0, value1, value2, value3, value4, value5) -> tail
            {
                tail := add(headStart, 192)
                abi_encode_t_bytes32_to_t_bytes32_fromStack(value0, add(headStart, 0))
                abi_encode_t_address_to_t_address_fromStack(value1, add(headStart, 32))
                abi_encode_t_address_to_t_address_fromStack(value2, add(headStart, 64))
                abi_encode_t_uint256_to_t_uint256_fromStack(value3, add(headStart, 96))
                abi_encode_t_uint256_to_t_uint256_fromStack(value4, add(headStart, 128))
                abi_encode_t_uint256_to_t_uint256_fromStack(value5, add(headStart, 160))
            }
            function array_dataslot_t_bytes_memory_ptr(ptr) -> data
            {
                data := ptr
                data := add(ptr, 0x20)
            }
            function array_length_t_bytes_memory_ptr(value) -> length
            { length := mload(value) }
            function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos
            { updated_pos := pos }
            function store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541(memPtr)
            {
                mstore(add(memPtr, 0), 0x1901000000000000000000000000000000000000000000000000000000000000)
            }
            function abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 2)
                store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541(pos)
                end := add(pos, 2)
            }
            function leftAlign_t_bytes32(value) -> aligned
            { aligned := value }
            function abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value, pos)
            {
                mstore(pos, leftAlign_t_bytes32(cleanup_t_bytes32(value)))
            }
            function abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack(pos, value0, value1) -> end
            {
                pos := abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos)
                abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value0, pos)
                pos := add(pos, 32)
                abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value1, pos)
                pos := add(pos, 32)
                end := pos
            }
            function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack(headStart, value0, value1, value2, value3) -> tail
            {
                tail := add(headStart, 128)
                abi_encode_t_bytes32_to_t_bytes32_fromStack(value0, add(headStart, 0))
                abi_encode_t_uint8_to_t_uint8_fromStack(value1, add(headStart, 32))
                abi_encode_t_bytes32_to_t_bytes32_fromStack(value2, add(headStart, 64))
                abi_encode_t_bytes32_to_t_bytes32_fromStack(value3, add(headStart, 96))
            }
            function revert_forward_1()
            {
                let pos := allocate_unbounded()
                returndatacopy(pos, 0, returndatasize())
                revert(pos, returndatasize())
            }
            function cleanup_t_rational_0_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_0_by_1_to_t_uint160(value) -> converted
            {
                converted := cleanup_t_uint160(identity(cleanup_t_rational_0_by_1(value)))
            }
            function convert_t_rational_0_by_1_to_t_address(value) -> converted
            {
                converted := convert_t_rational_0_by_1_to_t_uint160(value)
            }
            function store_literal_in_memory_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56(memPtr)
            {
                mstore(add(memPtr, 0), "UniswapV2: INVALID_SIGNATURE")
            }
            function abi_encode_t_stringliteral_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 28)
                store_literal_in_memory_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @ast-id 618 @src 0:5309:6271  "function permit(..."
            function fun_permit_618(var_owner_541, var_spender_543, var_value_545, var_deadline_547, var_v_549, var_r_551, var_s_553)
            {
                /// @src 0:5504:5512  "deadline"
                let _81 := var_deadline_547
                let expr_557 := _81
                /// @src 0:5516:5531  "block.timestamp"
                let expr_559 := timestamp()
                /// @src 0:5504:5531  "deadline >= block.timestamp"
                let expr_560 := iszero(lt(cleanup_t_uint256(expr_557), cleanup_t_uint256(expr_559)))
                /// @src 0:5496:5554  "require(deadline >= block.timestamp, \"UniswapV2: EXPIRED\")"
                require_helper_t_stringliteral_47797eaaf6df6dc2efdb1e824209400a8293aff4c1e7f6d90fcc4b3e3ba18a87(expr_560)
                /// @src 0:5666:5682  "DOMAIN_SEPARATOR"
                let _82 := read_from_storage_split_offset_0_t_bytes32(0x03)
                let expr_570 := _82
                /// @src 0:5767:5782  "PERMIT_TYPEHASH"
                let expr_574 := constant_PERMIT_TYPEHASH_275()
                /// @src 0:5808:5813  "owner"
                let _83 := var_owner_541
                let expr_575 := _83
                /// @src 0:5839:5846  "spender"
                let _84 := var_spender_543
                let expr_576 := _84
                /// @src 0:5872:5877  "value"
                let _85 := var_value_545
                let expr_577 := _85
                /// @src 0:5903:5909  "nonces"
                let _86 := 0x04
                let expr_578 := _86
                /// @src 0:5910:5915  "owner"
                let _87 := var_owner_541
                let expr_579 := _87
                /// @src 0:5903:5916  "nonces[owner]"
                let _88 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_578, expr_579)
                /// @src 0:5903:5918  "nonces[owner]++"
                let _90 := read_from_storage_split_offset_0_t_uint256(_88)
                let _89 := increment_t_uint256(_90)
                update_storage_value_offset_0t_uint256_to_t_uint256(_88, _89)
                let expr_581 := _90
                /// @src 0:5944:5952  "deadline"
                let _91 := var_deadline_547
                let expr_582 := _91
                /// @src 0:5731:5974  "abi.encode(..."
                let expr_583_mpos := allocate_unbounded()
                let _92 := add(expr_583_mpos, 0x20)
                let _93 := abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack(_92, expr_574, expr_575, expr_576, expr_577, expr_581, expr_582)
                mstore(expr_583_mpos, sub(_93, add(expr_583_mpos, 0x20)))
                finalize_allocation(expr_583_mpos, sub(_93, expr_583_mpos))
                /// @src 0:5700:5992  "keccak256(..."
                let expr_584 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_583_mpos), array_length_t_bytes_memory_ptr(expr_583_mpos))
                /// @src 0:5604:6006  "abi.encodePacked(..."
                let expr_585_mpos := allocate_unbounded()
                let _94 := add(expr_585_mpos, 0x20)
                let _95 := abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack(_94, expr_570, expr_584)
                mstore(expr_585_mpos, sub(_95, add(expr_585_mpos, 0x20)))
                finalize_allocation(expr_585_mpos, sub(_95, expr_585_mpos))
                /// @src 0:5581:6016  "keccak256(..."
                let expr_586 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_585_mpos), array_length_t_bytes_memory_ptr(expr_585_mpos))
                /// @src 0:5564:6016  "bytes32 digest = keccak256(..."
                let var_digest_565 := expr_586
                /// @src 0:6063:6069  "digest"
                let _96 := var_digest_565
                let expr_591 := _96
                /// @src 0:6071:6072  "v"
                let _97 := var_v_549
                let expr_592 := _97
                /// @src 0:6074:6075  "r"
                let _98 := var_r_551
                let expr_593 := _98
                /// @src 0:6077:6078  "s"
                let _99 := var_s_553
                let expr_594 := _99
                /// @src 0:6053:6079  "ecrecover(digest, v, r, s)"
                let _100 := allocate_unbounded()
                let _101 := abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack(_100, expr_591, expr_592, expr_593, expr_594)
                mstore(0, 0)
                let _102 := staticcall(gas(), 1, _100, sub(_101, _100), 0, 32)
                if iszero(_102) { revert_forward_1() }
                let expr_595 := shift_left_0(mload(0))
                /// @src 0:6026:6079  "address recoveredAddress = ecrecover(digest, v, r, s)"
                let var_recoveredAddress_589 := expr_595
                /// @src 0:6110:6126  "recoveredAddress"
                let _103 := var_recoveredAddress_589
                let expr_598 := _103
                /// @src 0:6138:6139  "0"
                let expr_601 := 0x00
                /// @src 0:6130:6140  "address(0)"
                let expr_602 := convert_t_rational_0_by_1_to_t_address(expr_601)
                /// @src 0:6110:6140  "recoveredAddress != address(0)"
                let expr_603 := iszero(eq(cleanup_t_address(expr_598), cleanup_t_address(expr_602)))
                /// @src 0:6110:6169  "recoveredAddress != address(0) && recoveredAddress == owner"
                let expr_607 := expr_603
                if expr_607
                {
                    /// @src 0:6144:6160  "recoveredAddress"
                    let _104 := var_recoveredAddress_589
                    let expr_604 := _104
                    /// @src 0:6164:6169  "owner"
                    let _105 := var_owner_541
                    let expr_605 := _105
                    /// @src 0:6144:6169  "recoveredAddress == owner"
                    let expr_606 := eq(cleanup_t_address(expr_604), cleanup_t_address(expr_605))
                    /// @src 0:6110:6169  "recoveredAddress != address(0) && recoveredAddress == owner"
                    expr_607 := expr_606
                }
                /// @src 0:6089:6223  "require(..."
                require_helper_t_stringliteral_2d893fc9f5fa2494c39ecec82df2778b33226458ccce3b9a56f5372437d54a56(expr_607)
                /// @src 0:6242:6247  "owner"
                let _106 := var_owner_541
                let expr_612 := _106
                /// @src 0:6249:6256  "spender"
                let _107 := var_spender_543
                let expr_613 := _107
                /// @src 0:6258:6263  "value"
                let _108 := var_value_545
                let expr_614 := _108
                fun__approve_409(expr_612, expr_613, expr_614)
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function zero_value_for_split_t_uint112() -> ret
            { ret := 0 }
            function zero_value_for_split_t_uint32() -> ret
            { ret := 0 }
            function cleanup_from_storage_t_uint112(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffff)
            }
            function extract_from_storage_value_offset_0t_uint112(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint112(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_uint112(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_uint112(sload(slot))
            }
            function shift_right_112_unsigned(value) -> newValue
            { newValue := shr(112, value) }
            function extract_from_storage_value_offset_14t_uint112(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint112(shift_right_112_unsigned(slot_value))
            }
            function read_from_storage_split_offset_14_t_uint112(slot) -> value
            {
                value := extract_from_storage_value_offset_14t_uint112(sload(slot))
            }
            function cleanup_from_storage_t_uint32(value) -> cleaned
            {
                cleaned := and(value, 0xffffffff)
            }
            function extract_from_storage_value_offset_28t_uint32(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint32(shift_right_224_unsigned(slot_value))
            }
            function read_from_storage_split_offset_28_t_uint32(slot) -> value
            {
                value := extract_from_storage_value_offset_28t_uint32(sload(slot))
            }
            /// @ast-id 1048 @src 0:11215:11503  "function getReserves()..."
            function fun_getReserves_1048() -> var__reserve0_1029, var__reserve1_1031, var__blockTimestampLast_1033
            {
                /// @src 0:11283:11300  "uint112 _reserve0"
                let zero_t_uint112_109 := zero_value_for_split_t_uint112()
                var__reserve0_1029 := zero_t_uint112_109
                /// @src 0:11314:11331  "uint112 _reserve1"
                let zero_t_uint112_110 := zero_value_for_split_t_uint112()
                var__reserve1_1031 := zero_t_uint112_110
                /// @src 0:11345:11371  "uint32 _blockTimestampLast"
                let zero_t_uint32_111 := zero_value_for_split_t_uint32()
                var__blockTimestampLast_1033 := zero_t_uint32_111
                /// @src 0:11408:11416  "reserve0"
                let _112 := read_from_storage_split_offset_0_t_uint112(0x08)
                let expr_1036 := _112
                /// @src 0:11396:11416  "_reserve0 = reserve0"
                var__reserve0_1029 := expr_1036
                let expr_1037 := expr_1036
                /// @src 0:11438:11446  "reserve1"
                let _113 := read_from_storage_split_offset_14_t_uint112(0x08)
                let expr_1040 := _113
                /// @src 0:11426:11446  "_reserve1 = reserve1"
                var__reserve1_1031 := expr_1040
                let expr_1041 := expr_1040
                /// @src 0:11478:11496  "blockTimestampLast"
                let _114 := read_from_storage_split_offset_28_t_uint32(0x08)
                let expr_1044 := _114
                /// @src 0:11456:11496  "_blockTimestampLast = blockTimestampLast"
                var__blockTimestampLast_1033 := expr_1044
                let expr_1045 := expr_1044
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function extract_from_storage_value_offset_0t_address(slot_value) -> value
            {
                value := cleanup_from_storage_t_address(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_address(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_address(sload(slot))
            }
            function store_literal_in_memory_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37(memPtr)
            {
                mstore(add(memPtr, 0), "UniswapV2: FORBIDDEN")
            }
            function abi_encode_t_stringliteral_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)
                store_literal_in_memory_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function update_byte_slice_20_shift_0(value, toInsert) -> result
            {
                let mask := 0xffffffffffffffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function prepare_store_t_address(value) -> ret
            { ret := value }
            function update_storage_value_offset_0t_address_to_t_address(slot, value_0)
            {
                let convertedValue_0 := convert_t_address_to_t_address(value_0)
                sstore(slot, update_byte_slice_20_shift_0(sload(slot), prepare_store_t_address(convertedValue_0)))
            }
            /// @ast-id 1099 @src 0:11755:11961  "function initialize(address _token0, address _token1) external {..."
            function fun_initialize_1099(var__token0_1077, var__token1_1079)
            {
                /// @src 0:11836:11846  "msg.sender"
                let expr_1084 := caller()
                /// @src 0:11850:11857  "factory"
                let _115 := read_from_storage_split_offset_0_t_address(0x05)
                let expr_1085 := _115
                /// @src 0:11836:11857  "msg.sender == factory"
                let expr_1086 := eq(cleanup_t_address(expr_1084), cleanup_t_address(expr_1085))
                /// @src 0:11828:11882  "require(msg.sender == factory, \"UniswapV2: FORBIDDEN\")"
                require_helper_t_stringliteral_6e6d2caae3ed190a2586f9b576de92bc80eab72002acec2261bbed89d68a3b37(expr_1086)
                /// @src 0:11921:11928  "_token0"
                let _116 := var__token0_1077
                let expr_1091 := _116
                /// @src 0:11912:11928  "token0 = _token0"
                update_storage_value_offset_0t_address_to_t_address(0x06, expr_1091)
                let expr_1092 := expr_1091
                /// @src 0:11947:11954  "_token1"
                let _117 := var__token1_1079
                let expr_1095 := _117
                /// @src 0:11938:11954  "token1 = _token1"
                update_storage_value_offset_0t_address_to_t_address(0x07, expr_1095)
                let expr_1096 := expr_1095
            }
            /// @ast-id 1332 @src 0:13978:14010  "function tmp() external {..."
            function fun_tmp_1332()
            { }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function cleanup_t_rational_1_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_1_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_1_by_1(value)))
            }
            function store_literal_in_memory_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a(memPtr)
            {
                mstore(add(memPtr, 0), "UniswapV2: LOCKED")
            }
            function abi_encode_t_stringliteral_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 17)
                store_literal_in_memory_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function convert_t_rational_0_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))
            }
            /// @ast-id 1026 @src 0:11078:11209  "modifier lock() {..."
            function modifier_lock_1337(var_liquidity_1339, var_to_1334) -> _119
            {
                _119 := var_liquidity_1339
                /// @src 0:11112:11120  "unlocked"
                let _120 := read_from_storage_split_offset_0_t_uint256(0x0c)
                let expr_1010 := _120
                /// @src 0:11124:11125  "1"
                let expr_1011 := 0x01
                /// @src 0:11112:11125  "unlocked == 1"
                let expr_1012 := eq(cleanup_t_uint256(expr_1010), convert_t_rational_1_by_1_to_t_uint256(expr_1011))
                /// @src 0:11104:11147  "require(unlocked == 1, \"UniswapV2: LOCKED\")"
                require_helper_t_stringliteral_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a(expr_1012)
                /// @src 0:11168:11169  "0"
                let expr_1017 := 0x00
                /// @src 0:11157:11169  "unlocked = 0"
                let _121 := convert_t_rational_0_by_1_to_t_uint256(expr_1017)
                update_storage_value_offset_0t_uint256_to_t_uint256(0x0c, _121)
                let expr_1018 := _121
                /// @src 0:11179:11180  "_"
                _119 := fun_mint_1352_inner(var_liquidity_1339, var_to_1334)
                /// @src 0:11201:11202  "1"
                let expr_1022 := 0x01
                /// @src 0:11190:11202  "unlocked = 1"
                let _122 := convert_t_rational_1_by_1_to_t_uint256(expr_1022)
                update_storage_value_offset_0t_uint256_to_t_uint256(0x0c, _122)
                let expr_1023 := _122
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function convert_t_contract$_UniswapV2Pair_$1840_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_address(value)
            }
            function revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()
            { revert(0, 0) }
            function shift_left_224(value) -> newValue
            { newValue := shl(224, value) }
            function abi_decode_tuple__fromMemory(headStart, dataEnd)
            {
                if slt(sub(dataEnd, headStart), 0)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
            }
            /// @src 0:14119:15587  "function mint(address to) external lock returns (uint liquidity) {..."
            function fun_mint_1352_inner(_123, var_to_1334) -> var_liquidity_1339
            {
                var_liquidity_1339 := _123
                /// @src 0:14346:14350  "this"
                let expr_1341_address := address()
                /// @src 0:14346:14354  "this.tmp"
                let expr_1343_address := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1341_address)
                let expr_1343_functionSelector := 0xb518a776
                /// @src 0:14346:14356  "this.tmp()"
                if iszero(extcodesize(expr_1343_address))
                {
                    revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()
                }
                let _124 := allocate_unbounded()
                mstore(_124, shift_left_224(expr_1343_functionSelector))
                let _125 := abi_encode_tuple__to__fromStack(add(_124, 4))
                let _126 := call(gas(), expr_1343_address, 0, _124, sub(_125, _124), _124, 0)
                if iszero(_126) { revert_forward_1() }
                if _126
                {
                    let _127 := 0
                    if gt(_127, returndatasize()) { _127 := returndatasize() }
                    finalize_allocation(_124, _127)
                    abi_decode_tuple__fromMemory(_124, add(_124, _127))
                }
                /// @src 0:14366:14370  "this"
                let expr_1346_address := address()
                /// @src 0:14366:14374  "this.tmp"
                let expr_1348_address := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1346_address)
                let expr_1348_functionSelector := 0xb518a776
                /// @src 0:14366:14376  "this.tmp()"
                if iszero(extcodesize(expr_1348_address))
                {
                    revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()
                }
                let _128 := allocate_unbounded()
                mstore(_128, shift_left_224(expr_1348_functionSelector))
                let _129 := abi_encode_tuple__to__fromStack(add(_128, 4))
                let _130 := call(gas(), expr_1348_address, 0, _128, sub(_129, _128), _128, 0)
                if iszero(_130) { revert_forward_1() }
                if _130
                {
                    let _131 := 0
                    if gt(_131, returndatasize()) { _131 := returndatasize() }
                    finalize_allocation(_128, _131)
                    abi_decode_tuple__fromMemory(_128, add(_128, _131))
                }
            }
            /// @ast-id 1352 @src 0:14119:15587  "function mint(address to) external lock returns (uint liquidity) {..."
            function fun_mint_1352(var_to_1334) -> var_liquidity_1339
            {
                /// @src 0:14168:14182  "uint liquidity"
                let zero_t_uint256_118 := zero_value_for_split_t_uint256()
                var_liquidity_1339 := zero_t_uint256_118
                var_liquidity_1339 := modifier_lock_1337(var_liquidity_1339, var_to_1334)
            }
            /// @ast-id 1026 @src 0:11078:11209  "modifier lock() {..."
            function modifier_lock_1357(var_amount0_1359, var_amount1_1361, var_to_1354) -> _134, _135
            {
                _134 := var_amount0_1359
                _135 := var_amount1_1361
                /// @src 0:11112:11120  "unlocked"
                let _136 := read_from_storage_split_offset_0_t_uint256(0x0c)
                let expr_1010 := _136
                /// @src 0:11124:11125  "1"
                let expr_1011 := 0x01
                /// @src 0:11112:11125  "unlocked == 1"
                let expr_1012 := eq(cleanup_t_uint256(expr_1010), convert_t_rational_1_by_1_to_t_uint256(expr_1011))
                /// @src 0:11104:11147  "require(unlocked == 1, \"UniswapV2: LOCKED\")"
                require_helper_t_stringliteral_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a(expr_1012)
                /// @src 0:11168:11169  "0"
                let expr_1017 := 0x00
                /// @src 0:11157:11169  "unlocked = 0"
                let _137 := convert_t_rational_0_by_1_to_t_uint256(expr_1017)
                update_storage_value_offset_0t_uint256_to_t_uint256(0x0c, _137)
                let expr_1018 := _137
                /// @src 0:11179:11180  "_"
                _134, _135 := fun_burn_1523_inner(var_amount0_1359, var_amount1_1361, var_to_1354)
                /// @src 0:11201:11202  "1"
                let expr_1022 := 0x01
                /// @src 0:11190:11202  "unlocked = 1"
                let _138 := convert_t_rational_1_by_1_to_t_uint256(expr_1022)
                update_storage_value_offset_0t_uint256_to_t_uint256(0x0c, _138)
                let expr_1023 := _138
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function convert_t_uint160_to_t_contract$_IERC20_$777(value) -> converted
            {
                converted := convert_t_uint160_to_t_uint160(value)
            }
            function convert_t_address_to_t_contract$_IERC20_$777(value) -> converted
            {
                converted := convert_t_uint160_to_t_contract$_IERC20_$777(value)
            }
            function convert_t_contract$_IERC20_$777_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_address(value)
            }
            function abi_decode_t_uint256_fromMemory(offset, end) -> value
            {
                value := mload(offset)
                validator_revert_t_uint256(value)
            }
            function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
                }
            }
            function panic_error_0x12()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x12)
                revert(0, 0x24)
            }
            function checked_div_t_uint256(x, y) -> r
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if iszero(y) { panic_error_0x12() }
                r := div(x, y)
            }
            function store_literal_in_memory_57ebfb4dd8b5082cdba0f23c17077e3b0ecb9782a51e0e9a15e9bc8c4b30c562(memPtr)
            {
                mstore(add(memPtr, 0), "UniswapV2: INSUFFICIENT_LIQUIDIT")
                mstore(add(memPtr, 32), "Y_BURNED")
            }
            function abi_encode_t_stringliteral_57ebfb4dd8b5082cdba0f23c17077e3b0ecb9782a51e0e9a15e9bc8c4b30c562_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 40)
                store_literal_in_memory_57ebfb4dd8b5082cdba0f23c17077e3b0ecb9782a51e0e9a15e9bc8c4b30c562(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_57ebfb4dd8b5082cdba0f23c17077e3b0ecb9782a51e0e9a15e9bc8c4b30c562__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_57ebfb4dd8b5082cdba0f23c17077e3b0ecb9782a51e0e9a15e9bc8c4b30c562_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_57ebfb4dd8b5082cdba0f23c17077e3b0ecb9782a51e0e9a15e9bc8c4b30c562(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_57ebfb4dd8b5082cdba0f23c17077e3b0ecb9782a51e0e9a15e9bc8c4b30c562__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function convert_t_uint112_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_uint112(value)))
            }
            /// @src 0:15696:17127  "function burn(..."
            function fun_burn_1523_inner(_139, _140, var_to_1354) -> var_amount0_1359, var_amount1_1361
            {
                var_amount0_1359 := _139
                var_amount1_1361 := _140
                /// @src 0:15840:15853  "getReserves()"
                let expr_1368_component_1, expr_1368_component_2, expr_1368_component_3 := fun_getReserves_1048()
                /// @src 0:15797:15853  "(uint112 _reserve0, uint112 _reserve1, ) = getReserves()"
                let var__reserve0_1364 := expr_1368_component_1
                let var__reserve1_1366 := expr_1368_component_2
                /// @src 0:15896:15902  "token0"
                let _141 := read_from_storage_split_offset_0_t_address(0x06)
                let expr_1372 := _141
                /// @src 0:15878:15902  "address _token0 = token0"
                let var__token0_1371 := expr_1372
                /// @src 0:15945:15951  "token1"
                let _142 := read_from_storage_split_offset_0_t_address(0x07)
                let expr_1376 := _142
                /// @src 0:15927:15951  "address _token1 = token1"
                let var__token1_1375 := expr_1376
                /// @src 0:15999:16006  "_token0"
                let _143 := var__token0_1371
                let expr_1381 := _143
                /// @src 0:15992:16007  "IERC20(_token0)"
                let expr_1382_address := convert_t_address_to_t_contract$_IERC20_$777(expr_1381)
                /// @src 0:15992:16017  "IERC20(_token0).balanceOf"
                let expr_1383_address := convert_t_contract$_IERC20_$777_to_t_address(expr_1382_address)
                let expr_1383_functionSelector := 0x70a08231
                /// @src 0:16026:16030  "this"
                let expr_1386_address := address()
                /// @src 0:16018:16031  "address(this)"
                let expr_1387 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1386_address)
                /// @src 0:15992:16032  "IERC20(_token0).balanceOf(address(this))"
                let _144 := allocate_unbounded()
                mstore(_144, shift_left_224(expr_1383_functionSelector))
                let _145 := abi_encode_tuple_t_address__to_t_address__fromStack(add(_144, 4), expr_1387)
                let _146 := call(gas(), expr_1383_address, 0, _144, sub(_145, _144), _144, 32)
                if iszero(_146) { revert_forward_1() }
                let expr_1388
                if _146
                {
                    let _147 := 32
                    if gt(_147, returndatasize()) { _147 := returndatasize() }
                    finalize_allocation(_144, _147)
                    expr_1388 := abi_decode_tuple_t_uint256_fromMemory(_144, add(_144, _147))
                }
                /// @src 0:15976:16032  "uint balance0 = IERC20(_token0).balanceOf(address(this))"
                let var_balance0_1379 := expr_1388
                /// @src 0:16065:16072  "_token1"
                let _148 := var__token1_1375
                let expr_1393 := _148
                /// @src 0:16058:16073  "IERC20(_token1)"
                let expr_1394_address := convert_t_address_to_t_contract$_IERC20_$777(expr_1393)
                /// @src 0:16058:16083  "IERC20(_token1).balanceOf"
                let expr_1395_address := convert_t_contract$_IERC20_$777_to_t_address(expr_1394_address)
                let expr_1395_functionSelector := 0x70a08231
                /// @src 0:16092:16096  "this"
                let expr_1398_address := address()
                /// @src 0:16084:16097  "address(this)"
                let expr_1399 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1398_address)
                /// @src 0:16058:16098  "IERC20(_token1).balanceOf(address(this))"
                let _149 := allocate_unbounded()
                mstore(_149, shift_left_224(expr_1395_functionSelector))
                let _150 := abi_encode_tuple_t_address__to_t_address__fromStack(add(_149, 4), expr_1399)
                let _151 := call(gas(), expr_1395_address, 0, _149, sub(_150, _149), _149, 32)
                if iszero(_151) { revert_forward_1() }
                let expr_1400
                if _151
                {
                    let _152 := 32
                    if gt(_152, returndatasize()) { _152 := returndatasize() }
                    finalize_allocation(_149, _152)
                    expr_1400 := abi_decode_tuple_t_uint256_fromMemory(_149, add(_149, _152))
                }
                /// @src 0:16042:16098  "uint balance1 = IERC20(_token1).balanceOf(address(this))"
                let var_balance1_1391 := expr_1400
                /// @src 0:16125:16134  "balanceOf"
                let _153 := 0x01
                let expr_1404 := _153
                /// @src 0:16143:16147  "this"
                let expr_1407_address := address()
                /// @src 0:16135:16148  "address(this)"
                let expr_1408 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1407_address)
                /// @src 0:16125:16149  "balanceOf[address(this)]"
                let _154 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_1404, expr_1408)
                let _155 := read_from_storage_split_offset_0_t_uint256(_154)
                let expr_1409 := _155
                /// @src 0:16108:16149  "uint liquidity = balanceOf[address(this)]"
                let var_liquidity_1403 := expr_1409
                /// @src 0:16182:16191  "_reserve0"
                let _156 := var__reserve0_1364
                let expr_1414 := _156
                /// @src 0:16193:16202  "_reserve1"
                let _157 := var__reserve1_1366
                let expr_1415 := _157
                /// @src 0:16173:16203  "_mintFee(_reserve0, _reserve1)"
                let expr_1416 := fun__mintFee_1328(expr_1414, expr_1415)
                /// @src 0:16160:16203  "bool feeOn = _mintFee(_reserve0, _reserve1)"
                let var_feeOn_1412 := expr_1416
                /// @src 0:16233:16244  "totalSupply"
                let _158 := read_from_storage_split_offset_0_t_uint256(0x00)
                let expr_1420 := _158
                /// @src 0:16213:16244  "uint _totalSupply = totalSupply"
                let var__totalSupply_1419 := expr_1420
                /// @src 0:16342:16351  "liquidity"
                let _159 := var_liquidity_1403
                let expr_1423 := _159
                /// @src 0:16342:16355  "liquidity.mul"
                let expr_1424_self := expr_1423
                /// @src 0:16356:16364  "balance0"
                let _160 := var_balance0_1379
                let expr_1425 := _160
                /// @src 0:16342:16365  "liquidity.mul(balance0)"
                let expr_1426 := fun_mul_125(expr_1424_self, expr_1425)
                /// @src 0:16368:16380  "_totalSupply"
                let _161 := var__totalSupply_1419
                let expr_1427 := _161
                /// @src 0:16342:16380  "liquidity.mul(balance0) / _totalSupply"
                let expr_1428 := checked_div_t_uint256(expr_1426, expr_1427)
                /// @src 0:16332:16380  "amount0 = liquidity.mul(balance0) / _totalSupply"
                var_amount0_1359 := expr_1428
                let expr_1429 := expr_1428
                /// @src 0:16448:16457  "liquidity"
                let _162 := var_liquidity_1403
                let expr_1432 := _162
                /// @src 0:16448:16461  "liquidity.mul"
                let expr_1433_self := expr_1432
                /// @src 0:16462:16470  "balance1"
                let _163 := var_balance1_1391
                let expr_1434 := _163
                /// @src 0:16448:16471  "liquidity.mul(balance1)"
                let expr_1435 := fun_mul_125(expr_1433_self, expr_1434)
                /// @src 0:16474:16486  "_totalSupply"
                let _164 := var__totalSupply_1419
                let expr_1436 := _164
                /// @src 0:16448:16486  "liquidity.mul(balance1) / _totalSupply"
                let expr_1437 := checked_div_t_uint256(expr_1435, expr_1436)
                /// @src 0:16438:16486  "amount1 = liquidity.mul(balance1) / _totalSupply"
                var_amount1_1361 := expr_1437
                let expr_1438 := expr_1437
                /// @src 0:16565:16572  "amount0"
                let _165 := var_amount0_1359
                let expr_1441 := _165
                /// @src 0:16575:16576  "0"
                let expr_1442 := 0x00
                /// @src 0:16565:16576  "amount0 > 0"
                let expr_1443 := gt(cleanup_t_uint256(expr_1441), convert_t_rational_0_by_1_to_t_uint256(expr_1442))
                /// @src 0:16565:16591  "amount0 > 0 && amount1 > 0"
                let expr_1447 := expr_1443
                if expr_1447
                {
                    /// @src 0:16580:16587  "amount1"
                    let _166 := var_amount1_1361
                    let expr_1444 := _166
                    /// @src 0:16590:16591  "0"
                    let expr_1445 := 0x00
                    /// @src 0:16580:16591  "amount1 > 0"
                    let expr_1446 := gt(cleanup_t_uint256(expr_1444), convert_t_rational_0_by_1_to_t_uint256(expr_1445))
                    /// @src 0:16565:16591  "amount0 > 0 && amount1 > 0"
                    expr_1447 := expr_1446
                }
                /// @src 0:16544:16657  "require(..."
                require_helper_t_stringliteral_57ebfb4dd8b5082cdba0f23c17077e3b0ecb9782a51e0e9a15e9bc8c4b30c562(expr_1447)
                /// @src 0:16681:16685  "this"
                let expr_1454_address := address()
                /// @src 0:16673:16686  "address(this)"
                let expr_1455 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1454_address)
                /// @src 0:16688:16697  "liquidity"
                let _167 := var_liquidity_1403
                let expr_1456 := _167
                fun__burn_385(expr_1455, expr_1456)
                /// @src 0:16722:16729  "_token0"
                let _168 := var__token0_1371
                let expr_1460 := _168
                /// @src 0:16731:16733  "to"
                let _169 := var_to_1354
                let expr_1461 := _169
                /// @src 0:16735:16742  "amount0"
                let _170 := var_amount0_1359
                let expr_1462 := _170
                fun__safeTransfer_1066(expr_1460, expr_1461, expr_1462)
                /// @src 0:16767:16774  "_token1"
                let _171 := var__token1_1375
                let expr_1466 := _171
                /// @src 0:16776:16778  "to"
                let _172 := var_to_1354
                let expr_1467 := _172
                /// @src 0:16780:16787  "amount1"
                let _173 := var_amount1_1361
                let expr_1468 := _173
                fun__safeTransfer_1066(expr_1466, expr_1467, expr_1468)
                /// @src 0:16816:16823  "_token0"
                let _174 := var__token0_1371
                let expr_1473 := _174
                /// @src 0:16809:16824  "IERC20(_token0)"
                let expr_1474_address := convert_t_address_to_t_contract$_IERC20_$777(expr_1473)
                /// @src 0:16809:16834  "IERC20(_token0).balanceOf"
                let expr_1475_address := convert_t_contract$_IERC20_$777_to_t_address(expr_1474_address)
                let expr_1475_functionSelector := 0x70a08231
                /// @src 0:16843:16847  "this"
                let expr_1478_address := address()
                /// @src 0:16835:16848  "address(this)"
                let expr_1479 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1478_address)
                /// @src 0:16809:16849  "IERC20(_token0).balanceOf(address(this))"
                let _175 := allocate_unbounded()
                mstore(_175, shift_left_224(expr_1475_functionSelector))
                let _176 := abi_encode_tuple_t_address__to_t_address__fromStack(add(_175, 4), expr_1479)
                let _177 := call(gas(), expr_1475_address, 0, _175, sub(_176, _175), _175, 32)
                if iszero(_177) { revert_forward_1() }
                let expr_1480
                if _177
                {
                    let _178 := 32
                    if gt(_178, returndatasize()) { _178 := returndatasize() }
                    finalize_allocation(_175, _178)
                    expr_1480 := abi_decode_tuple_t_uint256_fromMemory(_175, add(_175, _178))
                }
                /// @src 0:16798:16849  "balance0 = IERC20(_token0).balanceOf(address(this))"
                var_balance0_1379 := expr_1480
                let expr_1481 := expr_1480
                /// @src 0:16877:16884  "_token1"
                let _179 := var__token1_1375
                let expr_1485 := _179
                /// @src 0:16870:16885  "IERC20(_token1)"
                let expr_1486_address := convert_t_address_to_t_contract$_IERC20_$777(expr_1485)
                /// @src 0:16870:16895  "IERC20(_token1).balanceOf"
                let expr_1487_address := convert_t_contract$_IERC20_$777_to_t_address(expr_1486_address)
                let expr_1487_functionSelector := 0x70a08231
                /// @src 0:16904:16908  "this"
                let expr_1490_address := address()
                /// @src 0:16896:16909  "address(this)"
                let expr_1491 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1490_address)
                /// @src 0:16870:16910  "IERC20(_token1).balanceOf(address(this))"
                let _180 := allocate_unbounded()
                mstore(_180, shift_left_224(expr_1487_functionSelector))
                let _181 := abi_encode_tuple_t_address__to_t_address__fromStack(add(_180, 4), expr_1491)
                let _182 := call(gas(), expr_1487_address, 0, _180, sub(_181, _180), _180, 32)
                if iszero(_182) { revert_forward_1() }
                let expr_1492
                if _182
                {
                    let _183 := 32
                    if gt(_183, returndatasize()) { _183 := returndatasize() }
                    finalize_allocation(_180, _183)
                    expr_1492 := abi_decode_tuple_t_uint256_fromMemory(_180, add(_180, _183))
                }
                /// @src 0:16859:16910  "balance1 = IERC20(_token1).balanceOf(address(this))"
                var_balance1_1391 := expr_1492
                let expr_1493 := expr_1492
                /// @src 0:16929:16937  "balance0"
                let _184 := var_balance0_1379
                let expr_1496 := _184
                /// @src 0:16939:16947  "balance1"
                let _185 := var_balance1_1391
                let expr_1497 := _185
                /// @src 0:16949:16958  "_reserve0"
                let _186 := var__reserve0_1364
                let expr_1498 := _186
                /// @src 0:16960:16969  "_reserve1"
                let _187 := var__reserve1_1366
                let expr_1499 := _187
                fun__update_1220(expr_1496, expr_1497, expr_1498, expr_1499)
                /// @src 0:16984:16989  "feeOn"
                let _188 := var_feeOn_1412
                let expr_1502 := _188
                /// @src 0:16980:17027  "if (feeOn) kLast = uint(reserve0).mul(reserve1)"
                if expr_1502
                {
                    /// @src 0:17004:17012  "reserve0"
                    let _189 := read_from_storage_split_offset_0_t_uint112(0x08)
                    let expr_1506 := _189
                    /// @src 0:16999:17013  "uint(reserve0)"
                    let expr_1507 := convert_t_uint112_to_t_uint256(expr_1506)
                    /// @src 0:16999:17017  "uint(reserve0).mul"
                    let expr_1508_self := expr_1507
                    /// @src 0:17018:17026  "reserve1"
                    let _190 := read_from_storage_split_offset_14_t_uint112(0x08)
                    let expr_1509 := _190
                    /// @src 0:16999:17027  "uint(reserve0).mul(reserve1)"
                    let _191 := convert_t_uint112_to_t_uint256(expr_1509)
                    let expr_1510 := fun_mul_125(expr_1508_self, _191)
                    /// @src 0:16991:17027  "kLast = uint(reserve0).mul(reserve1)"
                    update_storage_value_offset_0t_uint256_to_t_uint256(0x0b, expr_1510)
                    let expr_1511 := expr_1510
                }
                /// @src 0:17087:17097  "msg.sender"
                let expr_1516 := caller()
                /// @src 0:17099:17106  "amount0"
                let _192 := var_amount0_1359
                let expr_1517 := _192
                /// @src 0:17108:17115  "amount1"
                let _193 := var_amount1_1361
                let expr_1518 := _193
                /// @src 0:17117:17119  "to"
                let _194 := var_to_1354
                let expr_1519 := _194
                /// @src 0:17082:17120  "Burn(msg.sender, amount0, amount1, to)"
                let _195 := 0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496
                let _196 := convert_t_address_to_t_address(expr_1516)
                let _197 := convert_t_address_to_t_address(expr_1519)
                {
                    let _198 := allocate_unbounded()
                    let _199 := abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack(_198, expr_1517, expr_1518)
                    log3(_198, sub(_199, _198), _195, _196, _197)
                }
            }
            /// @ast-id 1523 @src 0:15696:17127  "function burn(..."
            function fun_burn_1523(var_to_1354) -> var_amount0_1359, var_amount1_1361
            {
                /// @src 0:15759:15771  "uint amount0"
                let zero_t_uint256_132 := zero_value_for_split_t_uint256()
                var_amount0_1359 := zero_t_uint256_132
                /// @src 0:15773:15785  "uint amount1"
                let zero_t_uint256_133 := zero_value_for_split_t_uint256()
                var_amount1_1361 := zero_t_uint256_133
                var_amount0_1359, var_amount1_1361 := modifier_lock_1357(var_amount0_1359, var_amount1_1361, var_to_1354)
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function checked_mul_t_uint256(x, y) -> product
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }
                product := mul(x, y)
            }
            function store_literal_in_memory_25a0ef6406c6af6852555433653ce478274cd9f03a5dec44d001868a76b3bfdd(memPtr)
            {
                mstore(add(memPtr, 0), "ds-math-mul-overflow")
            }
            function abi_encode_t_stringliteral_25a0ef6406c6af6852555433653ce478274cd9f03a5dec44d001868a76b3bfdd_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)
                store_literal_in_memory_25a0ef6406c6af6852555433653ce478274cd9f03a5dec44d001868a76b3bfdd(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_25a0ef6406c6af6852555433653ce478274cd9f03a5dec44d001868a76b3bfdd__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_25a0ef6406c6af6852555433653ce478274cd9f03a5dec44d001868a76b3bfdd_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_25a0ef6406c6af6852555433653ce478274cd9f03a5dec44d001868a76b3bfdd(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_25a0ef6406c6af6852555433653ce478274cd9f03a5dec44d001868a76b3bfdd__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @ast-id 125 @src 0:1191:1331  "function mul(uint x, uint y) internal pure returns (uint z) {..."
            function fun_mul_125(var_x_99, var_y_101) -> var_z_104
            {
                /// @src 0:1243:1249  "uint z"
                let zero_t_uint256_200 := zero_value_for_split_t_uint256()
                var_z_104 := zero_t_uint256_200
                /// @src 0:1269:1270  "y"
                let _201 := var_y_101
                let expr_107 := _201
                /// @src 0:1274:1275  "0"
                let expr_108 := 0x00
                /// @src 0:1269:1275  "y == 0"
                let expr_109 := eq(cleanup_t_uint256(expr_107), convert_t_rational_0_by_1_to_t_uint256(expr_108))
                /// @src 0:1269:1299  "y == 0 || (z = x * y) / y == x"
                let expr_120 := expr_109
                if iszero(expr_120)
                {
                    /// @src 0:1284:1285  "x"
                    let _202 := var_x_99
                    let expr_111 := _202
                    /// @src 0:1288:1289  "y"
                    let _203 := var_y_101
                    let expr_112 := _203
                    /// @src 0:1284:1289  "x * y"
                    let expr_113 := checked_mul_t_uint256(expr_111, expr_112)
                    /// @src 0:1280:1289  "z = x * y"
                    var_z_104 := expr_113
                    let expr_114 := expr_113
                    /// @src 0:1279:1290  "(z = x * y)"
                    let expr_115 := expr_114
                    /// @src 0:1293:1294  "y"
                    let _204 := var_y_101
                    let expr_116 := _204
                    /// @src 0:1279:1294  "(z = x * y) / y"
                    let expr_117 := checked_div_t_uint256(expr_115, expr_116)
                    /// @src 0:1298:1299  "x"
                    let _205 := var_x_99
                    let expr_118 := _205
                    /// @src 0:1279:1299  "(z = x * y) / y == x"
                    let expr_119 := eq(cleanup_t_uint256(expr_117), cleanup_t_uint256(expr_118))
                    /// @src 0:1269:1299  "y == 0 || (z = x * y) / y == x"
                    expr_120 := expr_119
                }
                /// @src 0:1261:1324  "require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\")"
                require_helper_t_stringliteral_25a0ef6406c6af6852555433653ce478274cd9f03a5dec44d001868a76b3bfdd(expr_120)
            }
            /// @ast-id 385 @src 0:4046:4251  "function _burn(address from, uint value) internal {..."
            function fun__burn_385(var_from_352, var_value_354)
            {
                /// @src 0:4124:4133  "balanceOf"
                let _206 := 0x01
                let expr_360 := _206
                /// @src 0:4134:4138  "from"
                let _207 := var_from_352
                let expr_361 := _207
                /// @src 0:4124:4139  "balanceOf[from]"
                let _208 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_360, expr_361)
                let _209 := read_from_storage_split_offset_0_t_uint256(_208)
                let expr_362 := _209
                /// @src 0:4124:4143  "balanceOf[from].sub"
                let expr_363_self := expr_362
                /// @src 0:4144:4149  "value"
                let _210 := var_value_354
                let expr_364 := _210
                /// @src 0:4124:4150  "balanceOf[from].sub(value)"
                let expr_365 := fun_sub_97(expr_363_self, expr_364)
                /// @src 0:4106:4115  "balanceOf"
                let _211 := 0x01
                let expr_357 := _211
                /// @src 0:4116:4120  "from"
                let _212 := var_from_352
                let expr_358 := _212
                /// @src 0:4106:4121  "balanceOf[from]"
                let _213 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_357, expr_358)
                /// @src 0:4106:4150  "balanceOf[from] = balanceOf[from].sub(value)"
                update_storage_value_offset_0t_uint256_to_t_uint256(_213, expr_365)
                let expr_366 := expr_365
                /// @src 0:4174:4185  "totalSupply"
                let _214 := read_from_storage_split_offset_0_t_uint256(0x00)
                let expr_369 := _214
                /// @src 0:4174:4189  "totalSupply.sub"
                let expr_370_self := expr_369
                /// @src 0:4190:4195  "value"
                let _215 := var_value_354
                let expr_371 := _215
                /// @src 0:4174:4196  "totalSupply.sub(value)"
                let expr_372 := fun_sub_97(expr_370_self, expr_371)
                /// @src 0:4160:4196  "totalSupply = totalSupply.sub(value)"
                update_storage_value_offset_0t_uint256_to_t_uint256(0x00, expr_372)
                let expr_373 := expr_372
                /// @src 0:4220:4224  "from"
                let _216 := var_from_352
                let expr_376 := _216
                /// @src 0:4234:4235  "0"
                let expr_379 := 0x00
                /// @src 0:4226:4236  "address(0)"
                let expr_380 := convert_t_rational_0_by_1_to_t_address(expr_379)
                /// @src 0:4238:4243  "value"
                let _217 := var_value_354
                let expr_381 := _217
                /// @src 0:4211:4244  "Transfer(from, address(0), value)"
                let _218 := 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
                let _219 := convert_t_address_to_t_address(expr_376)
                let _220 := convert_t_address_to_t_address(expr_380)
                {
                    let _221 := allocate_unbounded()
                    let _222 := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(_221, expr_381)
                    log3(_221, sub(_222, _221), _218, _219, _220)
                }
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function validator_revert_t_bool(value)
            {
                if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }
            }
            function abi_decode_t_bool_fromMemory(offset, end) -> value
            {
                value := mload(offset)
                validator_revert_t_bool(value)
            }
            function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)
                }
            }
            function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack(headStart, value0, value1) -> tail
            {
                tail := add(headStart, 64)
                abi_encode_t_address_to_t_address_fromStack(value0, add(headStart, 0))
                abi_encode_t_uint256_to_t_uint256_fromStack(value1, add(headStart, 32))
            }
            /// @ast-id 1066 @src 0:11509:11629  "function _safeTransfer(address token, address to, uint value) private {..."
            function fun__safeTransfer_1066(var_token_1050, var_to_1052, var_value_1054)
            {
                /// @src 0:11596:11601  "token"
                let _223 := var_token_1050
                let expr_1058 := _223
                /// @src 0:11589:11602  "IERC20(token)"
                let expr_1059_address := convert_t_address_to_t_contract$_IERC20_$777(expr_1058)
                /// @src 0:11589:11611  "IERC20(token).transfer"
                let expr_1060_address := convert_t_contract$_IERC20_$777_to_t_address(expr_1059_address)
                let expr_1060_functionSelector := 0xa9059cbb
                /// @src 0:11612:11614  "to"
                let _224 := var_to_1052
                let expr_1061 := _224
                /// @src 0:11616:11621  "value"
                let _225 := var_value_1054
                let expr_1062 := _225
                /// @src 0:11589:11622  "IERC20(token).transfer(to, value)"
                let _226 := allocate_unbounded()
                mstore(_226, shift_left_224(expr_1060_functionSelector))
                let _227 := abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack(add(_226, 4), expr_1061, expr_1062)
                let _228 := call(gas(), expr_1060_address, 0, _226, sub(_227, _226), _226, 32)
                if iszero(_228) { revert_forward_1() }
                let expr_1063
                if _228
                {
                    let _229 := 32
                    if gt(_229, returndatasize()) { _229 := returndatasize() }
                    finalize_allocation(_226, _229)
                    expr_1063 := abi_decode_tuple_t_bool_fromMemory(_226, add(_226, _229))
                }
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function cleanup_t_int112(value) -> cleaned
            {
                cleaned := signextend(13, value)
            }
            function convert_t_rational_minus_1_by_1_to_t_int112(value) -> converted
            {
                converted := cleanup_t_int112(identity(cleanup_t_rational_minus_1_by_1(value)))
            }
            function convert_t_int112_to_t_uint112(value) -> converted
            {
                converted := cleanup_t_uint112(identity(cleanup_t_int112(value)))
            }
            function store_literal_in_memory_a5d1f08cd66a1a59e841a286c7f2c877311b5d331d2315cd2fe3c5f05e833928(memPtr)
            {
                mstore(add(memPtr, 0), "UniswapV2: OVERFLOW")
            }
            function abi_encode_t_stringliteral_a5d1f08cd66a1a59e841a286c7f2c877311b5d331d2315cd2fe3c5f05e833928_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 19)
                store_literal_in_memory_a5d1f08cd66a1a59e841a286c7f2c877311b5d331d2315cd2fe3c5f05e833928(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_a5d1f08cd66a1a59e841a286c7f2c877311b5d331d2315cd2fe3c5f05e833928__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_a5d1f08cd66a1a59e841a286c7f2c877311b5d331d2315cd2fe3c5f05e833928_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_a5d1f08cd66a1a59e841a286c7f2c877311b5d331d2315cd2fe3c5f05e833928(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_a5d1f08cd66a1a59e841a286c7f2c877311b5d331d2315cd2fe3c5f05e833928__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function cleanup_t_rational_4294967296_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_4294967296_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_4294967296_by_1(value)))
            }
            function mod_t_uint256(x, y) -> r
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if iszero(y) { panic_error_0x12() }
                r := mod(x, y)
            }
            function convert_t_uint256_to_t_uint32(value) -> converted
            {
                converted := cleanup_t_uint32(identity(cleanup_t_uint256(value)))
            }
            function checked_sub_t_uint32(x, y) -> diff
            {
                x := cleanup_t_uint32(x)
                y := cleanup_t_uint32(y)
                diff := sub(x, y)
                if gt(diff, 0xffffffff) { panic_error_0x11() }
            }
            function convert_t_rational_0_by_1_to_t_uint32(value) -> converted
            {
                converted := cleanup_t_uint32(identity(cleanup_t_rational_0_by_1(value)))
            }
            function convert_t_rational_0_by_1_to_t_uint112(value) -> converted
            {
                converted := cleanup_t_uint112(identity(cleanup_t_rational_0_by_1(value)))
            }
            function cleanup_t_uint224(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
            }
            function convert_t_uint224_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_uint224(value)))
            }
            function convert_t_uint32_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_uint32(value)))
            }
            function convert_t_uint256_to_t_uint112(value) -> converted
            {
                converted := cleanup_t_uint112(identity(cleanup_t_uint256(value)))
            }
            function update_byte_slice_14_shift_0(value, toInsert) -> result
            {
                let mask := 0xffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_uint112_to_t_uint112(value) -> converted
            {
                converted := cleanup_t_uint112(identity(cleanup_t_uint112(value)))
            }
            function prepare_store_t_uint112(value) -> ret
            { ret := value }
            function update_storage_value_offset_0t_uint112_to_t_uint112(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint112_to_t_uint112(value_0)
                sstore(slot, update_byte_slice_14_shift_0(sload(slot), prepare_store_t_uint112(convertedValue_0)))
            }
            function shift_left_112(value) -> newValue
            { newValue := shl(112, value) }
            function update_byte_slice_14_shift_14(value, toInsert) -> result
            {
                let mask := 0xffffffffffffffffffffffffffff0000000000000000000000000000
                toInsert := shift_left_112(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function update_storage_value_offset_14t_uint112_to_t_uint112(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint112_to_t_uint112(value_0)
                sstore(slot, update_byte_slice_14_shift_14(sload(slot), prepare_store_t_uint112(convertedValue_0)))
            }
            function update_byte_slice_4_shift_28(value, toInsert) -> result
            {
                let mask := 0xffffffff00000000000000000000000000000000000000000000000000000000
                toInsert := shift_left_224(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_uint32_to_t_uint32(value) -> converted
            {
                converted := cleanup_t_uint32(identity(cleanup_t_uint32(value)))
            }
            function prepare_store_t_uint32(value) -> ret
            { ret := value }
            function update_storage_value_offset_28t_uint32_to_t_uint32(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint32_to_t_uint32(value_0)
                sstore(slot, update_byte_slice_4_shift_28(sload(slot), prepare_store_t_uint32(convertedValue_0)))
            }
            function abi_encode_tuple_t_uint112_t_uint112__to_t_uint112_t_uint112__fromStack(headStart, value0, value1) -> tail
            {
                tail := add(headStart, 64)
                abi_encode_t_uint112_to_t_uint112_fromStack(value0, add(headStart, 0))
                abi_encode_t_uint112_to_t_uint112_fromStack(value1, add(headStart, 32))
            }
            /// @ast-id 1220 @src 0:12043:13044  "function _update(..."
            function fun__update_1220(var_balance0_1101, var_balance1_1103, var__reserve0_1105, var__reserve1_1107)
            {
                /// @src 0:12205:12213  "balance0"
                let _230 := var_balance0_1101
                let expr_1111 := _230
                /// @src 0:12232:12234  "-1"
                let expr_1117 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                /// @src 0:12225:12235  "int112(-1)"
                let expr_1118 := convert_t_rational_minus_1_by_1_to_t_int112(expr_1117)
                /// @src 0:12217:12236  "uint112(int112(-1))"
                let expr_1119 := convert_t_int112_to_t_uint112(expr_1118)
                /// @src 0:12205:12236  "balance0 <= uint112(int112(-1))"
                let expr_1120 := iszero(gt(cleanup_t_uint256(expr_1111), convert_t_uint112_to_t_uint256(expr_1119)))
                /// @src 0:12205:12271  "balance0 <= uint112(int112(-1)) && balance1 <= uint112(int112(-1))"
                let expr_1131 := expr_1120
                if expr_1131
                {
                    /// @src 0:12240:12248  "balance1"
                    let _231 := var_balance1_1103
                    let expr_1121 := _231
                    /// @src 0:12267:12269  "-1"
                    let expr_1127 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                    /// @src 0:12260:12270  "int112(-1)"
                    let expr_1128 := convert_t_rational_minus_1_by_1_to_t_int112(expr_1127)
                    /// @src 0:12252:12271  "uint112(int112(-1))"
                    let expr_1129 := convert_t_int112_to_t_uint112(expr_1128)
                    /// @src 0:12240:12271  "balance1 <= uint112(int112(-1))"
                    let expr_1130 := iszero(gt(cleanup_t_uint256(expr_1121), convert_t_uint112_to_t_uint256(expr_1129)))
                    /// @src 0:12205:12271  "balance0 <= uint112(int112(-1)) && balance1 <= uint112(int112(-1))"
                    expr_1131 := expr_1130
                }
                /// @src 0:12184:12316  "require(..."
                require_helper_t_stringliteral_a5d1f08cd66a1a59e841a286c7f2c877311b5d331d2315cd2fe3c5f05e833928(expr_1131)
                /// @src 0:12357:12372  "block.timestamp"
                let expr_1140 := timestamp()
                /// @src 0:12375:12382  "2 ** 32"
                let expr_1143 := 0x0100000000
                /// @src 0:12357:12382  "block.timestamp % 2 ** 32"
                let expr_1144 := mod_t_uint256(expr_1140, convert_t_rational_4294967296_by_1_to_t_uint256(expr_1143))
                /// @src 0:12350:12383  "uint32(block.timestamp % 2 ** 32)"
                let expr_1145 := convert_t_uint256_to_t_uint32(expr_1144)
                /// @src 0:12326:12383  "uint32 blockTimestamp = uint32(block.timestamp % 2 ** 32)"
                let var_blockTimestamp_1136 := expr_1145
                /// @src 0:12414:12428  "blockTimestamp"
                let _232 := var_blockTimestamp_1136
                let expr_1149 := _232
                /// @src 0:12431:12449  "blockTimestampLast"
                let _233 := read_from_storage_split_offset_28_t_uint32(0x08)
                let expr_1150 := _233
                /// @src 0:12414:12449  "blockTimestamp - blockTimestampLast"
                let expr_1151 := checked_sub_t_uint32(expr_1149, expr_1150)
                /// @src 0:12393:12449  "uint32 timeElapsed = blockTimestamp - blockTimestampLast"
                let var_timeElapsed_1148 := expr_1151
                /// @src 0:12486:12497  "timeElapsed"
                let _234 := var_timeElapsed_1148
                let expr_1153 := _234
                /// @src 0:12500:12501  "0"
                let expr_1154 := 0x00
                /// @src 0:12486:12501  "timeElapsed > 0"
                let expr_1155 := gt(cleanup_t_uint32(expr_1153), convert_t_rational_0_by_1_to_t_uint32(expr_1154))
                /// @src 0:12486:12519  "timeElapsed > 0 && _reserve0 != 0"
                let expr_1159 := expr_1155
                if expr_1159
                {
                    /// @src 0:12505:12514  "_reserve0"
                    let _235 := var__reserve0_1105
                    let expr_1156 := _235
                    /// @src 0:12518:12519  "0"
                    let expr_1157 := 0x00
                    /// @src 0:12505:12519  "_reserve0 != 0"
                    let expr_1158 := iszero(eq(cleanup_t_uint112(expr_1156), convert_t_rational_0_by_1_to_t_uint112(expr_1157)))
                    /// @src 0:12486:12519  "timeElapsed > 0 && _reserve0 != 0"
                    expr_1159 := expr_1158
                }
                /// @src 0:12486:12537  "timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0"
                let expr_1163 := expr_1159
                if expr_1163
                {
                    /// @src 0:12523:12532  "_reserve1"
                    let _236 := var__reserve1_1107
                    let expr_1160 := _236
                    /// @src 0:12536:12537  "0"
                    let expr_1161 := 0x00
                    /// @src 0:12523:12537  "_reserve1 != 0"
                    let expr_1162 := iszero(eq(cleanup_t_uint112(expr_1160), convert_t_rational_0_by_1_to_t_uint112(expr_1161)))
                    /// @src 0:12486:12537  "timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0"
                    expr_1163 := expr_1162
                }
                /// @src 0:12482:12878  "if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {..."
                if expr_1163
                {
                    /// @src 0:12658:12667  "UQ112x112"
                    let expr_1167_address := linkersymbol("UniswapV2Factory.sol:UQ112x112")
                    /// @src 0:12675:12684  "_reserve1"
                    let _237 := var__reserve1_1107
                    let expr_1169 := _237
                    /// @src 0:12658:12685  "UQ112x112.encode(_reserve1)"
                    let expr_1170 := fun_encode_800(expr_1169)
                    /// @src 0:12658:12691  "UQ112x112.encode(_reserve1).uqdiv"
                    let expr_1171_self := expr_1170
                    /// @src 0:12692:12701  "_reserve0"
                    let _238 := var__reserve0_1105
                    let expr_1172 := _238
                    /// @src 0:12658:12702  "UQ112x112.encode(_reserve1).uqdiv(_reserve0)"
                    let expr_1173 := fun_uqdiv_819(expr_1171_self, expr_1172)
                    /// @src 0:12653:12703  "uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0))"
                    let expr_1174 := convert_t_uint224_to_t_uint256(expr_1173)
                    /// @src 0:12722:12733  "timeElapsed"
                    let _239 := var_timeElapsed_1148
                    let expr_1175 := _239
                    /// @src 0:12653:12733  "uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) *..."
                    let expr_1176 := checked_mul_t_uint256(expr_1174, convert_t_uint32_to_t_uint256(expr_1175))
                    /// @src 0:12613:12733  "price0CumulativeLast +=..."
                    let _240 := read_from_storage_split_offset_0_t_uint256(0x09)
                    let expr_1177 := checked_add_t_uint256(_240, expr_1176)
                    update_storage_value_offset_0t_uint256_to_t_uint256(0x09, expr_1177)
                    /// @src 0:12792:12801  "UQ112x112"
                    let expr_1182_address := linkersymbol("UniswapV2Factory.sol:UQ112x112")
                    /// @src 0:12809:12818  "_reserve0"
                    let _241 := var__reserve0_1105
                    let expr_1184 := _241
                    /// @src 0:12792:12819  "UQ112x112.encode(_reserve0)"
                    let expr_1185 := fun_encode_800(expr_1184)
                    /// @src 0:12792:12825  "UQ112x112.encode(_reserve0).uqdiv"
                    let expr_1186_self := expr_1185
                    /// @src 0:12826:12835  "_reserve1"
                    let _242 := var__reserve1_1107
                    let expr_1187 := _242
                    /// @src 0:12792:12836  "UQ112x112.encode(_reserve0).uqdiv(_reserve1)"
                    let expr_1188 := fun_uqdiv_819(expr_1186_self, expr_1187)
                    /// @src 0:12787:12837  "uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1))"
                    let expr_1189 := convert_t_uint224_to_t_uint256(expr_1188)
                    /// @src 0:12856:12867  "timeElapsed"
                    let _243 := var_timeElapsed_1148
                    let expr_1190 := _243
                    /// @src 0:12787:12867  "uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) *..."
                    let expr_1191 := checked_mul_t_uint256(expr_1189, convert_t_uint32_to_t_uint256(expr_1190))
                    /// @src 0:12747:12867  "price1CumulativeLast +=..."
                    let _244 := read_from_storage_split_offset_0_t_uint256(0x0a)
                    let expr_1192 := checked_add_t_uint256(_244, expr_1191)
                    update_storage_value_offset_0t_uint256_to_t_uint256(0x0a, expr_1192)
                }
                /// @src 0:12906:12914  "balance0"
                let _245 := var_balance0_1101
                let expr_1199 := _245
                /// @src 0:12898:12915  "uint112(balance0)"
                let expr_1200 := convert_t_uint256_to_t_uint112(expr_1199)
                /// @src 0:12887:12915  "reserve0 = uint112(balance0)"
                update_storage_value_offset_0t_uint112_to_t_uint112(0x08, expr_1200)
                let expr_1201 := expr_1200
                /// @src 0:12944:12952  "balance1"
                let _246 := var_balance1_1103
                let expr_1206 := _246
                /// @src 0:12936:12953  "uint112(balance1)"
                let expr_1207 := convert_t_uint256_to_t_uint112(expr_1206)
                /// @src 0:12925:12953  "reserve1 = uint112(balance1)"
                update_storage_value_offset_14t_uint112_to_t_uint112(0x08, expr_1207)
                let expr_1208 := expr_1207
                /// @src 0:12984:12998  "blockTimestamp"
                let _247 := var_blockTimestamp_1136
                let expr_1211 := _247
                /// @src 0:12963:12998  "blockTimestampLast = blockTimestamp"
                update_storage_value_offset_28t_uint32_to_t_uint32(0x08, expr_1211)
                let expr_1212 := expr_1211
                /// @src 0:13018:13026  "reserve0"
                let _248 := read_from_storage_split_offset_0_t_uint112(0x08)
                let expr_1215 := _248
                /// @src 0:13028:13036  "reserve1"
                let _249 := read_from_storage_split_offset_14_t_uint112(0x08)
                let expr_1216 := _249
                /// @src 0:13013:13037  "Sync(reserve0, reserve1)"
                let _250 := 0x1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1
                {
                    let _251 := allocate_unbounded()
                    let _252 := abi_encode_tuple_t_uint112_t_uint112__to_t_uint112_t_uint112__fromStack(_251, expr_1215, expr_1216)
                    log1(_251, sub(_252, _251), _250)
                }
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function zero_value_for_split_t_uint224() -> ret
            { ret := 0 }
            function convert_t_uint112_to_t_uint224(value) -> converted
            {
                converted := cleanup_t_uint224(identity(cleanup_t_uint112(value)))
            }
            function cleanup_t_rational_5192296858534827628530496329220096_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_5192296858534827628530496329220096_by_1_to_t_uint224(value) -> converted
            {
                converted := cleanup_t_uint224(identity(cleanup_t_rational_5192296858534827628530496329220096_by_1(value)))
            }
            /// @src 0:8068:8100  "uint224 constant Q112 = 2 ** 112"
            function constant_Q112_783() -> ret
            {
                /// @src 0:8092:8100  "2 ** 112"
                let expr_782 := 0x010000000000000000000000000000
                let _255 := convert_t_rational_5192296858534827628530496329220096_by_1_to_t_uint224(expr_782)
                ret := _255
            }
            function checked_mul_t_uint224(x, y) -> product
            {
                x := cleanup_t_uint224(x)
                y := cleanup_t_uint224(y)
                if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }
                product := mul(x, y)
            }
            /// @ast-id 800 @src 0:8146:8264  "function encode(uint112 y) internal pure returns (uint224 z) {..."
            function fun_encode_800(var_y_785) -> var_z_788
            {
                /// @src 0:8196:8205  "uint224 z"
                let zero_t_uint224_253 := zero_value_for_split_t_uint224()
                var_z_788 := zero_t_uint224_253
                /// @src 0:8229:8230  "y"
                let _254 := var_y_785
                let expr_793 := _254
                /// @src 0:8221:8231  "uint224(y)"
                let expr_794 := convert_t_uint112_to_t_uint224(expr_793)
                /// @src 0:8234:8238  "Q112"
                let expr_795 := constant_Q112_783()
                /// @src 0:8221:8238  "uint224(y) * Q112"
                let expr_796 := checked_mul_t_uint224(expr_794, expr_795)
                /// @src 0:8217:8238  "z = uint224(y) * Q112"
                var_z_788 := expr_796
                let expr_797 := expr_796
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function checked_div_t_uint224(x, y) -> r
            {
                x := cleanup_t_uint224(x)
                y := cleanup_t_uint224(y)
                if iszero(y) { panic_error_0x12() }
                r := div(x, y)
            }
            /// @ast-id 819 @src 0:8332:8438  "function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {..."
            function fun_uqdiv_819(var_x_802, var_y_804) -> var_z_807
            {
                /// @src 0:8392:8401  "uint224 z"
                let zero_t_uint224_256 := zero_value_for_split_t_uint224()
                var_z_807 := zero_t_uint224_256
                /// @src 0:8417:8418  "x"
                let _257 := var_x_802
                let expr_810 := _257
                /// @src 0:8429:8430  "y"
                let _258 := var_y_804
                let expr_813 := _258
                /// @src 0:8421:8431  "uint224(y)"
                let expr_814 := convert_t_uint112_to_t_uint224(expr_813)
                /// @src 0:8417:8431  "x / uint224(y)"
                let expr_815 := checked_div_t_uint224(expr_810, expr_814)
                /// @src 0:8413:8431  "z = x / uint224(y)"
                var_z_807 := expr_815
                let expr_816 := expr_815
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function convert_t_uint160_to_t_contract$_IUniswapV2Factory_$52(value) -> converted
            {
                converted := convert_t_uint160_to_t_uint160(value)
            }
            function convert_t_address_to_t_contract$_IUniswapV2Factory_$52(value) -> converted
            {
                converted := convert_t_uint160_to_t_contract$_IUniswapV2Factory_$52(value)
            }
            function convert_t_contract$_IUniswapV2Factory_$52_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_address(value)
            }
            function abi_decode_t_address_fromMemory(offset, end) -> value
            {
                value := mload(offset)
                validator_revert_t_address(value)
            }
            function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)
                }
            }
            function cleanup_t_rational_5_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_5_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_5_by_1(value)))
            }
            /// @ast-id 1328 @src 0:13131:13972  "function _mintFee(..."
            function fun__mintFee_1328(var__reserve0_1222, var__reserve1_1224) -> var_feeOn_1227
            {
                /// @src 0:13226:13236  "bool feeOn"
                let zero_t_bool_259 := zero_value_for_split_t_bool()
                var_feeOn_1227 := zero_t_bool_259
                /// @src 0:13282:13289  "factory"
                let _260 := read_from_storage_split_offset_0_t_address(0x05)
                let expr_1232 := _260
                /// @src 0:13264:13290  "IUniswapV2Factory(factory)"
                let expr_1233_address := convert_t_address_to_t_contract$_IUniswapV2Factory_$52(expr_1232)
                /// @src 0:13264:13296  "IUniswapV2Factory(factory).feeTo"
                let expr_1234_address := convert_t_contract$_IUniswapV2Factory_$52_to_t_address(expr_1233_address)
                let expr_1234_functionSelector := 0x017e7e58
                /// @src 0:13264:13298  "IUniswapV2Factory(factory).feeTo()"
                let _261 := allocate_unbounded()
                mstore(_261, shift_left_224(expr_1234_functionSelector))
                let _262 := abi_encode_tuple__to__fromStack(add(_261, 4))
                let _263 := call(gas(), expr_1234_address, 0, _261, sub(_262, _261), _261, 32)
                if iszero(_263) { revert_forward_1() }
                let expr_1235
                if _263
                {
                    let _264 := 32
                    if gt(_264, returndatasize()) { _264 := returndatasize() }
                    finalize_allocation(_261, _264)
                    expr_1235 := abi_decode_tuple_t_address_fromMemory(_261, add(_261, _264))
                }
                /// @src 0:13248:13298  "address feeTo = IUniswapV2Factory(factory).feeTo()"
                let var_feeTo_1230 := expr_1235
                /// @src 0:13316:13321  "feeTo"
                let _265 := var_feeTo_1230
                let expr_1238 := _265
                /// @src 0:13333:13334  "0"
                let expr_1241 := 0x00
                /// @src 0:13325:13335  "address(0)"
                let expr_1242 := convert_t_rational_0_by_1_to_t_address(expr_1241)
                /// @src 0:13316:13335  "feeTo != address(0)"
                let expr_1243 := iszero(eq(cleanup_t_address(expr_1238), cleanup_t_address(expr_1242)))
                /// @src 0:13308:13335  "feeOn = feeTo != address(0)"
                var_feeOn_1227 := expr_1243
                let expr_1244 := expr_1243
                /// @src 0:13359:13364  "kLast"
                let _266 := read_from_storage_split_offset_0_t_uint256(0x0b)
                let expr_1248 := _266
                /// @src 0:13345:13364  "uint _kLast = kLast"
                let var__kLast_1247 := expr_1248
                /// @src 0:13393:13398  "feeOn"
                let _267 := var_feeOn_1227
                let expr_1250 := _267
                /// @src 0:13389:13966  "if (feeOn) {..."
                switch expr_1250
                case 0 {
                    /// @src 0:13919:13925  "_kLast"
                    let _268 := var__kLast_1247
                    let expr_1317 := _268
                    /// @src 0:13929:13930  "0"
                    let expr_1318 := 0x00
                    /// @src 0:13919:13930  "_kLast != 0"
                    let expr_1319 := iszero(eq(cleanup_t_uint256(expr_1317), convert_t_rational_0_by_1_to_t_uint256(expr_1318)))
                    /// @src 0:13915:13966  "if (_kLast != 0) {..."
                    if expr_1319
                    {
                        /// @src 0:13954:13955  "0"
                        let expr_1321 := 0x00
                        /// @src 0:13946:13955  "kLast = 0"
                        let _269 := convert_t_rational_0_by_1_to_t_uint256(expr_1321)
                        update_storage_value_offset_0t_uint256_to_t_uint256(0x0b, _269)
                        let expr_1322 := _269
                    }
                }
                default /// @src 0:13389:13966  "if (feeOn) {..."
                {
                    /// @src 0:13418:13424  "_kLast"
                    let _270 := var__kLast_1247
                    let expr_1251 := _270
                    /// @src 0:13428:13429  "0"
                    let expr_1252 := 0x00
                    /// @src 0:13418:13429  "_kLast != 0"
                    let expr_1253 := iszero(eq(cleanup_t_uint256(expr_1251), convert_t_rational_0_by_1_to_t_uint256(expr_1252)))
                    /// @src 0:13414:13899  "if (_kLast != 0) {..."
                    if expr_1253
                    {
                        /// @src 0:13462:13466  "Math"
                        let expr_1256_address := linkersymbol("UniswapV2Factory.sol:Math")
                        /// @src 0:13477:13486  "_reserve0"
                        let _271 := var__reserve0_1222
                        let expr_1260 := _271
                        /// @src 0:13472:13487  "uint(_reserve0)"
                        let expr_1261 := convert_t_uint112_to_t_uint256(expr_1260)
                        /// @src 0:13472:13491  "uint(_reserve0).mul"
                        let expr_1262_self := expr_1261
                        /// @src 0:13492:13501  "_reserve1"
                        let _272 := var__reserve1_1224
                        let expr_1263 := _272
                        /// @src 0:13472:13502  "uint(_reserve0).mul(_reserve1)"
                        let _273 := convert_t_uint112_to_t_uint256(expr_1263)
                        let expr_1264 := fun_mul_125(expr_1262_self, _273)
                        /// @src 0:13462:13503  "Math.sqrt(uint(_reserve0).mul(_reserve1))"
                        let expr_1265 := fun_sqrt_693(expr_1264)
                        /// @src 0:13449:13503  "uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1))"
                        let var_rootK_1255 := expr_1265
                        /// @src 0:13538:13542  "Math"
                        let expr_1269_address := linkersymbol("UniswapV2Factory.sol:Math")
                        /// @src 0:13548:13554  "_kLast"
                        let _274 := var__kLast_1247
                        let expr_1271 := _274
                        /// @src 0:13538:13555  "Math.sqrt(_kLast)"
                        let expr_1272 := fun_sqrt_693(expr_1271)
                        /// @src 0:13521:13555  "uint rootKLast = Math.sqrt(_kLast)"
                        let var_rootKLast_1268 := expr_1272
                        /// @src 0:13577:13582  "rootK"
                        let _275 := var_rootK_1255
                        let expr_1274 := _275
                        /// @src 0:13585:13594  "rootKLast"
                        let _276 := var_rootKLast_1268
                        let expr_1275 := _276
                        /// @src 0:13577:13594  "rootK > rootKLast"
                        let expr_1276 := gt(cleanup_t_uint256(expr_1274), cleanup_t_uint256(expr_1275))
                        /// @src 0:13573:13885  "if (rootK > rootKLast) {..."
                        if expr_1276
                        {
                            /// @src 0:13635:13646  "totalSupply"
                            let _277 := read_from_storage_split_offset_0_t_uint256(0x00)
                            let expr_1279 := _277
                            /// @src 0:13635:13650  "totalSupply.mul"
                            let expr_1280_self := expr_1279
                            /// @src 0:13651:13656  "rootK"
                            let _278 := var_rootK_1255
                            let expr_1281 := _278
                            /// @src 0:13651:13660  "rootK.sub"
                            let expr_1282_self := expr_1281
                            /// @src 0:13661:13670  "rootKLast"
                            let _279 := var_rootKLast_1268
                            let expr_1283 := _279
                            /// @src 0:13651:13671  "rootK.sub(rootKLast)"
                            let expr_1284 := fun_sub_97(expr_1282_self, expr_1283)
                            /// @src 0:13635:13672  "totalSupply.mul(rootK.sub(rootKLast))"
                            let expr_1285 := fun_mul_125(expr_1280_self, expr_1284)
                            /// @src 0:13618:13672  "uint numerator = totalSupply.mul(rootK.sub(rootKLast))"
                            let var_numerator_1278 := expr_1285
                            /// @src 0:13713:13718  "rootK"
                            let _280 := var_rootK_1255
                            let expr_1289 := _280
                            /// @src 0:13713:13722  "rootK.mul"
                            let expr_1290_self := expr_1289
                            /// @src 0:13723:13724  "5"
                            let expr_1291 := 0x05
                            /// @src 0:13713:13725  "rootK.mul(5)"
                            let _281 := convert_t_rational_5_by_1_to_t_uint256(expr_1291)
                            let expr_1292 := fun_mul_125(expr_1290_self, _281)
                            /// @src 0:13713:13729  "rootK.mul(5).add"
                            let expr_1293_self := expr_1292
                            /// @src 0:13730:13739  "rootKLast"
                            let _282 := var_rootKLast_1268
                            let expr_1294 := _282
                            /// @src 0:13713:13740  "rootK.mul(5).add(rootKLast)"
                            let expr_1295 := fun_add_75(expr_1293_self, expr_1294)
                            /// @src 0:13694:13740  "uint denominator = rootK.mul(5).add(rootKLast)"
                            let var_denominator_1288 := expr_1295
                            /// @src 0:13779:13788  "numerator"
                            let _283 := var_numerator_1278
                            let expr_1299 := _283
                            /// @src 0:13791:13802  "denominator"
                            let _284 := var_denominator_1288
                            let expr_1300 := _284
                            /// @src 0:13779:13802  "numerator / denominator"
                            let expr_1301 := checked_div_t_uint256(expr_1299, expr_1300)
                            /// @src 0:13762:13802  "uint liquidity = numerator / denominator"
                            let var_liquidity_1298 := expr_1301
                            /// @src 0:13828:13837  "liquidity"
                            let _285 := var_liquidity_1298
                            let expr_1303 := _285
                            /// @src 0:13840:13841  "0"
                            let expr_1304 := 0x00
                            /// @src 0:13828:13841  "liquidity > 0"
                            let expr_1305 := gt(cleanup_t_uint256(expr_1303), convert_t_rational_0_by_1_to_t_uint256(expr_1304))
                            /// @src 0:13824:13866  "if (liquidity > 0) _mint(feeTo, liquidity)"
                            if expr_1305
                            {
                                /// @src 0:13849:13854  "feeTo"
                                let _286 := var_feeTo_1230
                                let expr_1307 := _286
                                /// @src 0:13856:13865  "liquidity"
                                let _287 := var_liquidity_1298
                                let expr_1308 := _287
                                fun__mint_350(expr_1307, expr_1308)
                            }
                        }
                    }
                }
            }
            /// @ast-id 350 @src 0:3843:4040  "function _mint(address to, uint value) internal {..."
            function fun__mint_350(var_to_317, var_value_319)
            {
                /// @src 0:3915:3926  "totalSupply"
                let _288 := read_from_storage_split_offset_0_t_uint256(0x00)
                let expr_323 := _288
                /// @src 0:3915:3930  "totalSupply.add"
                let expr_324_self := expr_323
                /// @src 0:3931:3936  "value"
                let _289 := var_value_319
                let expr_325 := _289
                /// @src 0:3915:3937  "totalSupply.add(value)"
                let expr_326 := fun_add_75(expr_324_self, expr_325)
                /// @src 0:3901:3937  "totalSupply = totalSupply.add(value)"
                update_storage_value_offset_0t_uint256_to_t_uint256(0x00, expr_326)
                let expr_327 := expr_326
                /// @src 0:3963:3972  "balanceOf"
                let _290 := 0x01
                let expr_332 := _290
                /// @src 0:3973:3975  "to"
                let _291 := var_to_317
                let expr_333 := _291
                /// @src 0:3963:3976  "balanceOf[to]"
                let _292 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_332, expr_333)
                let _293 := read_from_storage_split_offset_0_t_uint256(_292)
                let expr_334 := _293
                /// @src 0:3963:3980  "balanceOf[to].add"
                let expr_335_self := expr_334
                /// @src 0:3981:3986  "value"
                let _294 := var_value_319
                let expr_336 := _294
                /// @src 0:3963:3987  "balanceOf[to].add(value)"
                let expr_337 := fun_add_75(expr_335_self, expr_336)
                /// @src 0:3947:3956  "balanceOf"
                let _295 := 0x01
                let expr_329 := _295
                /// @src 0:3957:3959  "to"
                let _296 := var_to_317
                let expr_330 := _296
                /// @src 0:3947:3960  "balanceOf[to]"
                let _297 := mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address(expr_329, expr_330)
                /// @src 0:3947:3987  "balanceOf[to] = balanceOf[to].add(value)"
                update_storage_value_offset_0t_uint256_to_t_uint256(_297, expr_337)
                let expr_338 := expr_337
                /// @src 0:4019:4020  "0"
                let expr_343 := 0x00
                /// @src 0:4011:4021  "address(0)"
                let expr_344 := convert_t_rational_0_by_1_to_t_address(expr_343)
                /// @src 0:4023:4025  "to"
                let _298 := var_to_317
                let expr_345 := _298
                /// @src 0:4027:4032  "value"
                let _299 := var_value_319
                let expr_346 := _299
                /// @src 0:4002:4033  "Transfer(address(0), to, value)"
                let _300 := 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
                let _301 := convert_t_address_to_t_address(expr_344)
                let _302 := convert_t_address_to_t_address(expr_345)
                {
                    let _303 := allocate_unbounded()
                    let _304 := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(_303, expr_346)
                    log3(_303, sub(_304, _303), _300, _301, _302)
                }
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function cleanup_t_rational_3_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_3_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_3_by_1(value)))
            }
            function cleanup_t_rational_2_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_2_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_2_by_1(value)))
            }
            /// @ast-id 693 @src 0:6630:6922  "function sqrt(uint y) internal pure returns (uint z) {..."
            function fun_sqrt_693(var_y_641) -> var_z_644
            {
                /// @src 0:6675:6681  "uint z"
                let zero_t_uint256_305 := zero_value_for_split_t_uint256()
                var_z_644 := zero_t_uint256_305
                /// @src 0:6697:6698  "y"
                let _306 := var_y_641
                let expr_646 := _306
                /// @src 0:6701:6702  "3"
                let expr_647 := 0x03
                /// @src 0:6697:6702  "y > 3"
                let expr_648 := gt(cleanup_t_uint256(expr_646), convert_t_rational_3_by_1_to_t_uint256(expr_647))
                /// @src 0:6693:6916  "if (y > 3) {..."
                switch expr_648
                case 0 {
                    /// @src 0:6878:6879  "y"
                    let _307 := var_y_641
                    let expr_682 := _307
                    /// @src 0:6883:6884  "0"
                    let expr_683 := 0x00
                    /// @src 0:6878:6884  "y != 0"
                    let expr_684 := iszero(eq(cleanup_t_uint256(expr_682), convert_t_rational_0_by_1_to_t_uint256(expr_683)))
                    /// @src 0:6874:6916  "if (y != 0) {..."
                    if expr_684
                    {
                        /// @src 0:6904:6905  "1"
                        let expr_686 := 0x01
                        /// @src 0:6900:6905  "z = 1"
                        let _308 := convert_t_rational_1_by_1_to_t_uint256(expr_686)
                        var_z_644 := _308
                        let expr_687 := _308
                    }
                }
                default /// @src 0:6693:6916  "if (y > 3) {..."
                {
                    /// @src 0:6722:6723  "y"
                    let _309 := var_y_641
                    let expr_650 := _309
                    /// @src 0:6718:6723  "z = y"
                    var_z_644 := expr_650
                    let expr_651 := expr_650
                    /// @src 0:6746:6747  "y"
                    let _310 := var_y_641
                    let expr_655 := _310
                    /// @src 0:6750:6751  "2"
                    let expr_656 := 0x02
                    /// @src 0:6746:6751  "y / 2"
                    let expr_657 := checked_div_t_uint256(expr_655, convert_t_rational_2_by_1_to_t_uint256(expr_656))
                    /// @src 0:6754:6755  "1"
                    let expr_658 := 0x01
                    /// @src 0:6746:6755  "y / 2 + 1"
                    let expr_659 := checked_add_t_uint256(expr_657, convert_t_rational_1_by_1_to_t_uint256(expr_658))
                    /// @src 0:6737:6755  "uint x = y / 2 + 1"
                    let var_x_654 := expr_659
                    /// @src 0:6769:6858  "while (x < z) {..."
                    for { } 1 { }
                    {
                        /// @src 0:6776:6777  "x"
                        let _311 := var_x_654
                        let expr_661 := _311
                        /// @src 0:6780:6781  "z"
                        let _312 := var_z_644
                        let expr_662 := _312
                        /// @src 0:6776:6781  "x < z"
                        let expr_663 := lt(cleanup_t_uint256(expr_661), cleanup_t_uint256(expr_662))
                        if iszero(expr_663) { break }
                        /// @src 0:6805:6806  "x"
                        let _313 := var_x_654
                        let expr_665 := _313
                        /// @src 0:6801:6806  "z = x"
                        var_z_644 := expr_665
                        let expr_666 := expr_665
                        /// @src 0:6829:6830  "y"
                        let _314 := var_y_641
                        let expr_669 := _314
                        /// @src 0:6833:6834  "x"
                        let _315 := var_x_654
                        let expr_670 := _315
                        /// @src 0:6829:6834  "y / x"
                        let expr_671 := checked_div_t_uint256(expr_669, expr_670)
                        /// @src 0:6837:6838  "x"
                        let _316 := var_x_654
                        let expr_672 := _316
                        /// @src 0:6829:6838  "y / x + x"
                        let expr_673 := checked_add_t_uint256(expr_671, expr_672)
                        /// @src 0:6828:6839  "(y / x + x)"
                        let expr_674 := expr_673
                        /// @src 0:6842:6843  "2"
                        let expr_675 := 0x02
                        /// @src 0:6828:6843  "(y / x + x) / 2"
                        let expr_676 := checked_div_t_uint256(expr_674, convert_t_rational_2_by_1_to_t_uint256(expr_675))
                        /// @src 0:6824:6843  "x = (y / x + x) / 2"
                        var_x_654 := expr_676
                        let expr_677 := expr_676
                    }
                }
            }
            /// @ast-id 1026 @src 0:11078:11209  "modifier lock() {..."
            function modifier_lock_1534(var_amount0Out_1525, var_amount1Out_1527, var_to_1529, var_data_1531_offset, var_data_1531_length)
            {
                /// @src 0:11112:11120  "unlocked"
                let _317 := read_from_storage_split_offset_0_t_uint256(0x0c)
                let expr_1010 := _317
                /// @src 0:11124:11125  "1"
                let expr_1011 := 0x01
                /// @src 0:11112:11125  "unlocked == 1"
                let expr_1012 := eq(cleanup_t_uint256(expr_1010), convert_t_rational_1_by_1_to_t_uint256(expr_1011))
                /// @src 0:11104:11147  "require(unlocked == 1, \"UniswapV2: LOCKED\")"
                require_helper_t_stringliteral_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a(expr_1012)
                /// @src 0:11168:11169  "0"
                let expr_1017 := 0x00
                /// @src 0:11157:11169  "unlocked = 0"
                let _318 := convert_t_rational_0_by_1_to_t_uint256(expr_1017)
                update_storage_value_offset_0t_uint256_to_t_uint256(0x0c, _318)
                let expr_1018 := _318
                /// @src 0:11179:11180  "_"
                fun_swap_1760_inner(var_amount0Out_1525, var_amount1Out_1527, var_to_1529, var_data_1531_offset, var_data_1531_length)
                /// @src 0:11201:11202  "1"
                let expr_1022 := 0x01
                /// @src 0:11190:11202  "unlocked = 1"
                let _319 := convert_t_rational_1_by_1_to_t_uint256(expr_1022)
                update_storage_value_offset_0t_uint256_to_t_uint256(0x0c, _319)
                let expr_1023 := _319
            }
            /// @src 0:10233:20265  "contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {..."
            function store_literal_in_memory_05339493da7e2cbe77e17beadf6b91132eb307939495f5f1797bf88d95539e83(memPtr)
            {
                mstore(add(memPtr, 0), "UniswapV2: INSUFFICIENT_OUTPUT_A")
                mstore(add(memPtr, 32), "MOUNT")
            }
            function abi_encode_t_stringliteral_05339493da7e2cbe77e17beadf6b91132eb307939495f5f1797bf88d95539e83_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)
                store_literal_in_memory_05339493da7e2cbe77e17beadf6b91132eb307939495f5f1797bf88d95539e83(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_05339493da7e2cbe77e17beadf6b91132eb307939495f5f1797bf88d95539e83__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_05339493da7e2cbe77e17beadf6b91132eb307939495f5f1797bf88d95539e83_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_05339493da7e2cbe77e17beadf6b91132eb307939495f5f1797bf88d95539e83(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_05339493da7e2cbe77e17beadf6b91132eb307939495f5f1797bf88d95539e83__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_3f354ef449b2a9b081220ce21f57691008110b653edc191d8288e60cef58bb5f(memPtr)
            {
                mstore(add(memPtr, 0), "UniswapV2: INSUFFICIENT_LIQUIDIT")
                mstore(add(memPtr, 32), "Y")
            }
            function abi_encode_t_stringliteral_3f354ef449b2a9b081220ce21f57691008110b653edc191d8288e60cef58bb5f_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)
                store_literal_in_memory_3f354ef449b2a9b081220ce21f57691008110b653edc191d8288e60cef58bb5f(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_3f354ef449b2a9b081220ce21f57691008110b653edc191d8288e60cef58bb5f__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_3f354ef449b2a9b081220ce21f57691008110b653edc191d8288e60cef58bb5f_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_3f354ef449b2a9b081220ce21f57691008110b653edc191d8288e60cef58bb5f(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_3f354ef449b2a9b081220ce21f57691008110b653edc191d8288e60cef58bb5f__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_25d395026e6e4dd4e9808c7d6d3dd1f45abaf4874ae71f7161fff58de03154d3(memPtr)
            {
                mstore(add(memPtr, 0), "UniswapV2: INVALID_TO")
            }
            function abi_encode_t_stringliteral_25d395026e6e4dd4e9808c7d6d3dd1f45abaf4874ae71f7161fff58de03154d3_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 21)
                store_literal_in_memory_25d395026e6e4dd4e9808c7d6d3dd1f45abaf4874ae71f7161fff58de03154d3(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_25d395026e6e4dd4e9808c7d6d3dd1f45abaf4874ae71f7161fff58de03154d3__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_25d395026e6e4dd4e9808c7d6d3dd1f45abaf4874ae71f7161fff58de03154d3_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_25d395026e6e4dd4e9808c7d6d3dd1f45abaf4874ae71f7161fff58de03154d3(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_25d395026e6e4dd4e9808c7d6d3dd1f45abaf4874ae71f7161fff58de03154d3__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function array_length_t_bytes_calldata_ptr(value, len) -> length
            { length := len }
            function convert_t_uint160_to_t_contract$_IUniswapV2Callee_$959(value) -> converted
            {
                converted := convert_t_uint160_to_t_uint160(value)
            }
            function convert_t_address_to_t_contract$_IUniswapV2Callee_$959(value) -> converted
            {
                converted := convert_t_uint160_to_t_contract$_IUniswapV2Callee_$959(value)
            }
            function convert_t_contract$_IUniswapV2Callee_$959_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_address(value)
            }
            function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos
            {
                mstore(pos, length)
                updated_pos := add(pos, 0x20)
            }
            function copy_calldata_to_memory_with_cleanup(src, dst, length)
            {
                calldatacopy(dst, src, length)
                mstore(add(dst, length), 0)
            }
            function abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(start, length, pos) -> end
            {
                pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)
                copy_calldata_to_memory_with_cleanup(start, pos, length)
                end := add(pos, round_up_to_mul_of_32(length))
            }
            function abi_encode_tuple_t_address_t_uint256_t_uint256_t_bytes_calldata_ptr__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack(headStart, value0, value1, value2, value3, value4) -> tail
            {
                tail := add(headStart, 128)
                abi_encode_t_address_to_t_address_fromStack(value0, add(headStart, 0))
                abi_encode_t_uint256_to_t_uint256_fromStack(value1, add(headStart, 32))
                abi_encode_t_uint256_to_t_uint256_fromStack(value2, add(headStart, 64))
                mstore(add(headStart, 96), sub(tail, headStart))
                tail := abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(value3, value4, tail)
            }
            function store_literal_in_memory_10e2efc32d8a31d3b2c11a545b3ed09c2dbabc58ef6de4033929d0002e425b67(memPtr)
            {
                mstore(add(memPtr, 0), "UniswapV2: INSUFFICIENT_INPUT_AM")
                mstore(add(memPtr, 32), "OUNT")
            }
            function abi_encode_t_stringliteral_10e2efc32d8a31d3b2c11a545b3ed09c2dbabc58ef6de4033929d0002e425b67_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)
                store_literal_in_memory_10e2efc32d8a31d3b2c11a545b3ed09c2dbabc58ef6de4033929d0002e425b67(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_10e2efc32d8a31d3b2c11a545b3ed09c2dbabc58ef6de4033929d0002e425b67__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_10e2efc32d8a31d3b2c11a545b3ed09c2dbabc58ef6de4033929d0002e425b67_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_10e2efc32d8a31d3b2c11a545b3ed09c2dbabc58ef6de4033929d0002e425b67(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_10e2efc32d8a31d3b2c11a545b3ed09c2dbabc58ef6de4033929d0002e425b67__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function cleanup_t_rational_1000000_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_1000000_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_1000000_by_1(value)))
            }
            function store_literal_in_memory_50b159bbb975f5448705db79eafd212ba91c20fe5a110a13759239545d3339af(memPtr)
            {
                mstore(add(memPtr, 0), "UniswapV2: K")
            }
            function abi_encode_t_stringliteral_50b159bbb975f5448705db79eafd212ba91c20fe5a110a13759239545d3339af_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 12)
                store_literal_in_memory_50b159bbb975f5448705db79eafd212ba91c20fe5a110a13759239545d3339af(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_50b159bbb975f5448705db79eafd212ba91c20fe5a110a13759239545d3339af__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_50b159bbb975f5448705db79eafd212ba91c20fe5a110a13759239545d3339af_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_50b159bbb975f5448705db79eafd212ba91c20fe5a110a13759239545d3339af(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_50b159bbb975f5448705db79eafd212ba91c20fe5a110a13759239545d3339af__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack(headStart, value0, value1, value2, value3) -> tail
            {
                tail := add(headStart, 128)
                abi_encode_t_uint256_to_t_uint256_fromStack(value0, add(headStart, 0))
                abi_encode_t_uint256_to_t_uint256_fromStack(value1, add(headStart, 32))
                abi_encode_t_uint256_to_t_uint256_fromStack(value2, add(headStart, 64))
                abi_encode_t_uint256_to_t_uint256_fromStack(value3, add(headStart, 96))
            }
            /// @src 0:17236:19536  "function swap(..."
            function fun_swap_1760_inner(var_amount0Out_1525, var_amount1Out_1527, var_to_1529, var_data_1531_offset, var_data_1531_length)
            {
                /// @src 0:17400:17410  "amount0Out"
                let _320 := var_amount0Out_1525
                let expr_1537 := _320
                /// @src 0:17413:17414  "0"
                let expr_1538 := 0x00
                /// @src 0:17400:17414  "amount0Out > 0"
                let expr_1539 := gt(cleanup_t_uint256(expr_1537), convert_t_rational_0_by_1_to_t_uint256(expr_1538))
                /// @src 0:17400:17432  "amount0Out > 0 || amount1Out > 0"
                let expr_1543 := expr_1539
                if iszero(expr_1543)
                {
                    /// @src 0:17418:17428  "amount1Out"
                    let _321 := var_amount1Out_1527
                    let expr_1540 := _321
                    /// @src 0:17431:17432  "0"
                    let expr_1541 := 0x00
                    /// @src 0:17418:17432  "amount1Out > 0"
                    let expr_1542 := gt(cleanup_t_uint256(expr_1540), convert_t_rational_0_by_1_to_t_uint256(expr_1541))
                    /// @src 0:17400:17432  "amount0Out > 0 || amount1Out > 0"
                    expr_1543 := expr_1542
                }
                /// @src 0:17379:17495  "require(..."
                require_helper_t_stringliteral_05339493da7e2cbe77e17beadf6b91132eb307939495f5f1797bf88d95539e83(expr_1543)
                /// @src 0:17548:17561  "getReserves()"
                let expr_1552_component_1, expr_1552_component_2, expr_1552_component_3 := fun_getReserves_1048()
                /// @src 0:17505:17561  "(uint112 _reserve0, uint112 _reserve1, ) = getReserves()"
                let var__reserve0_1548 := expr_1552_component_1
                let var__reserve1_1550 := expr_1552_component_2
                /// @src 0:17607:17617  "amount0Out"
                let _322 := var_amount0Out_1525
                let expr_1555 := _322
                /// @src 0:17620:17629  "_reserve0"
                let _323 := var__reserve0_1548
                let expr_1556 := _323
                /// @src 0:17607:17629  "amount0Out < _reserve0"
                let expr_1557 := lt(cleanup_t_uint256(expr_1555), convert_t_uint112_to_t_uint256(expr_1556))
                /// @src 0:17607:17655  "amount0Out < _reserve0 && amount1Out < _reserve1"
                let expr_1561 := expr_1557
                if expr_1561
                {
                    /// @src 0:17633:17643  "amount1Out"
                    let _324 := var_amount1Out_1527
                    let expr_1558 := _324
                    /// @src 0:17646:17655  "_reserve1"
                    let _325 := var__reserve1_1550
                    let expr_1559 := _325
                    /// @src 0:17633:17655  "amount1Out < _reserve1"
                    let expr_1560 := lt(cleanup_t_uint256(expr_1558), convert_t_uint112_to_t_uint256(expr_1559))
                    /// @src 0:17607:17655  "amount0Out < _reserve0 && amount1Out < _reserve1"
                    expr_1561 := expr_1560
                }
                /// @src 0:17586:17714  "require(..."
                require_helper_t_stringliteral_3f354ef449b2a9b081220ce21f57691008110b653edc191d8288e60cef58bb5f(expr_1561)
                /// @src 0:17725:17738  "uint balance0"
                let var_balance0_1566
                let zero_t_uint256_326 := zero_value_for_split_t_uint256()
                var_balance0_1566 := zero_t_uint256_326
                /// @src 0:17748:17761  "uint balance1"
                let var_balance1_1569
                let zero_t_uint256_327 := zero_value_for_split_t_uint256()
                var_balance1_1569 := zero_t_uint256_327
                /// @src 0:17870:17876  "token0"
                let _328 := read_from_storage_split_offset_0_t_address(0x06)
                let expr_1573 := _328
                /// @src 0:17852:17876  "address _token0 = token0"
                let var__token0_1572 := expr_1573
                /// @src 0:17908:17914  "token1"
                let _329 := read_from_storage_split_offset_0_t_address(0x07)
                let expr_1577 := _329
                /// @src 0:17890:17914  "address _token1 = token1"
                let var__token1_1576 := expr_1577
                /// @src 0:17936:17938  "to"
                let _330 := var_to_1529
                let expr_1580 := _330
                /// @src 0:17942:17949  "_token0"
                let _331 := var__token0_1572
                let expr_1581 := _331
                /// @src 0:17936:17949  "to != _token0"
                let expr_1582 := iszero(eq(cleanup_t_address(expr_1580), cleanup_t_address(expr_1581)))
                /// @src 0:17936:17966  "to != _token0 && to != _token1"
                let expr_1586 := expr_1582
                if expr_1586
                {
                    /// @src 0:17953:17955  "to"
                    let _332 := var_to_1529
                    let expr_1583 := _332
                    /// @src 0:17959:17966  "_token1"
                    let _333 := var__token1_1576
                    let expr_1584 := _333
                    /// @src 0:17953:17966  "to != _token1"
                    let expr_1585 := iszero(eq(cleanup_t_address(expr_1583), cleanup_t_address(expr_1584)))
                    /// @src 0:17936:17966  "to != _token0 && to != _token1"
                    expr_1586 := expr_1585
                }
                /// @src 0:17928:17992  "require(to != _token0 && to != _token1, \"UniswapV2: INVALID_TO\")"
                require_helper_t_stringliteral_25d395026e6e4dd4e9808c7d6d3dd1f45abaf4874ae71f7161fff58de03154d3(expr_1586)
                /// @src 0:18010:18020  "amount0Out"
                let _334 := var_amount0Out_1525
                let expr_1590 := _334
                /// @src 0:18023:18024  "0"
                let expr_1591 := 0x00
                /// @src 0:18010:18024  "amount0Out > 0"
                let expr_1592 := gt(cleanup_t_uint256(expr_1590), convert_t_rational_0_by_1_to_t_uint256(expr_1591))
                /// @src 0:18006:18064  "if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out)"
                if expr_1592
                {
                    /// @src 0:18040:18047  "_token0"
                    let _335 := var__token0_1572
                    let expr_1594 := _335
                    /// @src 0:18049:18051  "to"
                    let _336 := var_to_1529
                    let expr_1595 := _336
                    /// @src 0:18053:18063  "amount0Out"
                    let _337 := var_amount0Out_1525
                    let expr_1596 := _337
                    fun__safeTransfer_1066(expr_1594, expr_1595, expr_1596)
                }
                /// @src 0:18116:18126  "amount1Out"
                let _338 := var_amount1Out_1527
                let expr_1600 := _338
                /// @src 0:18129:18130  "0"
                let expr_1601 := 0x00
                /// @src 0:18116:18130  "amount1Out > 0"
                let expr_1602 := gt(cleanup_t_uint256(expr_1600), convert_t_rational_0_by_1_to_t_uint256(expr_1601))
                /// @src 0:18112:18170  "if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out)"
                if expr_1602
                {
                    /// @src 0:18146:18153  "_token1"
                    let _339 := var__token1_1576
                    let expr_1604 := _339
                    /// @src 0:18155:18157  "to"
                    let _340 := var_to_1529
                    let expr_1605 := _340
                    /// @src 0:18159:18169  "amount1Out"
                    let _341 := var_amount1Out_1527
                    let expr_1606 := _341
                    fun__safeTransfer_1066(expr_1604, expr_1605, expr_1606)
                }
                /// @src 0:18222:18226  "data"
                let _342_offset := var_data_1531_offset
                let _342_length := var_data_1531_length
                let expr_1610_offset := _342_offset
                let expr_1610_length := _342_length
                /// @src 0:18222:18233  "data.length"
                let expr_1611 := array_length_t_bytes_calldata_ptr(expr_1610_offset, expr_1610_length)
                /// @src 0:18236:18237  "0"
                let expr_1612 := 0x00
                /// @src 0:18222:18237  "data.length > 0"
                let expr_1613 := gt(cleanup_t_uint256(expr_1611), convert_t_rational_0_by_1_to_t_uint256(expr_1612))
                /// @src 0:18218:18429  "if (data.length > 0)..."
                if expr_1613
                {
                    /// @src 0:18272:18274  "to"
                    let _343 := var_to_1529
                    let expr_1615 := _343
                    /// @src 0:18255:18275  "IUniswapV2Callee(to)"
                    let expr_1616_address := convert_t_address_to_t_contract$_IUniswapV2Callee_$959(expr_1615)
                    /// @src 0:18255:18289  "IUniswapV2Callee(to).uniswapV2Call"
                    let expr_1617_address := convert_t_contract$_IUniswapV2Callee_$959_to_t_address(expr_1616_address)
                    let expr_1617_functionSelector := 0x10d1e85c
                    /// @src 0:18311:18321  "msg.sender"
                    let expr_1619 := caller()
                    /// @src 0:18343:18353  "amount0Out"
                    let _344 := var_amount0Out_1525
                    let expr_1620 := _344
                    /// @src 0:18375:18385  "amount1Out"
                    let _345 := var_amount1Out_1527
                    let expr_1621 := _345
                    /// @src 0:18407:18411  "data"
                    let _346_offset := var_data_1531_offset
                    let _346_length := var_data_1531_length
                    let expr_1622_offset := _346_offset
                    let expr_1622_length := _346_length
                    /// @src 0:18255:18429  "IUniswapV2Callee(to).uniswapV2Call(..."
                    if iszero(extcodesize(expr_1617_address))
                    {
                        revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()
                    }
                    let _347 := allocate_unbounded()
                    mstore(_347, shift_left_224(expr_1617_functionSelector))
                    let _348 := abi_encode_tuple_t_address_t_uint256_t_uint256_t_bytes_calldata_ptr__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack(add(_347, 4), expr_1619, expr_1620, expr_1621, expr_1622_offset, expr_1622_length)
                    let _349 := call(gas(), expr_1617_address, 0, _347, sub(_348, _347), _347, 0)
                    if iszero(_349) { revert_forward_1() }
                    if _349
                    {
                        let _350 := 0
                        if gt(_350, returndatasize()) { _350 := returndatasize() }
                        finalize_allocation(_347, _350)
                        abi_decode_tuple__fromMemory(_347, add(_347, _350))
                    }
                }
                /// @src 0:18461:18468  "_token0"
                let _351 := var__token0_1572
                let expr_1628 := _351
                /// @src 0:18454:18469  "IERC20(_token0)"
                let expr_1629_address := convert_t_address_to_t_contract$_IERC20_$777(expr_1628)
                /// @src 0:18454:18479  "IERC20(_token0).balanceOf"
                let expr_1630_address := convert_t_contract$_IERC20_$777_to_t_address(expr_1629_address)
                let expr_1630_functionSelector := 0x70a08231
                /// @src 0:18488:18492  "this"
                let expr_1633_address := address()
                /// @src 0:18480:18493  "address(this)"
                let expr_1634 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1633_address)
                /// @src 0:18454:18494  "IERC20(_token0).balanceOf(address(this))"
                let _352 := allocate_unbounded()
                mstore(_352, shift_left_224(expr_1630_functionSelector))
                let _353 := abi_encode_tuple_t_address__to_t_address__fromStack(add(_352, 4), expr_1634)
                let _354 := call(gas(), expr_1630_address, 0, _352, sub(_353, _352), _352, 32)
                if iszero(_354) { revert_forward_1() }
                let expr_1635
                if _354
                {
                    let _355 := 32
                    if gt(_355, returndatasize()) { _355 := returndatasize() }
                    finalize_allocation(_352, _355)
                    expr_1635 := abi_decode_tuple_t_uint256_fromMemory(_352, add(_352, _355))
                }
                /// @src 0:18443:18494  "balance0 = IERC20(_token0).balanceOf(address(this))"
                var_balance0_1566 := expr_1635
                let expr_1636 := expr_1635
                /// @src 0:18526:18533  "_token1"
                let _356 := var__token1_1576
                let expr_1640 := _356
                /// @src 0:18519:18534  "IERC20(_token1)"
                let expr_1641_address := convert_t_address_to_t_contract$_IERC20_$777(expr_1640)
                /// @src 0:18519:18544  "IERC20(_token1).balanceOf"
                let expr_1642_address := convert_t_contract$_IERC20_$777_to_t_address(expr_1641_address)
                let expr_1642_functionSelector := 0x70a08231
                /// @src 0:18553:18557  "this"
                let expr_1645_address := address()
                /// @src 0:18545:18558  "address(this)"
                let expr_1646 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1645_address)
                /// @src 0:18519:18559  "IERC20(_token1).balanceOf(address(this))"
                let _357 := allocate_unbounded()
                mstore(_357, shift_left_224(expr_1642_functionSelector))
                let _358 := abi_encode_tuple_t_address__to_t_address__fromStack(add(_357, 4), expr_1646)
                let _359 := call(gas(), expr_1642_address, 0, _357, sub(_358, _357), _357, 32)
                if iszero(_359) { revert_forward_1() }
                let expr_1647
                if _359
                {
                    let _360 := 32
                    if gt(_360, returndatasize()) { _360 := returndatasize() }
                    finalize_allocation(_357, _360)
                    expr_1647 := abi_decode_tuple_t_uint256_fromMemory(_357, add(_357, _360))
                }
                /// @src 0:18508:18559  "balance1 = IERC20(_token1).balanceOf(address(this))"
                var_balance1_1569 := expr_1647
                let expr_1648 := expr_1647
                /// @src 0:18596:18604  "balance0"
                let _361 := var_balance0_1566
                let expr_1653 := _361
                /// @src 0:18607:18616  "_reserve0"
                let _362 := var__reserve0_1548
                let expr_1654 := _362
                /// @src 0:18619:18629  "amount0Out"
                let _363 := var_amount0Out_1525
                let expr_1655 := _363
                /// @src 0:18607:18629  "_reserve0 - amount0Out"
                let expr_1656 := checked_sub_t_uint256(convert_t_uint112_to_t_uint256(expr_1654), expr_1655)
                /// @src 0:18596:18629  "balance0 > _reserve0 - amount0Out"
                let expr_1657 := gt(cleanup_t_uint256(expr_1653), cleanup_t_uint256(expr_1656))
                /// @src 0:18596:18695  "balance0 > _reserve0 - amount0Out..."
                let expr_1665
                switch expr_1657
                case 0 {
                    /// @src 0:18694:18695  "0"
                    let expr_1664 := 0x00
                    /// @src 0:18596:18695  "balance0 > _reserve0 - amount0Out..."
                    expr_1665 := convert_t_rational_0_by_1_to_t_uint256(expr_1664)
                }
                default {
                    /// @src 0:18644:18652  "balance0"
                    let _364 := var_balance0_1566
                    let expr_1658 := _364
                    /// @src 0:18656:18665  "_reserve0"
                    let _365 := var__reserve0_1548
                    let expr_1659 := _365
                    /// @src 0:18668:18678  "amount0Out"
                    let _366 := var_amount0Out_1525
                    let expr_1660 := _366
                    /// @src 0:18656:18678  "_reserve0 - amount0Out"
                    let expr_1661 := checked_sub_t_uint256(convert_t_uint112_to_t_uint256(expr_1659), expr_1660)
                    /// @src 0:18655:18679  "(_reserve0 - amount0Out)"
                    let expr_1662 := expr_1661
                    /// @src 0:18644:18679  "balance0 - (_reserve0 - amount0Out)"
                    let expr_1663 := checked_sub_t_uint256(expr_1658, expr_1662)
                    /// @src 0:18596:18695  "balance0 > _reserve0 - amount0Out..."
                    expr_1665 := expr_1663
                }
                /// @src 0:18579:18695  "uint amount0In = balance0 > _reserve0 - amount0Out..."
                let var_amount0In_1652 := expr_1665
                /// @src 0:18722:18730  "balance1"
                let _367 := var_balance1_1569
                let expr_1669 := _367
                /// @src 0:18733:18742  "_reserve1"
                let _368 := var__reserve1_1550
                let expr_1670 := _368
                /// @src 0:18745:18755  "amount1Out"
                let _369 := var_amount1Out_1527
                let expr_1671 := _369
                /// @src 0:18733:18755  "_reserve1 - amount1Out"
                let expr_1672 := checked_sub_t_uint256(convert_t_uint112_to_t_uint256(expr_1670), expr_1671)
                /// @src 0:18722:18755  "balance1 > _reserve1 - amount1Out"
                let expr_1673 := gt(cleanup_t_uint256(expr_1669), cleanup_t_uint256(expr_1672))
                /// @src 0:18722:18821  "balance1 > _reserve1 - amount1Out..."
                let expr_1681
                switch expr_1673
                case 0 {
                    /// @src 0:18820:18821  "0"
                    let expr_1680 := 0x00
                    /// @src 0:18722:18821  "balance1 > _reserve1 - amount1Out..."
                    expr_1681 := convert_t_rational_0_by_1_to_t_uint256(expr_1680)
                }
                default {
                    /// @src 0:18770:18778  "balance1"
                    let _370 := var_balance1_1569
                    let expr_1674 := _370
                    /// @src 0:18782:18791  "_reserve1"
                    let _371 := var__reserve1_1550
                    let expr_1675 := _371
                    /// @src 0:18794:18804  "amount1Out"
                    let _372 := var_amount1Out_1527
                    let expr_1676 := _372
                    /// @src 0:18782:18804  "_reserve1 - amount1Out"
                    let expr_1677 := checked_sub_t_uint256(convert_t_uint112_to_t_uint256(expr_1675), expr_1676)
                    /// @src 0:18781:18805  "(_reserve1 - amount1Out)"
                    let expr_1678 := expr_1677
                    /// @src 0:18770:18805  "balance1 - (_reserve1 - amount1Out)"
                    let expr_1679 := checked_sub_t_uint256(expr_1674, expr_1678)
                    /// @src 0:18722:18821  "balance1 > _reserve1 - amount1Out..."
                    expr_1681 := expr_1679
                }
                /// @src 0:18705:18821  "uint amount1In = balance1 > _reserve1 - amount1Out..."
                let var_amount1In_1668 := expr_1681
                /// @src 0:18852:18861  "amount0In"
                let _373 := var_amount0In_1652
                let expr_1684 := _373
                /// @src 0:18864:18865  "0"
                let expr_1685 := 0x00
                /// @src 0:18852:18865  "amount0In > 0"
                let expr_1686 := gt(cleanup_t_uint256(expr_1684), convert_t_rational_0_by_1_to_t_uint256(expr_1685))
                /// @src 0:18852:18882  "amount0In > 0 || amount1In > 0"
                let expr_1690 := expr_1686
                if iszero(expr_1690)
                {
                    /// @src 0:18869:18878  "amount1In"
                    let _374 := var_amount1In_1668
                    let expr_1687 := _374
                    /// @src 0:18881:18882  "0"
                    let expr_1688 := 0x00
                    /// @src 0:18869:18882  "amount1In > 0"
                    let expr_1689 := gt(cleanup_t_uint256(expr_1687), convert_t_rational_0_by_1_to_t_uint256(expr_1688))
                    /// @src 0:18852:18882  "amount0In > 0 || amount1In > 0"
                    expr_1690 := expr_1689
                }
                /// @src 0:18831:18944  "require(..."
                require_helper_t_stringliteral_10e2efc32d8a31d3b2c11a545b3ed09c2dbabc58ef6de4033929d0002e425b67(expr_1690)
                /// @src 0:19068:19076  "balance0"
                let _375 := var_balance0_1566
                let expr_1696 := _375
                /// @src 0:19068:19080  "balance0.mul"
                let expr_1697_self := expr_1696
                /// @src 0:19081:19085  "1000"
                let expr_1698 := 0x03e8
                /// @src 0:19068:19086  "balance0.mul(1000)"
                let _376 := convert_t_rational_1000_by_1_to_t_uint256(expr_1698)
                let expr_1699 := fun_mul_125(expr_1697_self, _376)
                /// @src 0:19068:19090  "balance0.mul(1000).sub"
                let expr_1700_self := expr_1699
                /// @src 0:19091:19100  "amount0In"
                let _377 := var_amount0In_1652
                let expr_1701 := _377
                /// @src 0:19091:19104  "amount0In.mul"
                let expr_1702_self := expr_1701
                /// @src 0:19105:19106  "3"
                let expr_1703 := 0x03
                /// @src 0:19091:19107  "amount0In.mul(3)"
                let _378 := convert_t_rational_3_by_1_to_t_uint256(expr_1703)
                let expr_1704 := fun_mul_125(expr_1702_self, _378)
                /// @src 0:19068:19108  "balance0.mul(1000).sub(amount0In.mul(3))"
                let expr_1705 := fun_sub_97(expr_1700_self, expr_1704)
                /// @src 0:19044:19108  "uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3))"
                let var_balance0Adjusted_1695 := expr_1705
                /// @src 0:19146:19154  "balance1"
                let _379 := var_balance1_1569
                let expr_1709 := _379
                /// @src 0:19146:19158  "balance1.mul"
                let expr_1710_self := expr_1709
                /// @src 0:19159:19163  "1000"
                let expr_1711 := 0x03e8
                /// @src 0:19146:19164  "balance1.mul(1000)"
                let _380 := convert_t_rational_1000_by_1_to_t_uint256(expr_1711)
                let expr_1712 := fun_mul_125(expr_1710_self, _380)
                /// @src 0:19146:19168  "balance1.mul(1000).sub"
                let expr_1713_self := expr_1712
                /// @src 0:19169:19178  "amount1In"
                let _381 := var_amount1In_1668
                let expr_1714 := _381
                /// @src 0:19169:19182  "amount1In.mul"
                let expr_1715_self := expr_1714
                /// @src 0:19183:19184  "3"
                let expr_1716 := 0x03
                /// @src 0:19169:19185  "amount1In.mul(3)"
                let _382 := convert_t_rational_3_by_1_to_t_uint256(expr_1716)
                let expr_1717 := fun_mul_125(expr_1715_self, _382)
                /// @src 0:19146:19186  "balance1.mul(1000).sub(amount1In.mul(3))"
                let expr_1718 := fun_sub_97(expr_1713_self, expr_1717)
                /// @src 0:19122:19186  "uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3))"
                let var_balance1Adjusted_1708 := expr_1718
                /// @src 0:19225:19241  "balance0Adjusted"
                let _383 := var_balance0Adjusted_1695
                let expr_1721 := _383
                /// @src 0:19225:19245  "balance0Adjusted.mul"
                let expr_1722_self := expr_1721
                /// @src 0:19246:19262  "balance1Adjusted"
                let _384 := var_balance1Adjusted_1708
                let expr_1723 := _384
                /// @src 0:19225:19263  "balance0Adjusted.mul(balance1Adjusted)"
                let expr_1724 := fun_mul_125(expr_1722_self, expr_1723)
                /// @src 0:19292:19301  "_reserve0"
                let _385 := var__reserve0_1548
                let expr_1727 := _385
                /// @src 0:19287:19302  "uint(_reserve0)"
                let expr_1728 := convert_t_uint112_to_t_uint256(expr_1727)
                /// @src 0:19287:19306  "uint(_reserve0).mul"
                let expr_1729_self := expr_1728
                /// @src 0:19307:19316  "_reserve1"
                let _386 := var__reserve1_1550
                let expr_1730 := _386
                /// @src 0:19287:19317  "uint(_reserve0).mul(_reserve1)"
                let _387 := convert_t_uint112_to_t_uint256(expr_1730)
                let expr_1731 := fun_mul_125(expr_1729_self, _387)
                /// @src 0:19287:19321  "uint(_reserve0).mul(_reserve1).mul"
                let expr_1732_self := expr_1731
                /// @src 0:19322:19331  "1000 ** 2"
                let expr_1735 := 0x0f4240
                /// @src 0:19287:19332  "uint(_reserve0).mul(_reserve1).mul(1000 ** 2)"
                let _388 := convert_t_rational_1000000_by_1_to_t_uint256(expr_1735)
                let expr_1736 := fun_mul_125(expr_1732_self, _388)
                /// @src 0:19225:19332  "balance0Adjusted.mul(balance1Adjusted) >=..."
                let expr_1737 := iszero(lt(cleanup_t_uint256(expr_1724), cleanup_t_uint256(expr_1736)))
                /// @src 0:19200:19378  "require(..."
                require_helper_t_stringliteral_50b159bbb975f5448705db79eafd212ba91c20fe5a110a13759239545d3339af(expr_1737)
                /// @src 0:19407:19415  "balance0"
                let _389 := var_balance0_1566
                let expr_1743 := _389
                /// @src 0:19417:19425  "balance1"
                let _390 := var_balance1_1569
                let expr_1744 := _390
                /// @src 0:19427:19436  "_reserve0"
                let _391 := var__reserve0_1548
                let expr_1745 := _391
                /// @src 0:19438:19447  "_reserve1"
                let _392 := var__reserve1_1550
                let expr_1746 := _392
                fun__update_1220(expr_1743, expr_1744, expr_1745, expr_1746)
                /// @src 0:19468:19478  "msg.sender"
                let expr_1751 := caller()
                /// @src 0:19480:19489  "amount0In"
                let _393 := var_amount0In_1652
                let expr_1752 := _393
                /// @src 0:19491:19500  "amount1In"
                let _394 := var_amount1In_1668
                let expr_1753 := _394
                /// @src 0:19502:19512  "amount0Out"
                let _395 := var_amount0Out_1525
                let expr_1754 := _395
                /// @src 0:19514:19524  "amount1Out"
                let _396 := var_amount1Out_1527
                let expr_1755 := _396
                /// @src 0:19526:19528  "to"
                let _397 := var_to_1529
                let expr_1756 := _397
                /// @src 0:19463:19529  "Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to)"
                let _398 := 0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822
                let _399 := convert_t_address_to_t_address(expr_1751)
                let _400 := convert_t_address_to_t_address(expr_1756)
                {
                    let _401 := allocate_unbounded()
                    let _402 := abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack(_401, expr_1752, expr_1753, expr_1754, expr_1755)
                    log3(_401, sub(_402, _401), _398, _399, _400)
                }
            }
            /// @ast-id 1760 @src 0:17236:19536  "function swap(..."
            function fun_swap_1760(var_amount0Out_1525, var_amount1Out_1527, var_to_1529, var_data_1531_offset, var_data_1531_length)
            {
                modifier_lock_1534(var_amount0Out_1525, var_amount1Out_1527, var_to_1529, var_data_1531_offset, var_data_1531_length)
            }
            /// @ast-id 1026 @src 0:11078:11209  "modifier lock() {..."
            function modifier_lock_1765(var_to_1762)
            {
                /// @src 0:11112:11120  "unlocked"
                let _403 := read_from_storage_split_offset_0_t_uint256(0x0c)
                let expr_1010 := _403
                /// @src 0:11124:11125  "1"
                let expr_1011 := 0x01
                /// @src 0:11112:11125  "unlocked == 1"
                let expr_1012 := eq(cleanup_t_uint256(expr_1010), convert_t_rational_1_by_1_to_t_uint256(expr_1011))
                /// @src 0:11104:11147  "require(unlocked == 1, \"UniswapV2: LOCKED\")"
                require_helper_t_stringliteral_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a(expr_1012)
                /// @src 0:11168:11169  "0"
                let expr_1017 := 0x00
                /// @src 0:11157:11169  "unlocked = 0"
                let _404 := convert_t_rational_0_by_1_to_t_uint256(expr_1017)
                update_storage_value_offset_0t_uint256_to_t_uint256(0x0c, _404)
                let expr_1018 := _404
                /// @src 0:11179:11180  "_"
                fun_skim_1810_inner(var_to_1762)
                /// @src 0:11201:11202  "1"
                let expr_1022 := 0x01
                /// @src 0:11190:11202  "unlocked = 1"
                let _405 := convert_t_rational_1_by_1_to_t_uint256(expr_1022)
                update_storage_value_offset_0t_uint256_to_t_uint256(0x0c, _405)
                let expr_1023 := _405
            }
            /// @src 0:19582:20003  "function skim(address to) external lock {..."
            function fun_skim_1810_inner(var_to_1762)
            {
                /// @src 0:19650:19656  "token0"
                let _406 := read_from_storage_split_offset_0_t_address(0x06)
                let expr_1769 := _406
                /// @src 0:19632:19656  "address _token0 = token0"
                let var__token0_1768 := expr_1769
                /// @src 0:19699:19705  "token1"
                let _407 := read_from_storage_split_offset_0_t_address(0x07)
                let expr_1773 := _407
                /// @src 0:19681:19705  "address _token1 = token1"
                let var__token1_1772 := expr_1773
                /// @src 0:19757:19764  "_token0"
                let _408 := var__token0_1768
                let expr_1776 := _408
                /// @src 0:19778:19780  "to"
                let _409 := var_to_1762
                let expr_1777 := _409
                /// @src 0:19801:19808  "_token0"
                let _410 := var__token0_1768
                let expr_1779 := _410
                /// @src 0:19794:19809  "IERC20(_token0)"
                let expr_1780_address := convert_t_address_to_t_contract$_IERC20_$777(expr_1779)
                /// @src 0:19794:19819  "IERC20(_token0).balanceOf"
                let expr_1781_address := convert_t_contract$_IERC20_$777_to_t_address(expr_1780_address)
                let expr_1781_functionSelector := 0x70a08231
                /// @src 0:19828:19832  "this"
                let expr_1784_address := address()
                /// @src 0:19820:19833  "address(this)"
                let expr_1785 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1784_address)
                /// @src 0:19794:19834  "IERC20(_token0).balanceOf(address(this))"
                let _411 := allocate_unbounded()
                mstore(_411, shift_left_224(expr_1781_functionSelector))
                let _412 := abi_encode_tuple_t_address__to_t_address__fromStack(add(_411, 4), expr_1785)
                let _413 := call(gas(), expr_1781_address, 0, _411, sub(_412, _411), _411, 32)
                if iszero(_413) { revert_forward_1() }
                let expr_1786
                if _413
                {
                    let _414 := 32
                    if gt(_414, returndatasize()) { _414 := returndatasize() }
                    finalize_allocation(_411, _414)
                    expr_1786 := abi_decode_tuple_t_uint256_fromMemory(_411, add(_411, _414))
                }
                /// @src 0:19794:19838  "IERC20(_token0).balanceOf(address(this)).sub"
                let expr_1787_self := expr_1786
                /// @src 0:19839:19847  "reserve0"
                let _415 := read_from_storage_split_offset_0_t_uint112(0x08)
                let expr_1788 := _415
                /// @src 0:19794:19848  "IERC20(_token0).balanceOf(address(this)).sub(reserve0)"
                let _416 := convert_t_uint112_to_t_uint256(expr_1788)
                let expr_1789 := fun_sub_97(expr_1787_self, _416)
                fun__safeTransfer_1066(expr_1776, expr_1777, expr_1789)
                /// @src 0:19895:19902  "_token1"
                let _417 := var__token1_1772
                let expr_1793 := _417
                /// @src 0:19916:19918  "to"
                let _418 := var_to_1762
                let expr_1794 := _418
                /// @src 0:19939:19946  "_token1"
                let _419 := var__token1_1772
                let expr_1796 := _419
                /// @src 0:19932:19947  "IERC20(_token1)"
                let expr_1797_address := convert_t_address_to_t_contract$_IERC20_$777(expr_1796)
                /// @src 0:19932:19957  "IERC20(_token1).balanceOf"
                let expr_1798_address := convert_t_contract$_IERC20_$777_to_t_address(expr_1797_address)
                let expr_1798_functionSelector := 0x70a08231
                /// @src 0:19966:19970  "this"
                let expr_1801_address := address()
                /// @src 0:19958:19971  "address(this)"
                let expr_1802 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1801_address)
                /// @src 0:19932:19972  "IERC20(_token1).balanceOf(address(this))"
                let _420 := allocate_unbounded()
                mstore(_420, shift_left_224(expr_1798_functionSelector))
                let _421 := abi_encode_tuple_t_address__to_t_address__fromStack(add(_420, 4), expr_1802)
                let _422 := call(gas(), expr_1798_address, 0, _420, sub(_421, _420), _420, 32)
                if iszero(_422) { revert_forward_1() }
                let expr_1803
                if _422
                {
                    let _423 := 32
                    if gt(_423, returndatasize()) { _423 := returndatasize() }
                    finalize_allocation(_420, _423)
                    expr_1803 := abi_decode_tuple_t_uint256_fromMemory(_420, add(_420, _423))
                }
                /// @src 0:19932:19976  "IERC20(_token1).balanceOf(address(this)).sub"
                let expr_1804_self := expr_1803
                /// @src 0:19977:19985  "reserve1"
                let _424 := read_from_storage_split_offset_14_t_uint112(0x08)
                let expr_1805 := _424
                /// @src 0:19932:19986  "IERC20(_token1).balanceOf(address(this)).sub(reserve1)"
                let _425 := convert_t_uint112_to_t_uint256(expr_1805)
                let expr_1806 := fun_sub_97(expr_1804_self, _425)
                fun__safeTransfer_1066(expr_1793, expr_1794, expr_1806)
            }
            /// @ast-id 1810 @src 0:19582:20003  "function skim(address to) external lock {..."
            function fun_skim_1810(var_to_1762)
            {
                modifier_lock_1765(var_to_1762)
            }
            /// @ast-id 1026 @src 0:11078:11209  "modifier lock() {..."
            function modifier_lock_1813()
            {
                /// @src 0:11112:11120  "unlocked"
                let _426 := read_from_storage_split_offset_0_t_uint256(0x0c)
                let expr_1010 := _426
                /// @src 0:11124:11125  "1"
                let expr_1011 := 0x01
                /// @src 0:11112:11125  "unlocked == 1"
                let expr_1012 := eq(cleanup_t_uint256(expr_1010), convert_t_rational_1_by_1_to_t_uint256(expr_1011))
                /// @src 0:11104:11147  "require(unlocked == 1, \"UniswapV2: LOCKED\")"
                require_helper_t_stringliteral_4cc87f075f04bdfaccb0dc54ec0b98f9169b1507a7e83ec8ee97e34d6a77db4a(expr_1012)
                /// @src 0:11168:11169  "0"
                let expr_1017 := 0x00
                /// @src 0:11157:11169  "unlocked = 0"
                let _427 := convert_t_rational_0_by_1_to_t_uint256(expr_1017)
                update_storage_value_offset_0t_uint256_to_t_uint256(0x0c, _427)
                let expr_1018 := _427
                /// @src 0:11179:11180  "_"
                fun_sync_1839_inner()
                /// @src 0:11201:11202  "1"
                let expr_1022 := 0x01
                /// @src 0:11190:11202  "unlocked = 1"
                let _428 := convert_t_rational_1_by_1_to_t_uint256(expr_1022)
                update_storage_value_offset_0t_uint256_to_t_uint256(0x0c, _428)
                let expr_1023 := _428
            }
            /// @src 0:20049:20263  "function sync() external lock {..."
            function fun_sync_1839_inner()
            {
                /// @src 0:20117:20123  "token0"
                let _429 := read_from_storage_split_offset_0_t_address(0x06)
                let expr_1817 := _429
                /// @src 0:20110:20124  "IERC20(token0)"
                let expr_1818_address := convert_t_address_to_t_contract$_IERC20_$777(expr_1817)
                /// @src 0:20110:20134  "IERC20(token0).balanceOf"
                let expr_1819_address := convert_t_contract$_IERC20_$777_to_t_address(expr_1818_address)
                let expr_1819_functionSelector := 0x70a08231
                /// @src 0:20143:20147  "this"
                let expr_1822_address := address()
                /// @src 0:20135:20148  "address(this)"
                let expr_1823 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1822_address)
                /// @src 0:20110:20149  "IERC20(token0).balanceOf(address(this))"
                let _430 := allocate_unbounded()
                mstore(_430, shift_left_224(expr_1819_functionSelector))
                let _431 := abi_encode_tuple_t_address__to_t_address__fromStack(add(_430, 4), expr_1823)
                let _432 := call(gas(), expr_1819_address, 0, _430, sub(_431, _430), _430, 32)
                if iszero(_432) { revert_forward_1() }
                let expr_1824
                if _432
                {
                    let _433 := 32
                    if gt(_433, returndatasize()) { _433 := returndatasize() }
                    finalize_allocation(_430, _433)
                    expr_1824 := abi_decode_tuple_t_uint256_fromMemory(_430, add(_430, _433))
                }
                /// @src 0:20170:20176  "token1"
                let _434 := read_from_storage_split_offset_0_t_address(0x07)
                let expr_1826 := _434
                /// @src 0:20163:20177  "IERC20(token1)"
                let expr_1827_address := convert_t_address_to_t_contract$_IERC20_$777(expr_1826)
                /// @src 0:20163:20187  "IERC20(token1).balanceOf"
                let expr_1828_address := convert_t_contract$_IERC20_$777_to_t_address(expr_1827_address)
                let expr_1828_functionSelector := 0x70a08231
                /// @src 0:20196:20200  "this"
                let expr_1831_address := address()
                /// @src 0:20188:20201  "address(this)"
                let expr_1832 := convert_t_contract$_UniswapV2Pair_$1840_to_t_address(expr_1831_address)
                /// @src 0:20163:20202  "IERC20(token1).balanceOf(address(this))"
                let _435 := allocate_unbounded()
                mstore(_435, shift_left_224(expr_1828_functionSelector))
                let _436 := abi_encode_tuple_t_address__to_t_address__fromStack(add(_435, 4), expr_1832)
                let _437 := call(gas(), expr_1828_address, 0, _435, sub(_436, _435), _435, 32)
                if iszero(_437) { revert_forward_1() }
                let expr_1833
                if _437
                {
                    let _438 := 32
                    if gt(_438, returndatasize()) { _438 := returndatasize() }
                    finalize_allocation(_435, _438)
                    expr_1833 := abi_decode_tuple_t_uint256_fromMemory(_435, add(_435, _438))
                }
                /// @src 0:20216:20224  "reserve0"
                let _439 := read_from_storage_split_offset_0_t_uint112(0x08)
                let expr_1834 := _439
                /// @src 0:20238:20246  "reserve1"
                let _440 := read_from_storage_split_offset_14_t_uint112(0x08)
                let expr_1835 := _440
                fun__update_1220(expr_1824, expr_1833, expr_1834, expr_1835)
            }
            /// @ast-id 1839 @src 0:20049:20263  "function sync() external lock {..."
            function fun_sync_1839()
            { modifier_lock_1813() }
        }
        data ".metadata" hex"a2646970667358221220fb0cf1d257ee5397229745db0c2be90b14578d6345016f033134f5727c9f8f8064736f6c63430008100033"
    }
}

